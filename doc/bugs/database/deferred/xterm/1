Return-Path: @XX.LCS.MIT.EDU,@relay.cs.net:glennw%shark.gwd.tek.com@tektronix.tek.com
Received: by expo.lcs.mit.edu; Wed, 14 Sep 88 23:20:26 EDT
Received: from RELAY.CS.NET by XX.LCS.MIT.EDU with TCP/SMTP; Wed 14 Sep 88 23:21:05-EDT
Received: from relay2.cs.net by RELAY.CS.NET id ag13256; 14 Sep 88 19:41 EDT
Received: from tektronix.tek.com by RELAY.CS.NET id aa04159; 14 Sep 88 19:21 EDT
Received: from shark.GWD.TEK.COM by tektronix.TEK.COM (5.51/6.24)
	id AA27530; Wed, 14 Sep 88 15:07:07 PDT
Received: by shark.GWD.TEK.COM (5.16/6.24)
	id AA29690; Wed, 14 Sep 88 15:05:02 PDT
From: Glenn Widener <glennw@shark.gwd.tek.com>
Message-Id: <8809142205.AA29690@shark.GWD.TEK.COM>
Date: Wed, 14 Sep 88 15:04:55 PDT
To: xbugs@expo.lcs.mit.edu
Cc: alt@shark.gwd.tek.com
Fcc: //shark/bd/X11/doc/bugtracking/xbugs_mail
Fcc: buglog
Subject: X11 R3 bug report: xterm should not change border color

### bug number:   973
### area:         xterm
### severity:     very low
### comments:     


Glenn Widener
M.S. 61-277
Tektronix, Inc.
P.O. Box 1000
Wilsonville, OR
	 97070-1000

(503) 685-2494
glennw@shark.GWD.TEK.COM

--------------------
VERSION:
	X11 release 3

CLIENT MACHINE:
	Tektronix 4317 (actually any)

CLIENT OPERATING SYSTEM:
	UTEK 3.0 (~=4.2bsd kernel + some 4.3 utilities)
	(actually any)

DISPLAY:
	Tektronix 4317 (actually any)

SYNOPSIS:
	Clients should not attempt to dynamically change border colors.

DESCRIPTION:
	Area: xterm
	Files:  clients/xterm/misc.c
		clients/xterm/charproc.c
		clients/xterm/Tekproc.c
		clients/xterm/xterm.man

	Borders are owned by window managers, and if clients futz with them 
	after window creation, the wm will not be able to control them.

	While we are on the subject, border color as a client resource is
	also a bad idea - users will get the idea that they work, when they
	don't with most "real" window managers.  
	The toolkit resources for borderColor should be deprecated for 
	top-level windows.  But I won't try to fix that here.

FIX:
RCS file: RCS/misc.c,v
Retrieving revision 1.4
diff  -c -r1.4 misc.c
*** /tmp/,RCSt1013880	Wed Sep 14 13:06:59 1988
--- misc.c	Wed Sep 14 13:06:27 1988
***************
*** 198,204
      if(screen->TekEmu) {
  	if(!Ttoggled) TCursorToggle(TOGGLE);
  	screen->select &= ~flag;
- 	TekUnselect();
  #ifdef obsolete
  			if(screen->cellsused) {
  				i = (term->flags & REVERSE_VIDEO) == 0;

--- 198,203 -----
      if(screen->TekEmu) {
  	if(!Ttoggled) TCursorToggle(TOGGLE);
  	screen->select &= ~flag;
  #ifdef obsolete
  			if(screen->cellsused) {
  				i = (term->flags & REVERSE_VIDEO) == 0;
***************
*** 213,219
  	if(!Ttoggled) TCursorToggle(TOGGLE);
      } else {
  	screen->select &= ~flag;
- 	VTUnselect();
  	if(screen->cursor_state &&
  	   (screen->cursor_col != screen->cur_col ||
  	    screen->cursor_row != screen->cur_row))

--- 212,217 -----
  	if(!Ttoggled) TCursorToggle(TOGGLE);
      } else {
  	screen->select &= ~flag;
  	if(screen->cursor_state &&
  	   (screen->cursor_col != screen->cur_col ||
  	    screen->cursor_row != screen->cur_row))
===================================================================
RCS file: RCS/Tekproc.c,v
Retrieving revision 1.4
diff  -c -r1.4 Tekproc.c
*** /tmp/,RCSt1013880	Wed Sep 14 13:07:05 1988
--- Tekproc.c	Wed Sep 14 12:10:16 1988
***************
*** 998,1005
  	    set_tek_visibility (TRUE);
  	} 
  
- 	if(screen->select || screen->always_highlight)
- 		TekSelect();
  	if (L_flag > 0) {
  		XWarpPointer (screen->display, None, TWindow(screen),
  			    0, 0, 0, 0,

--- 998,1003 -----
  	    set_tek_visibility (TRUE);
  	} 
  
  	if (L_flag > 0) {
  		XWarpPointer (screen->display, None, TWindow(screen),
  			    0, 0, 0, 0,
***************
*** 1019,1026
  		Ttoggled = TRUE;
  	}
  	screen->TekEmu = FALSE;
- 	if (!screen->always_highlight)
- 	    TekUnselect ();
  	reselectwindow (screen);
  }
  

--- 1017,1022 -----
  		Ttoggled = TRUE;
  	}
  	screen->TekEmu = FALSE;
  	reselectwindow (screen);
  }
  
***************
*** 1251,1257
  
  
      XDefineCursor(screen->display, TShellWindow, screen->pointer_cursor);
!     TekUnselect ();
  
      {	/* there's gotta be a better way... */
  	static Arg args[] = {

--- 1247,1253 -----
  
  
      XDefineCursor(screen->display, TShellWindow, screen->pointer_cursor);
!     TekSelect ();
  
      {	/* there's gotta be a better way... */
  	static Arg args[] = {
***************
*** 1399,1413
  	if (tekWidget && TShellWindow)
  	  XSetWindowBorder (screen->display, TShellWindow,
  			    tekWidget->core.border_pixel);
- }
- 
- TekUnselect()
- {
- 	register TScreen *screen = &term->screen;
- 
- 	if (tekWidget && TShellWindow && !screen->always_highlight)
- 	  XSetWindowBorderPixmap (screen->display, TShellWindow,
- 				  screen->graybordertile);
  }
  
  TekCopy()

--- 1395,1400 -----
  	if (tekWidget && TShellWindow)
  	  XSetWindowBorder (screen->display, TShellWindow,
  			    tekWidget->core.border_pixel);
  }
  
  TekCopy()
===================================================================
RCS file: RCS/charproc.c,v
Retrieving revision 1.6
diff  -c -r1.6 charproc.c
*** /tmp/,RCSt1013880	Wed Sep 14 13:07:16 1988
--- charproc.c	Wed Sep 14 12:10:30 1988
***************
*** 1,5
  /*
!  * $Header: charproc.c,v 1.6 88/09/14 11:44:46 glennw Exp $
   */
  
  

--- 1,5 -----
  /*
!  * $Header: charproc.c,v 1.4.1.2 88/09/13 10:15:08 glennw Exp $
   */
  
  
***************
*** 125,131
  #define	doinput()		(bcnt-- > 0 ? *bptr++ : in_put())
  
  #ifndef lint
! static char rcs_id[] = "$Header: charproc.c,v 1.6 88/09/14 11:44:46 glennw Exp $";
  #endif	/* lint */
  
  static long arg;

--- 125,131 -----
  #define	doinput()		(bcnt-- > 0 ? *bptr++ : in_put())
  
  #ifndef lint
! static char rcs_id[] = "$Header: charproc.c,v 1.4.1.2 88/09/13 10:15:08 glennw Exp $";
  #endif	/* lint */
  
  static long arg;
***************
*** 1761,1768
  
  	screen->cursor_state = OFF;
  	screen->cursor_set = ON;
- 	if(screen->select || screen->always_highlight)
- 		VTSelect();
  	if (L_flag > 0) {
  		XWarpPointer (screen->display, None, VWindow(screen),
  			    0, 0, 0, 0,

--- 1761,1766 -----
  
  	screen->cursor_state = OFF;
  	screen->cursor_set = ON;
  	if (L_flag > 0) {
  		XWarpPointer (screen->display, None, VWindow(screen),
  			    0, 0, 0, 0,
***************
*** 1783,1790
  		VTparse();
  	HideCursor();
  	screen->cursor_set = OFF;
- 	if (!screen->always_highlight)
- 	    VTUnselect ();
  	reselectwindow (screen);
  }
  

--- 1781,1786 -----
  		VTparse();
  	HideCursor();
  	screen->cursor_set = OFF;
  	reselectwindow (screen);
  }
  
***************
*** 2254,2260
  		ScrollBarOn (term, FALSE, TRUE);
  	}
  	CursorSave (term, &screen->sc);
! 	VTUnselect();
  	return;
  }
  

--- 2250,2256 -----
  		ScrollBarOn (term, FALSE, TRUE);
  	}
  	CursorSave (term, &screen->sc);
! 	VTSelect();
  	return;
  }
  
***************
*** 2385,2399
  	if (VShellWindow)
  	  XSetWindowBorder (screen->display, VShellWindow,
  			    term->core.border_pixel);
- }
- 
- VTUnselect()
- {
- 	register TScreen *screen = &term->screen;
- 
- 	if (VShellWindow)
- 	  XSetWindowBorderPixmap (screen->display, VShellWindow,
- 				  screen->graybordertile);
  }
  
  VTReset(full)

--- 2381,2386 -----
  	if (VShellWindow)
  	  XSetWindowBorder (screen->display, VShellWindow,
  			    term->core.border_pixel);
  }
  
  VTReset(full)
symlink(//hammer/dc/X11/exp/clients/xterm/RCS/., RCS)
RCS file: RCS/xterm.man,v
Retrieving revision 1.4
diff  -c -r1.4 xterm.man
*** /tmp/,RCSt1014042	Wed Sep 14 13:46:46 1988
--- xterm.man	Wed Sep 14 12:09:28 1988
***************
*** 21,28
  .PP
  Although both windows may be displayed at the same time, one of them is 
  considered the ``active'' window for receiving keyboard input and terminal
! output.  This is the window that contains the text cursor and whose border 
! highlights whenever the pointer is in either window.
  The active window can be choosen through escape sequences,
  the ``Modes'' menu in the VT102 window, and the ``Tektronix''
  menu in the 4014 window.

--- 21,28 -----
  .PP
  Although both windows may be displayed at the same time, one of them is 
  considered the ``active'' window for receiving keyboard input and terminal
! output.  This is the window that contains the text cursor;
! the cursor is highlighted (solid block) whenever the pointer is in either window.
  The active window can be choosen through escape sequences,
  the ``Modes'' menu in the VT102 window, and the ``Tektronix''
  menu in the 4014 window.
***************
*** 55,61
  .B \-ah
  This option indicates that 
  .I xterm
! should always highlight the text cursor and borders.  By default,
  .I xterm
  will display a hollow text cursor whenever the focus is lost or the 
  pointer leaves the window.

--- 55,61 -----
  .B \-ah
  This option indicates that 
  .I xterm
! should always highlight the text cursor (make it solid).  By default,
  .I xterm
  will display a hollow text cursor whenever the focus is lost or the 
  pointer leaves the window.
***************
*** 781,791
  for cutting and pasting electronic mailing addresses and Unix filenames.
  .SH "OTHER FEATURES"
  .I Xterm
! automatically highlights the window border and text cursor when the
! pointer enters the window (selected) and unhighlights them when the pointer
! leaves the window (unselected).
! If the window is the focus window, then the window is highlighted no matter
! where the pointer is.
  .PP
  In VT102 mode, there are escape sequences to activate and deactivate
  an alternate screen buffer, which is the same size as the display area

--- 781,792 -----
  for cutting and pasting electronic mailing addresses and Unix filenames.
  .SH "OTHER FEATURES"
  .I Xterm
! automatically highlights the text cursor when the
! window is selected and unhighlights it when the window is unselected.
! "Selection" means that keyboard typing goes to the window.  How selection
! occurs is a function of the window manager; most window managers either 
! make the focus go wherever the pointer is or allow users to select a 
! focus window with a mouse button.
  .PP
  In VT102 mode, there are escape sequences to activate and deactivate
  an alternate screen buffer, which is the same size as the display area

