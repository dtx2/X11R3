Return-Path: @XX.LCS.MIT.EDU,@neat.ai.toronto.edu:moraes@bay.csri.toronto.edu
Received: by expo.lcs.mit.edu; Tue, 12 Jul 88 16:38:30 EDT
Received: from RELAY.CS.NET by XX.LCS.MIT.EDU with TCP/SMTP; Tue 12 Jul 88 16:33:24-EDT
Received: from neat.ai.toronto.edu by RELAY.CS.NET id aa17747;
          12 Jul 88 16:27 EDT
Received: from bay.csri.toronto.edu by neat.ai.toronto.edu with SMTP id 181; Tue, 12 Jul 88 16:19:51 EDT
Received: by bay.csri.toronto.edu id 20388; Tue, 12 Jul 88 16:23:33 EDT
From: Mark Moraes <moraes@csri.toronto.edu>
To: xbugs@expo.lcs.mit.edu
Subject: xhost
Cc: moraes@csri.toronto.edu
Message-Id: <88Jul12.162333edt.20388@bay.csri.toronto.edu>
Date: 	Tue, 12 Jul 88 16:23:29 EDT

### bug number:   739
### area:         xhost
### severity:     low
### comments:     

I know I should send one bug per message - unfortunately,we first
changed xhost to fix one problem, then discovered a bug on the Sun4 so
they're intertwined. Sorry.

	Mark.

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/50, Sun 3/60, Sun 3/110, Sun 4/280, Sun 4/110

CLIENT OPERATING SYSTEM:
	SunOS 3.3, SunOS 3.5, SunOS 3.2 (on Sun4)

DISPLAY:
	Any

SYNOPSIS:
	xhost adds only the first host nunmber corresponding to a name.

	xhost dumps core on Sun4s (and others) because of 1. A NULL
	dereferencing pointer when it tries to print an error message for
	opening the display.
	xhost dumps core on Sun4s when it casts an inet addr * as an int *.

DESCRIPTION:
	Several hosts here are on two or more networks, and have more than
	one net number. Depending on which client workstation you use, you
	need to xhost a different number/name which is painful, and hard
	to explain to users (we tried!). 

	Sun C compilers, at least, will not accept 
  	    fprintf(stderr, "%s: Can't open display /* '%s' */\n",
  		    argv[0]/*, XDisplayName("\0")*/);
	as being equivalent to
  	    fprintf(stderr, "%s: Can't open display \n",
  		    argv[0]/*, XDisplayName("\0")*/);

	SPARC (and other RISC architectures) will not like a (struct
	in_addr *) being cast as a (int *) for inet_ntoa which expects a
	struct in_addr as an argument.

REPEAT-BY:
	xhost foo
		where foo is a machine with multiple addresses. xhost reveals
	that only one address got added.

	unsetenv DISPLAY
	xhost
		should dump core on most non-Vaxen - more recent Sun C
	compilers may generate code to print (null) instead of doing a
	NULL deref.

FIX:  
	The solution is for xhost to scan the entire host file and add
	all instances of the host to the access list. This is not as slow
	as it may sound for our hosts file (352 entries, from yellow
	pages, no less). For larger hosts files, this may cause problems.
	We're not sure. (4.3bsd returns a list of all addresses, I think?)
	Some ifdef might be a good idea. Again, the following code works
	very well, and quite fast on our Sun3 and Sun4 workstations.

	The commented out code works fine and appears correct.
  	    fprintf(stderr, "%s: Can't open display '%s'\n",
  		    argv[0], XDisplayName("\0"));

	Use (struct in_addr *) instead of (int *) for casting the address
	passed to inet_ntoa()

	If these diffs are too long, or difficult to apply, I could send
	the entire xhost.c file.	

*** /tmp/,RCSt1a16216	Tue Jul 12 16:03:59 1988
--- xhost.c	Tue Jul 12 15:57:05 1988
***************
*** 44,49
   
  int local_xerror();
  
  #define NAMESERVER_TIMEOUT 5	/* time to wait for nameserver */
  
  typedef struct {

--- 44,54 -----
   
  int local_xerror();
  
+ #ifndef TRUE
+ #define TRUE 1
+ #define FALSE 0
+ #endif
+ 
  #define NAMESERVER_TIMEOUT 5	/* time to wait for nameserver */
  
  typedef struct {
***************
*** 65,70
  #define FAMILIES ((sizeof familyMap)/(sizeof familyMap[0]))
  
  int nameserver_timedout;
   
  static int XFamily(af)
      int af;

--- 70,77 -----
  #define FAMILIES ((sizeof familyMap)/(sizeof familyMap[0]))
  
  int nameserver_timedout;
+ 
+ static char *progname;
   
  static int XFamily(af)
      int af;
***************
*** 84,90
  	char host[256];
  	register char *arg;
  	int display, i, w, nhosts;
- 	XHostAddress *address, *get_address();
  	char *hostname, *get_hostname();
  	XHostAddress *list;
  	Bool enabled = False;

--- 91,96 -----
  	char host[256];
  	register char *arg;
  	int display, i, w, nhosts;
  	char *hostname, *get_hostname();
  	XHostAddress *list;
  	char *inet_ntoa();
***************
*** 87,92
  	XHostAddress *address, *get_address();
  	char *hostname, *get_hostname();
  	XHostAddress *list;
  	Bool enabled = False;
  #ifdef DNETCONN
  	char *dnet_htoa();

--- 93,99 -----
  	int display, i, w, nhosts;
  	char *hostname, *get_hostname();
  	XHostAddress *list;
+ 	char *inet_ntoa();
  	Bool enabled = False;
  #ifdef DNETCONN
  	char *dnet_htoa();
***************
*** 95,100
  	char *cp;
  #endif
   
  	if ((dpy = XOpenDisplay(NULL)) == NULL) {
  	    fprintf(stderr, "%s: Can't open display /* '%s' */\n",
  		    argv[0]/*, XDisplayName("\0")*/);

--- 102,108 -----
  	char *cp;
  #endif
   
+  	progname = argv[0];
  	if ((dpy = XOpenDisplay(NULL)) == NULL) {
  	    fprintf(stderr, "%s: Can't open display '%s'\n",
  		    argv[0], XDisplayName("\0"));
***************
*** 96,103
  #endif
   
  	if ((dpy = XOpenDisplay(NULL)) == NULL) {
! 	    fprintf(stderr, "%s: Can't open display /* '%s' */\n",
! 		    argv[0]/*, XDisplayName("\0")*/);
  	    exit(1);
  	}
  

--- 104,111 -----
   
   	progname = argv[0];
  	if ((dpy = XOpenDisplay(NULL)) == NULL) {
! 	    fprintf(stderr, "%s: Can't open display '%s'\n",
! 		    argv[0], XDisplayName("\0"));
  	    exit(1);
  	}
  
***************
*** 105,111
  
  	XSetErrorHandler(local_xerror);
   
!  
  	if (argc == 1) {
  #ifdef DNETCONN
  		setnodeent(1); /* keep the database accessed */

--- 113,119 -----
  
  	XSetErrorHandler(local_xerror);
   
! 
  	if (argc == 1) {
  #ifdef DNETCONN
  		setnodeent(1); /* keep the database accessed */
***************
*** 117,123
  		if (nhosts != 0) {
  		    for (i = 0; i < nhosts; i++ )  {
  		      hostname = get_hostname(&list[i]);
! 		      printf("%s\t", hostname);
  		      if (nameserver_timedout)
  			printf("(nameserver did not respond in %d seconds)\n",
  			        NAMESERVER_TIMEOUT);

--- 125,132 -----
  		if (nhosts != 0) {
  		    for (i = 0; i < nhosts; i++ )  {
  		      hostname = get_hostname(&list[i]);
! 		      printf("%s\t%s\t", hostname, 
! 		       inet_ntoa(*((struct in_addr *) list[i].address)));
  		      if (nameserver_timedout)
  			printf("(nameserver did not respond in %d seconds)\n",
  			        NAMESERVER_TIMEOUT);
***************
*** 137,145
  		    XEnableAccessControl(dpy);
  		else {
  		    arg = argv[i][1]? &argv[i][1] : argv[++i];
!                     if ((address = get_address(arg)) == NULL) 
! 		         fprintf(stderr, "%s: bad host: %s\n", argv[0], arg);
!                     else XRemoveHost(dpy, address);
  		}
  	    } else {
  	        if (*arg == '+' && !argv[i][1] && ((i+1) == argc))

--- 146,152 -----
  		    XEnableAccessControl(dpy);
  		else {
  		    arg = argv[i][1]? &argv[i][1] : argv[++i];
! 		    X_Host(dpy, arg, FALSE);
  		}
  	    } else {
  	        if (*arg == '+' && !argv[i][1] && ((i+1) == argc))
***************
*** 148,156
  		    if (*arg == '+') {
  		      arg = argv[i][1]? &argv[i][1] : argv[++i];
  		    }
!                     if ((address = get_address(arg)) == NULL) 
! 		         fprintf(stderr, "%s: bad host: %s\n", argv[0], arg);
!                     else XAddHost(dpy, address);
  		}
  	    }
  	}

--- 155,161 -----
  		    if (*arg == '+') {
  		      arg = argv[i][1]? &argv[i][1] : argv[++i];
  		    }
! 		    X_Host(dpy, arg, TRUE);
  		}
  	    }
  	}
***************
*** 160,165
  
   
  
  /*
   * get_address - return a pointer to an internet address given
   * either a name (CHARON.MIT.EDU) or a string with the raw

--- 165,191 -----
  
   
  
+ X_Host(dpy, name, add)
+ Display *dpy;
+ char *name;
+ {
+ 	int bad_host = TRUE;
+ 	XHostAddress *address, *get_address();
+ 	
+ 	sethostent(1);
+ 	while((address = get_address(name)) != NULL) {
+ 		if (add) 
+ 			XAddHost(dpy, address);
+ 		else
+ 			XRemoveHost(dpy, address);
+ 		bad_host = FALSE;
+ 	}
+ 	if (bad_host)
+ 		fprintf(stderr, "%s: bad host: %s\n", progname, name);
+ 	return;
+ }
+ 
+ 
  /*
   * get_address - return a pointer to an internet address given
   * either a name (CHARON.MIT.EDU) or a string with the raw
***************
*** 165,170
   * either a name (CHARON.MIT.EDU) or a string with the raw
   * address (18.58.0.13)
   */
  
  XHostAddress *get_address (name) 
  char *name;

--- 191,199 -----
   * either a name (CHARON.MIT.EDU) or a string with the raw
   * address (18.58.0.13)
   */
+ #ifndef STREQ
+ #define STREQ(s1, s2)	((*s1)==(*s2) && strcmp(s1, s2) == 0)
+ #endif
  
  /* 
   *  We don't have 4.3 gethostbyname, which returns all the addresses of
***************
*** 166,171
   * address (18.58.0.13)
   */
  
  XHostAddress *get_address (name) 
  char *name;
  {

--- 195,209 -----
  #define STREQ(s1, s2)	((*s1)==(*s2) && strcmp(s1, s2) == 0)
  #endif
  
+ /* 
+  *  We don't have 4.3 gethostbyname, which returns all the addresses of
+  *  a given host, so we have to do this. It assumes that sethostent()
+  *  has been called already - to make multiple calls to this, first call
+  *  sethostent() and then call get_address repeatedly - it will return
+  *  the next address of the host, or NULL if no more addresses are to be
+  *  found. It checks all aliases as well.
+  */
+ 
  XHostAddress *get_address (name) 
  char *name;
  {
***************
*** 170,175
  char *name;
  {
    struct hostent *hp;
    static XHostAddress ha;
    static struct in_addr addr;	/* so we can point at it */
  #ifdef DNETCONN

--- 208,214 -----
  char *name;
  {
    struct hostent *hp;
+   char **s;
    static XHostAddress ha;
    static struct in_addr addr;	/* so we can point at it */
  #ifdef DNETCONN
***************
*** 196,221
      return(&ha);	/* Found it */
    }
  #endif /* DNETCONN */
!   /*
!    * First see if inet_addr() can grok the name; if so, then use it.
!    */
!   if ((addr.s_addr = inet_addr(name)) != -1) {
!     ha.family = FamilyInternet;
!     ha.length = sizeof(addr.s_addr);
!     ha.address = (char *)&addr.s_addr;
!     return(&ha);	/* Found it */
!   } 
!   /*
!    * Is it in the namespace?
!    */
!   else if (((hp = gethostbyname(name)) == (struct hostent *)NULL)
!        || hp->h_addrtype != AF_INET) {
!     return (NULL);		/* Sorry, you lose */
!   } else {
!     ha.family = XFamily(hp->h_addrtype);
!     ha.length = hp->h_length;
!     ha.address = hp->h_addr;
!     return (&ha);	/* Found it. */
    }
  }
  

--- 235,251 -----
      return(&ha);	/* Found it */
    }
  #endif /* DNETCONN */
!   while((hp = gethostent()) != NULL) {
!     if (STREQ(name, hp->h_name) && hp->h_addrtype == AF_INET) {
!       goto found;
!     }
!     s = hp->h_aliases;
!     while(s && *s) {
!       if(STREQ(name, *s) && hp->h_addrtype == AF_INET) {
!         goto found;
!       }
!       s++;
!     }
    }
    return(NULL);
  found:
***************
*** 217,222
      ha.address = hp->h_addr;
      return (&ha);	/* Found it. */
    }
  }
  
  

--- 247,258 -----
        s++;
      }
    }
+   return(NULL);
+ found:
+   ha.family = XFamily(hp->h_addrtype);
+   ha.length = hp->h_length;
+   ha.address = hp->h_addr;
+   return(&ha);
  }
  
  /*
***************
*** 219,225
    }
  }
  
- 
  /*
   * get_hostname - Given an internet address, return a name (CHARON.MIT.EDU)
   * or a string representing the address (18.58.0.13) if the name cannot

--- 255,260 -----
    return(&ha);
  }
  
  /*
   * get_hostname - Given an internet address, return a name (CHARON.MIT.EDU)
   * or a string representing the address (18.58.0.13) if the name cannot
***************
*** 255,261
      alarm(0);
      if (hp)
        return (hp->h_name);
!     else return (inet_ntoa(*((int *)ha->address)));
    }
  #ifdef DNETCONN
    if (ha->family == FamilyDECnet) {

--- 290,296 -----
      alarm(0);
      if (hp)
        return (hp->h_name);
!     else return (inet_ntoa(*((struct in_addr *) ha->address)));
    }
  #ifdef DNETCONN
    if (ha->family == FamilyDECnet) {

