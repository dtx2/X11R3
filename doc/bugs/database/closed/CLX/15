Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by EXPO.LCS.MIT.EDU; Mon, 14 Mar 88 09:59:17 EST
Return-Path: <@TI.COM:Oren@Home.csc.ti.com>
Received: from ti.com (TI.COM) by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 131785; 11 Mar 88 16:32:32 EST
Received: by ti.com id AA05315; Fri, 11 Mar 88 15:14:44 CST
Received: from SI by tilde id AA29706; Fri, 11 Mar 88 15:11:12 CST
Message-Id: <2783106753-243441@SI>
Sender: OREN@si.csc.ti.com
Date: Fri, 11 Mar 88  15:12:33 CST
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@zermatt.lcs.mit.edu
Subject: GCONTEXT bugs
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Mon, 14 Mar 88 09:59 EST
Resent-Message-Id: <880314095933.7.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   100
### area:         CLX
### severity:     
### assigned to:  rws
### status:       closed

There's a type error in restore-gcontext-temp-state introduced by the
server-extensions patches.  In the GCONTEXT.L file:
Is:
(defun restore-gcontext-temp-state (gcontext temp-mask temp-gc)
  (declare (type gcontext gcontext)
	   (type xgcmask temp-mask)
	   (type resource-id temp-gc))

Should be:
(defun restore-gcontext-temp-state (gcontext temp-mask temp-gc)
  (declare (type gcontext gcontext temp-gc)
	   (type xgcmask temp-mask))

-------------------

The CLX GContext stuff was engineered to make NIL values mean "unknown
value".  Create-GContext follows this convention for its keyword
arguments, but WITH-GCONTEXT doesn't.  My fix is to modify the gcontext
setf functions to do nothing when a null value is passed in.

Note that (setf (gcontext-clip-mask gc) nil) used to set a clip-mask
with nothing in it (clip everything).  Now in order to get this behavior
you need to do (setf (gcontext-clip-mask gc) #()).  This is consistent
with create-gcontext.

In the GCONTEXT file:
(defmacro def-gc-accessor (name type)
  (let* ((gcontext-name (xintern 'gcontext- name))
	 (internal-accessor (xintern 'gcontext-internal- name))
	 (internal-setfer (xintern 'set- gcontext-name)))
    `(within-definition (,name def-gc-accessor)
       (compiler-let ((*buffer* '(gcontext-display gcontext)))

	 (defun ,gcontext-name (gcontext)
	   (declare (type gcontext gcontext))
	   (declare-values (or null ,type))
	   (let ((value (,internal-accessor (gcontext-local-state gcontext))))
	     (declare (type (or null card32) value))
	     (when value ;; Don't do anything when value isn't known
	       (decode-type ,type value))))
       
	 (defun ,internal-setfer (gcontext value)
	   (declare (type gcontext gcontext)
		    (type (or null ,type) value))
	   (WHEN value ;; Ignore NULL values
	     (modify-gcontext (gcontext local-state)
	       (setf (,internal-accessor local-state) (encode-type ,type value))))
	   value)
       
	 (defsetf ,gcontext-name ,internal-setfer)))))

(defun set-gcontext-clip-mask (gcontext ordering clip-mask)
  (declare (type gcontext gcontext)
	   (type (or null (member :unsorted :y-sorted :yx-sorted :yx-banded)) ordering)
	   (type (or null (member :none) pixmap rect-seq) clip-mask))
  (WHEN clip-mask
    (modify-gcontext (gcontext local-state)
      ;; need single setf for atomicity
      (setf (gcontext-internal-clip local-state)
	    (cons (encode-type (or null (member :unsorted :y-sorted :yx-sorted :yx-banded))
			       ordering)
		  (if (type? clip-mask 'sequence)
		      (list nil clip-mask)
		    (list (encode-type (or (member :none) pixmap) clip-mask)))))))
  clip-mask)

(defun set-gcontext-dashes (gcontext dashes)
  (declare (type gcontext gcontext)
	   (type (or null card8 sequence) dashes))
  (WHEN dashes
    (modify-gcontext (gcontext local-state)
      ;; need single setf for atomicity
      (setf (gcontext-internal-dash local-state)
	    (if (type? dashes 'sequence)
		(list nil (or dashes (vector)))
	      (list (encode-type card8 dashes))))))
  dashes)

(defun set-gcontext-font (gcontext font)
  (declare (type gcontext gcontext)
	   (type (OR null fontable) font))
  (WHEN font
    (let ((font-object (if (font-p font) font (open-font (gcontext-display gcontext) font))))
      ;; XXX need to check font has id (and name?)
      (modify-gcontext (gcontext local-state)
	(setf (gcontext-internal-font-obj local-state) font-object))))
  font)


