Return-Path: RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Wed, 5 Oct 88 09:41:05 EDT
Received: from KILLINGTON.LCS.MIT.EDU by ZERMATT.LCS.MIT.EDU via CHAOS with CHAOS-MAIL id 199202; Wed 5-Oct-88 09:41:10 EDT
Return-Path: <@ZERMATT.LCS.MIT.EDU:franz!sparky!jdi@UCBARPA.BERKELEY.EDU>
Received: from EXPO.LCS.MIT.EDU by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 197622; 29 Sep 88 16:23:04 EDT
Received: by expo.lcs.mit.edu; Thu, 29 Sep 88 16:21:34 EDT
Received: from UCBARPA.BERKELEY.EDU by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 197621; 29 Sep 88 16:22:16 EDT
Received: by ucbarpa.Berkeley.EDU (5.59/1.29)
	id AA21154; Thu, 29 Sep 88 13:20:26 PDT
Received: from sparky by franz (3.2/3.14)
	id AA11735; Thu, 29 Sep 88 12:30:46 PDT
Received: by sparky (4.0/3.14)
	id AA02890; Thu, 29 Sep 88 12:28:49 PDT
Return-Path: <sparky!jdi>
Message-Id: <8809291928.AA02890@sparky>
To: franz!zermatt.lcs.mit.edu!bug-clx
Cc: franz!home.csc.ti.com!oren
Subject: Bug in CLX, setting gcontext-clip-mask
Date: Thu, 29 Sep 88 12:28:48 PDT
From: John Irwin <franz!sparky!jdi@ucbarpa.berkeley.edu>
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Wed, 5 Oct 88 09:41 EDT
Resent-Message-Id: <19881005134127.4.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   1052
### area:         CLX
### severity:     medium
### comments:     


This one is best shown by:

(setq mask '(0 0 100 100))

(setq (xlib:gcontext-clip-mask gc) mask)

...do some drawing...

(incf (cadr mask) 50)

(setq (xlib:gcontext-clip-mask gc) mask)


Now, if you draw, the clip mask is NOT (0, 50, 100, 100) but remains at what
is was set at before, namely (0, 0, 100, 100).

This is almost surely a result of using an 'eq' test rather than an 'equal'
test, and/or of not making a copy of the clip mask when storing it in the
server-state.

from gcontext.cl, force-gcontext-changes:

	...
	(unless (eq (third local-clip)
		    (third (gcontext-internal-clip server-state)))
	  (setf (gcontext-internal-clip server-state) local-clip)
	  (with-buffer-request (display *x-setcliprectangles*)
	    (data (first local-clip))
	    (gcontext gcontext)
	    ;; XXX treat nil correctly
	    (card16 (or (gcontext-internal-clip-x local-state) 0)
		    (or (gcontext-internal-clip-y local-state) 0))
	    ;; XXX this has both int16 and card16 values
	    ((sequence :format int16) (third local-clip))))
	...

The same problem probably exists with gcontext-dashing.

	-- John Irwin, Franz Inc.

