Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by EXPO.LCS.MIT.EDU; Sat, 14 May 88 18:17:49 EDT
Date: Sat, 14 May 88 18:16 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: xlib:draw-line is clever the wrong way
To: xbugs@expo.lcs.mit.edu
Cc: bug-clx@expo.lcs.mit.edu
Message-Id: <19880514221641.5.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   495
### area:         CLX
### severity:     low
### comments:     

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	any

DISPLAY:
	any

AREA:
	CLX

SYNOPSIS:
	xlib:draw-line does the opposite of what it should for cleverness

DESCRIPTION:
	Lines produced by separate calls to draw-line should *not* join.
	The existing draw-line code uses the PolyLine request, and only
	batches when it *can* join.  This is wrong.  Draw-line should be
	using PolySegment, so that joins never occur.  (This then requires
	handling relative-p on the client side.)

REPEAT-BY:
	Eyeball the code.

FILES:
	lib/CLX/graphics.l

FIX:

*** /tmp/,RCSt1a08233	Sat May 14 18:10:46 1988
--- lib/CLX/graphics.l	Sat May 14 18:11:13 1988
***************
*** 104,110 ****
  	   (type int16 x1 y1 x2 y2)
  	   (type boolean relative-p))
    (let ((display (drawable-display drawable)))
!     (setq relative-p (if relative-p 1 0))
      (with-display (display)
        (force-gcontext-changes gcontext)
        (writing-buffer-send (display)
--- 104,112 ----
  	   (type int16 x1 y1 x2 y2)
  	   (type boolean relative-p))
    (let ((display (drawable-display drawable)))
!     (when relative-p
!       (incf x2 x1)
!       (incf y2 y1))
      (with-display (display)
        (force-gcontext-changes gcontext)
        (writing-buffer-send (display)
***************
*** 114,147 ****
  	  (if (and (not *inhibit-appending*)
  		   last-request-byte
  		   ;; Same request?
! 		   (= (aref-card8 buffer-bbuf last-request-byte) *x-polyline*)
! 		   ;; last point same as this one?
! 		   (compare-request (-4)
! 		     (int16 x1 y1))
  		   (progn ;; Set buffer pointers to last request
! 		     (set-buffer-offset last-request-byte)
  		     ;; same drawable and gcontext?
  		     (or (compare-request (4)
- 			   (data relative-p)
  			   (drawable drawable)
  			   (gcontext gcontext))
  			 (progn ;; If failed, reset buffer pointers
! 			   (set-buffer-offset current-boffset)
  			   nil))))
  	      ;; Append request
  	      (progn
  		;; Set new request length
! 		(card16-put 2 (index+ 1 (index-ash (index- current-boffset last-request-byte)
  						   -2)))
  		(set-buffer-offset current-boffset :sizes 16)
  		(put-items (0)			; Insert new point
! 		  (int16 x2 y2))
! 		(setf (display-boffset display) (index+ buffer-boffset 4)))
  	    ;; New Request
  	    (progn
  	      (put-items (4)
! 		(code *x-polyline*)
! 		(data relative-p)
  		(length 5)
  		(drawable drawable)
  		(gcontext gcontext)
--- 116,144 ----
  	  (if (and (not *inhibit-appending*)
  		   last-request-byte
  		   ;; Same request?
! 		   (= (aref-card8 buffer-bbuf last-request-byte) *x-polysegment*)
  		   (progn ;; Set buffer pointers to last request
! 		     (set-buffer-offset last-request-byte :sizes (16 32))
  		     ;; same drawable and gcontext?
  		     (or (compare-request (4)
  			   (drawable drawable)
  			   (gcontext gcontext))
  			 (progn ;; If failed, reset buffer pointers
! 			   (set-buffer-offset current-boffset :sizes (16 32))
  			   nil))))
  	      ;; Append request
  	      (progn
  		;; Set new request length
! 		(card16-put 2 (index+ 2 (index-ash (index- current-boffset last-request-byte)
  						   -2)))
  		(set-buffer-offset current-boffset :sizes 16)
  		(put-items (0)			; Insert new point
! 		  (int16 x1 y1 x2 y2))
! 		(setf (display-boffset display) (index+ buffer-boffset 8)))
  	    ;; New Request
  	    (progn
  	      (put-items (4)
! 		(code *x-polysegment*)
  		(length 5)
  		(drawable drawable)
  		(gcontext gcontext)

