Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by expo.lcs.mit.edu; Mon, 4 Apr 88 13:25:16 EDT
Return-Path: <@TI.COM:Oren@Home.csc.ti.com>
Received: from ti.com (TI.COM) by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 137644; 4 Apr 88 12:16:55 EDT
Received: by ti.com id AA04152; Mon, 4 Apr 88 10:58:38 CDT
Received: from SI by tilde id AA17992; Mon, 4 Apr 88 10:46:14 CDT
Message-Id: <2785164308-2675529@SI>
Sender: OREN@si.csc.ti.com
Date: Mon, 4 Apr 88  11:45:08 CDT
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@zermatt.lcs.mit.edu
Cc: Sonia Lyris <edsel!sol@labrea.stanford.edu>, Rick.Busdiecker@CS.CMU.EDU
Subject: Re: X11R2 CLX Lucid bug fixes
In-Reply-To: Msg of Fri, 1 Apr 88 13:44:44 PST from Sonia Lyris <edsel!sol@labrea.stanford.edu>
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Mon, 4 Apr 88 13:24 EDT
Resent-Message-Id: <880404132439.9.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   259
### area:         CLX
### severity:     
### assigned to:  
### status:       closed
### comments:     

   Date: Fri, 1 Apr 88 13:44:44 PST
   From: Sonia Lyris <edsel!sol@labrea.stanford.edu>
   Subject: X11R2 CLX Lucid bug fixes
   
   I have found and fixed two bugs for X11R2 CLX, for both Sun CL 2.1 and
   Lucid CL/Sun 3.0.  Please let me know if you have any problems.
   
Thanks for the fixes.  I've taken your buffer-read-default and made it a
little more general.  This version will handle fractional timeouts,
which are common (a second is a LONG time for a computer).  I had
forgotten that SLEEP was common-lisp.  This version should work for
everyone. (It seems to work as well as the sys:process-wait-with-timeout
version on my Explorer II for things like double-click detection)

;;; WARNING:
;;;	CLX performance will suffer if your lisp uses read-byte for
;;;	receiving all data from the X Window System server.
;;;	You are encouraged to write a specialized version of
;;;	CL-read-bytes that does block transfers.

#-(or symbolics-3600 explorer excl)
(defmacro CL-read-bytes (stream vector start end)
  `(do* ((i ,start (index+ i 1))
	 (c nil))
	((index>= i ,end) nil)
     (declare (type array-index i)
	      (type (or null card8) c))
     (setq c (read-byte ,stream nil nil))
     (if c
	 (setf (aref ,vector i) c)
	 (return t))))

;; Poll for input every *buffer-read-polling-time* SECONDS.
(defparameter *buffer-read-polling-time* 0.5)

#-(or symbolics-3600 explorer excl)
(defun buffer-read-default (display vector start end timeout)
  (declare (type display display)
	   (type buffer-bytes vector)
	   (type array-index start end)
	   (type (or null (rational 0 *) (float 0.0 *)) timeout))
  (declare-buffun)
  (let ((stream (display-input-stream display)))
    (declare (type stream stream))
    (cond ((or (null timeout)			; timeout = NIL
	       (listen stream))			; OR input waiting
	   (cl-read-bytes stream vector start end))
	  
	  ((zerop timeout)			; timeout = 0 
	   :timeout)				; no input (we listened above)
	  
	  (t					; timeout > 0, so poll until time is up.
	   (multiple-value-bind (npoll fraction)
	       (truncate timeout *buffer-read-polling-time*)
	     (if (or (listen stream)		; listen first
		     (dotimes (i npoll)		; Sleep for a time, then listen again
		       (sleep *buffer-read-polling-time*)
		       (when (listen stream) (return t)))
		     (when (plusp fraction)
		       (sleep fraction)		; Sleep a fraction of a second
		       (listen stream)))	; and listen one last time
		 (cl-read-bytes stream vector start end)
	       :timeout))))))


