Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by EXPO.LCS.MIT.EDU; Wed, 16 Mar 88 08:20:25 EST
Return-Path: <@SPICE.CS.CMU.EDU:James.Healy@spice.cs.cmu.edu>
Received: from SPICE.CS.CMU.EDU (SPICE.CS.CMU.EDU) by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 133009; 16 Mar 88 00:44:39 EST
Received: from SPICE.CS.CMU.EDU by SPICE.CS.CMU.EDU; 16 Mar 88 00:44:28 EST
To: bug-clx@zermatt.lcs.mit.edu
Subject: Some minor things.
Date: Wed, 16 Mar 88 00:44:20 EST
Message-Id: <2282.574494260@SPICE.CS.CMU.EDU>
From: James.Healy@spice.cs.cmu.edu
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Wed, 16 Mar 88 08:19 EST
Resent-Message-Id: <880316081948.8.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   126
### area:         CLX
### severity:     
### assigned to:  rws
### status:       closed


In depdefs.lisp, the "tbuf16" slot of the buffer defstruct is initialized
with a make-sequence call:

  (tbuf16 (make-sequence 'buffer-text16 *buffer-text16-size*))

Well, in CMU Common Lisp, the sequence is initialized to nil instead of a
number.  (Initialization of a sequence is supposed to be dependent on the
implementation.)  The result is "nil: should be of type number" or similar
error when you first try to connect to the server.  Explicitly
initializing the sequence is more portable:

  (tbuf16 (make-sequence 'buffer-text16 *buffer-text16-size* :initial-element 0))


Also, I'm getting the following compiler warning from the file translate.lisp:

Warning in UNDEFINE-KEYSYM:
  The form (ENTRY) in a let* variable list is an extension
  to Common Lisp and is not portable.

The fix is simple- just remove the parens from "entry" in the let* binding
list:

(defun undefine-keysym (object keysym &key display modifiers &allow-other-keys)
  ;; Undefine the keysym-translation translating KEYSYM to OBJECT with MODIFIERS.
  ;; If DISPLAY is non-nil, undefine the translation for DISPLAY if it exists.
  (declare (type (or string-char t) object)
	   (type keysym keysym)
	   (type (or null mask16 list) ;; (list (or keysym state-mask-key))
	         modifiers)
	   (type (or null display) display))
  (flet ((match (key entry)
	   (let ((object (car key))
		 (modifiers (cdr key)))
	     (or (eql object (keysym-mapping-object entry))
		 (equal modifiers (keysym-mapping-modifiers entry))))))
    (let* (entry

In the interest of portability, could someone with access to the main
sources take 30 seconds and make these changes?

--Jim.


