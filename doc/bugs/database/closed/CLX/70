Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Fri, 30 Sep 88 10:42:57 EDT
Return-Path: <Oren@home.csc.ti.com>
Received: from EXPO.LCS.MIT.EDU by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 195315; 19 Sep 88 16:05:55 EDT
Received: by expo.lcs.mit.edu; Mon, 19 Sep 88 16:03:55 EDT
Received: by ti.com id AA16446; Mon, 19 Sep 88 15:03:31 CDT
Received: from SI by tilde id AA08717; Mon, 19 Sep 88 14:52:54 CDT
Message-Id: <2799690764-1437699@SI>
Sender: OREN@si.csc.ti.com
Date: Mon, 19 Sep 88  14:52:44 CDT
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@expo.lcs.mit.edu
Cc: John Irwin <franz!sparky!jdi@ucbarpa.berkeley.edu>
Subject: Re: Race condition in CLX under Allegro CL
In-Reply-To: Msg of Wed, 14 Sep 88 18:12:16 PDT from John Irwin <franz!sparky!jdi@ucbarpa.Berkeley.EDU>
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Fri, 30 Sep 88 10:46 EDT
Resent-Message-Id: <19880930144643.2.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   1029
### area:         CLX
### severity:     medium high
### comments:     

   Date: Wed, 14 Sep 88 18:12:16 PDT
   From: John Irwin <franz!sparky!jdi@ucbarpa.Berkeley.EDU>
   Subject: Race condition in CLX under Allegro CL
   
   The beginning of wait-for-reply looks like:
   
   (defun wait-for-reply (display expected-size)
     (buffer-force-output display)
     (do ((sequence-error nil)
          (req-sequence (ldb (byte 16 0) (buffer-request-number display))))
         (nil) ;; forever
       (setf (display-waiting-reply-p display) t) ;; indicate awaiting reply
       (with-input-lock (display)
          ...
   
   Anyway, an implicit assumption is made here that the process doing the
   wait-for-reply retains control of the processor between the (force-output)
   and the (setf (display-waiting-reply-p display) t)...
   
   I "fixed" this by inserting a duplicate "(setf (d-w-r-p d) t)" line
   just before the call to (buffer-force-output).  This works but my spare
   brain processors are in the shop so I can't easily tell if this solution might
   cause deadlock.
   
   Comments?

You're right, the (setf (display-waiting-reply-p display) t) needs to be
before the buffer-force-output.  However, I think it should be MOVED,
not duplicated.  If you duplicate it, wait-for-event might set it to
:in-buffer during the buffer-force-output and the reply could be lost.

Please change wait-for-reply (in the INPUT file) to be:

(defun wait-for-reply (display expected-size)
  ;; Wait for a reply to a request.
  ;; Expected-size is the length in BYTES,
  ;;   or NIL to only read the first 32 bytes,
  ;;   or T to read in the whole thing.
  ;; Returns with REPLY in the reply-buffer in DISPLAY
  ;; Handle error and event packets that are encountered
  ;; Internal function, MUST BE CALLED FROM WITHIN WITH-BUFFER
  (declare (type display display)
	   (type (or integer (member nil t)) expected-size))
  (declare-values length-in-bytes)
  (setf (display-waiting-reply-p display) t) ;; indicate awaiting reply
  (buffer-force-output display)
  (do ((sequence-error nil)
       (req-sequence (ldb (byte 16 0) (buffer-request-number display))))
      (nil) ;; forever
    (with-input-lock (display)
      (reading-buffer-reply (display)
 ...

