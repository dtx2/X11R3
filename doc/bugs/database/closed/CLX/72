Return-Path: RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Wed, 5 Oct 88 08:41:14 EDT
Received: from KILLINGTON.LCS.MIT.EDU by ZERMATT.LCS.MIT.EDU via CHAOS with CHAOS-MAIL id 199158; Wed 5-Oct-88 08:41:15 EDT
Return-Path: <Oren@home.csc.ti.com>
Received: from EXPO.LCS.MIT.EDU by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 198940; 4 Oct 88 13:35:01 EDT
Received: by expo.lcs.mit.edu; Tue, 4 Oct 88 13:33:55 EDT
Received: by ti.com id AA02120; Tue, 4 Oct 88 12:34:13 CDT
Received: from SI by tilde id AA00834; Tue, 4 Oct 88 12:23:48 CDT
Message-Id: <2800977812-3379356@SI>
Sender: OREN@si.csc.ti.com
Date: Tue, 4 Oct 88  12:23:32 CDT
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@expo.lcs.mit.edu
Subject: CLX get-image fix
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Wed, 5 Oct 88 08:41 EDT
Resent-Message-Id: <19881005124132.3.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   1051
### area:         CLX
### severity:     medium
### comments:     

I did a (get-image root :result-type 'image-xy :plane-mask 1)
on a color server, and the response came back with a depth of 8.
This caused get-image to call z-format-pixarray with a starting index
past the end of the result vector.  This patch adds a check in get-image
for going past the end of the data, and sets the image depth to the
actual number of planes in the image (not that returned by the GetImage
server request).

This patch is relative to the pre-release 3 version:

*** clx/image.l	Mon Sep 12 11:06:10 1988
--- image.l	Tue Oct  4 12:19:01 1988
***************
*** 304,313 ****
  		 (do ((plane 0 (1+ plane))
  		      (bytes-per-plane (* bytes-per-line height))
  		      (start 0 (+ start bytes-per-plane))
  		      (result nil))
! 		     ((>= plane depth)
  		      (create-image :width width :height height
! 				    :depth depth :data (nreverse result)
  				    ))
  		   (push (z-format-pixarray data start bytes-per-line 1 1
  					    0 0 width height)
--- 304,315 ----
  		 (do ((plane 0 (1+ plane))
  		      (bytes-per-plane (* bytes-per-line height))
  		      (start 0 (+ start bytes-per-plane))
+ 		      (end (length data))
  		      (result nil))
! 		     ((or (>= plane depth)
! 			  (>= start end))
  		      (create-image :width width :height height
! 				    :depth plane :data (nreverse result)
  				    ))
  		   (push (z-format-pixarray data start bytes-per-line 1 1
  					    0 0 width height)

