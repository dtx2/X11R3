Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Fri, 30 Sep 88 10:44:02 EDT
Return-Path: <Bill.Chiles@chiles.slisp.cs.cmu.edu>
Received: from EXPO.LCS.MIT.EDU by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 193722; 14 Sep 88 16:55:04 EDT
Received: by expo.lcs.mit.edu; Wed, 14 Sep 88 16:53:12 EDT
Received: from CHILES.SLISP.CS.CMU.EDU by CHILES.SLISP.CS.CMU.EDU; 14 Sep 88 16:51:59 EDT
To: bug-clx@expo.lcs.mit.edu
Subject: XLIB:WITH-GCONTEXT
Date: Wed, 14 Sep 88 16:51:41 EDT
Message-Id: <2034.590273501@CHILES.SLISP.CS.CMU.EDU>
From: Bill.Chiles@wb1.cs.cmu.edu
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Fri, 30 Sep 88 10:47 EDT
Resent-Message-Id: <19880930144748.3.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   1030
### area:         CLX
### severity:     medium
### comments:     duplicate of a bug just sent recently


XLIB:WITH-GCONTEXT should behave like LET, not LET*, since this is the
natural expectation of a thing like this in Lisp.  I believe this is the
intention of the CLX designers, but the code is obviously implemented
incorrectly.  Interestingly, it seems to work by accident on my RT with a
Moniterm monitor, but on the Sun (BW2 card ???) it does what you would
expect from looking at the XLIB:WITH-GCONTEXT macro definition.

For example, setting up temporary "reverse video":
   (xlib:with-gcontext (gcontext :foreground (gcontext-background gcontext)
   				 :background (gcontext-foreground gcontext))
     ...)
This is taken from Kimbrough's "Windows to the Future".  I think anyone
would expect this to swap the foreground and background.  To get this code
to work on the Sun (around here anyway), you must do this:
   (let ((foreground (gcontext-background gcontext))
         (background (gcontext-foreground gcontext)))
     (xlib:with-gcontext (gcontext :foreground foreground
				   :background background)
       ...))

The old code was using temporary variables only for each slot set.  The
implementor didn't seem to realize you must stash all the given values in
temporary variables, and then set the slots from these temps.

Here is a macro definition that seems to be correct from testing it on the
above example.  Notice the variables temp-vars and temp-var, and I also
wrapped a LET around splicing in the setfs:
(defmacro with-gcontext ((gcontext &rest options &key clip-ordering
				   &allow-other-keys)
			 &body body)
  ;; "Binds" the gcontext components specified by options within the
  ;; dynamic scope of the body (i.e., indefinite scope and dynamic
  ;; extent), on a per-process basis in a multi-process environment.
  ;; The body is not surrounded by a with-display.  If cache-p is nil or
  ;; the some component states are unknown, this will implement
  ;; save/restore by creating a temporary gcontext and doing
  ;; copy-gcontext-components to and from it.

  (declare-arglist (gcontext &rest options &key
			     function plane-mask foreground background
			     line-width line-style cap-style join-style
			     fill-style fill-rule arc-mode tile stipple ts-x
			     ts-y font subwindow-mode exposures clip-x clip-y
			     clip-mask clip-ordering dash-offset dashes
			     &allow-other-keys)
		   &body body)
  (remf options :clip-ordering)

  (let ((gc (gensym))
	(saved-state (gensym))
	(temp-gc (gensym))
	(temp-mask (gensym))
	(temp-vars nil)
	(setfs nil)
	(indexes nil) ; List of gcontext field indices
	(extension-indexes nil) ; List of gcontext extension field indices
	(ts-index (getf *gcontext-indexes* :timestamp)))

    (do* ((option options (cddr option))
	  (name (car option) (car option))
	  (value (cadr option) (cadr option)))
	 ((endp option) (setq setfs (nreverse setfs)))
      (let ((index (getf *gcontext-indexes* name)))
	(if index
	    (push index indexes)
	  (let ((extension (find name *gcontext-extensions*
				 :key #'gcontext-extension-name)))
	    (if extension
		(progn
		  (push (xintern "Internal-" 'gcontext- name "-State-Index")
			extension-indexes))
	      (x-type-error name 'gcontext-key)))))
      (let ((accessor `(,(xintern 'gcontext- name) ,gc
			,@(when (eq name :clip-mask) `(,clip-ordering))))
	    (temp-var (gensym)))
	(when value
	  (push `(,temp-var ,value) temp-vars)
	  (push `(setf ,accessor ,temp-var) setfs))))
    (if setfs
	`(multiple-value-bind (,gc ,saved-state ,temp-mask ,temp-gc)
	     (copy-gcontext-local-state ,gcontext ',indexes ,@extension-indexes)
	   (declare (type gcontext ,gc)
		    (type gcontext-state ,saved-state)
		    (type xgcmask ,temp-mask)
		    (type (or null resource-id) ,temp-gc))
	   (with-gcontext-bindings (,gc ,saved-state
					,(append indexes extension-indexes)
				    ,ts-index ,temp-mask ,temp-gc)
	     (let ,temp-vars
	       ,@setfs)
	     ,@body))
      `(progn ,@body))))


Bill

