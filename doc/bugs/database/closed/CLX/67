Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Fri, 30 Sep 88 10:39:59 EDT
Return-Path: <roman@ATHENA.MIT.EDU>
Received: from EXPO.LCS.MIT.EDU by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 192413; 9 Sep 88 12:52:02 EDT
Received: by expo.lcs.mit.edu; Fri, 9 Sep 88 12:51:12 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA26633; Fri, 9 Sep 88 12:51:11 EDT
Received: by JAREK.MIT.EDU (5.45/4.7) id AA01928; Fri, 9 Sep 88 12:50:21 EDT
Message-Id: <8809091650.AA01928@JAREK.MIT.EDU>
To: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Cc: bug-clx@expo.lcs.mit.edu
Subject: unix socket support for kcl
Date: Fri, 09 Sep 88 12:50:18 EDT
From: Roman J. Budzianowski <roman@athena.mit.edu>
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Fri, 30 Sep 88 10:43 EDT
Resent-Message-Id: <19880930144343.9.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   1026
### area:         CLX
### severity:     enhancement
### comments:     

In case you decide to support unix sockets for CLX, here are the bits
for KCL. The approach is slightly different from the one already posted on
this list, in that the function 'connect_to_server' in the file socket.c
doesn't change its name and the new function 'unix_connect_to_server'
takes a unix pathname as an argument (string) instead of a display number.
This requires a new variable in CLX *unix-domain-x-socket*, but allows
lisp to use the same interface to communicate with other unix domain sockets.

I am not sending diffs but a new set of files, plus changes to dependent.lsp.
If you decide on a different scheme, let me know and I will modify the kcl
interface.

BTW, as far as I know CLX/KCL works on the VAX, IBM RT, and SUN. I agree
that KCL should be fixed. Note, however, that the patches posted lately
are for akcl (a variation on KCL).

Roman

;;; Modifications to dependent.lisp
;;; Add new variable
(defvar *unix-domain-x-socket* "/"tmp/.X11-unix/X")

;;; replace open-x-stream for kcl
#+kcl
(defun open-x-stream (host display protocol)
	protocol ;; unused
	(let ((stream (if (string-equal host "unix")
		(tcp:open-unix-stream (format nil "~a~d
*unix-domain-x-socket* display))
		(tcp:open-tcp-stream host (+ *x-tcp-port* display)))))
	(if (streamp stream)
		stream
		(error "Cannot connect to server: ~A:~D host display))))
;;;end changes to dependent.lisp

*** file socket.c **************************************
/*
 * THIS IS AN OS DEPENDENT FILE! It should work on 4.2BSD derived
 * systems.  VMS and System V should plan to have their own version.
 *
 * This code was cribbed from X11  connection code in XLIB.
 * Compile using   
 *                    % cc -c socket.c
 */

#include <stdio.h>
#include <sys/types.h>
#include <errno.h>

#include <netinet/in.h>
#include <sys/ioctl.h>
#include <netdb.h> 
#include <sys/param.h>

#include <fcntl.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <strings.h>

void bcopy();

extern int errno;
/* 
 * Attempts to connect to server, given host and display. Returns file 
 * descriptor (network socket) or 0 if connection fails.
 */

int connect_to_server (host, display)
     char *host;
     int display;
{
  struct sockaddr_in inaddr;	/* INET socket address. */
  struct sockaddr *addr;		/* address to connect to */
  struct hostent *host_ptr;
  int addrlen;			/* length of address */
  extern char *getenv();
  extern struct hostent *gethostbyname();
  int fd;				/* Network socket */
  {

      /* Get the statistics on the specified host. */
      if ((inaddr.sin_addr.s_addr = inet_addr(host)) == -1) 
	{
	  if ((host_ptr = gethostbyname(host)) == NULL) 
	    {
	      /* No such host! */
	      errno = EINVAL;
	      return(-1);
	    }
	  /* Check the address type for an internet host. */
	  if (host_ptr->h_addrtype != AF_INET) 
	    {
	      /* Not an Internet host! */
	      errno = EPROTOTYPE;
	      return(-1);
	    }
	  /* Set up the socket data. */
	  inaddr.sin_family = host_ptr->h_addrtype;
	  bcopy((char *)host_ptr->h_addr, 
		(char *)&inaddr.sin_addr, 
		sizeof(inaddr.sin_addr));
	} 
      else 
	{
	  inaddr.sin_family = AF_INET;
	}
      addr = (struct sockaddr *) &inaddr;
      addrlen = sizeof (struct sockaddr_in);
      inaddr.sin_port = display;
      inaddr.sin_port = htons(inaddr.sin_port);
      /*
       * Open the network connection.
       */
      if ((fd = socket((int) addr->sa_family, SOCK_STREAM, 0)) < 0){
	return(-1);	    /* errno set by system call. */}
      /* make sure to turn off TCP coalescence */
#ifdef TCP_NODELAY
      {
	int mi;
	setsockopt (fd, IPPROTO_TCP, TCP_NODELAY, &mi, sizeof (int));
      }
#endif
    }
    if (connect(fd, addr, addrlen) == -1) 
      {
	(void) close (fd);
	return(-1); 	    /* errno set by system call. */
      }

  /*
   * Return the id if the connection succeeded.
   */
  return(fd);
}

int
unix_connect_to_server(path)
char *path;
{
	struct sockaddr_un server;
	struct sockaddr *addr;
	int addrlen;
	int fd;

	server.sun_family = AF_UNIX;
	(void) strcpy(server.sun_path, path);
	addr = (struct sockaddr *) &server;
	addrlen = strlen(server.sun_path) + 2;

	if ((fd = socket(AF_UNIX, SOCK_STREAM, 0)) < 0)
		return(-1);

        if (connect(fd, addr, addrlen) < 0) {
		(void) close (fd);
		return(-1);
	}

	return(fd);
}
****** file kcltcp.c ********************************************

/* 
 * stream interface to tcp for kcl for 4.3BSD
 *
 * Copyright (C) 1987 Massachussetts Institute of Technology 
 *
 * Roman Budzianowski - Project Athena/MIT
 *
 */

/* compile command:
 * 
 * 	cc -c kcltcp.c -DVAX -DMAXPAGE=16384 -DVSSIZE=8152 -I${KCLHDIR}
 *
 *      where KCLHDIR is the h subdirectory in the kcl distribution
 *
 */

#include "include.h"

object
open_tcp_stream(host,port)
     object host;		/* host name */
     object port;		/* port number */
{
   object streamTcp;
   int fd;			/* file descriptor */
   int i;
   char hname[BUFSIZ];
   int portnumber;
   object streamIn, streamOut, make_stream();

   if (type_of(host) != t_string)
     FEerror("~S is wrong type for host (should be string).",1,host);

   if(type_of(port) != t_fixnum)
     FEerror("~S is wrong type for port (should be integer).",1,port);

   if (host->st.st_fillp > BUFSIZ - 1)
     too_long_file_name(host);
   for (i = 0;  i < host->st.st_fillp;  i++)
     hname[i] = host->st.st_self[i];
   hname[i] = '\0';

   portnumber = (int) fix(port);

   fd = connect_to_server(hname,portnumber); 

   if(fd == -1)
     return Cnil;

   streamIn = make_stream(host,fd,smm_input);
   streamOut = make_stream(host,fd,smm_output);

   streamTcp = make_two_way_stream(streamIn,streamOut);

   return(streamTcp);
}

object
open_unix_stream(path)
     object path;           /* path of the unix socket */
{
   object streamUnix;
   int fd;
   int i;
   char pname[BUFSIZ];
   object streamIn, streamOut, make_stream();
   
   if (type_of(path) != t_string)
     FEerror("~S is wrong type for path (should be string).",1,path);

   if (path->st.st_fillp > BUFSIZ - 1)
     too_long_file_name(path);
   for (i = 0;  i < path->st.st_fillp;  i++)
     pname[i] = path->st.st_self[i];
   pname[i] = '\0';

   fd = unix_connect_to_server(pname);

   if(fd == -1)
     return Cnil;

   streamIn = make_stream("unix",fd,smm_input);
   streamOut = make_stream("unix",fd,smm_output);

   streamUnix = make_two_way_stream(streamIn,streamOut);

   return(streamUnix);
}

object make_stream(host,fd,smm)
     object host;		/* not really used */     
     int fd;			/* file descriptor */
     enum smmode smm;		/* lisp mode */
{
   object stream;
   char *mode;			/* file open mode */
   FILE *fp;			/* file pointer */
   vs_mark;

   switch(smm){
    case smm_input:
      mode = "r";
      break;
    case smm_output:
      mode = "w";
      break;
    default:
      FEerror("make_stream : wrong mode");
   }
   
   fp = fdopen(fd,mode);

   stream = alloc_object(t_stream);
   stream->sm.sm_mode = (short)smm;
   stream->sm.sm_fp = fp;
   fp->_base = BASEFF; 
   stream->sm.sm_object0 = Sstring_char;
   stream->sm.sm_object1 = host;
   stream->sm.sm_int0 = stream->sm.sm_int1 = 0;
   vs_push(stream);
   setbuf(fp, alloc_contblock(BUFSIZ)); 
   vs_reset;
   return(stream);
}

****** file tcp.lsp ******

;; -*- Mode: LISP; Syntax: Common-lisp; Package: TCP; Base: 10; Lowercase: Yes -*-;;
;;
;; kcl lisp interface to the socket code
;; Roman Budzianowski
;; Project Athena MIT
;;
(in-package 'tcp)
(export '(open-tcp-stream
	  open-unix-stream))

(defentry open-tcp-stream (object object) (object open_tcp_stream))
(defentry open-unix-stream (object) (object open_unix_stream))
;;

****** file tcpinit.lsp *************************************

;; -*- Mode: LISP; Syntax: Common-lisp; Package: TCP; Base: 10; Lowercase: Yes -*-;;
;;
;; Interface to tcp for kcl
;;
;; Roman Budzianowski
;; Project Athena MIT
;;
;; First you have to compile the "c" files : kcltcp.c and socket.c
;; Then you have to compile the lisp file tcp.lisp 
;; Finally you load this file into kcl and you can call the
;; functions (tcp:open-tcp-stream port) and (tcp:open-unix-stream path)
;;
(in-package "TCP" :use '("LISP"))
;; It is assumed that the files reside in the tcp subdirectory
(si:faslink "tcp/tcp.o" "tcp/kcltcp.o tcp/socket.o -lc")
;;

