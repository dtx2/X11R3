Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by EXPO.LCS.MIT.EDU; Thu, 24 Mar 88 18:25:49 EST
Return-Path: <@TI.COM:Oren@Home.csc.ti.com>
Received: from ti.com (TI.COM) by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 135165; 24 Mar 88 18:15:49 EST
Received: by ti.com id AA01247; Thu, 24 Mar 88 17:14:07 CST
Received: from SI by tilde id AA01204; Thu, 24 Mar 88 17:07:36 CST
Message-Id: <2784236933-671167@SI>
Sender: OREN@si.csc.ti.com
Date: Thu, 24 Mar 88  17:08:53 CST
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@zermatt.lcs.mit.edu
Subject: CLX sys:%store-conditional
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Thu, 24 Mar 88 18:25 EST
Resent-Message-Id: <880324182547.2.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   211
### area:         CLX
### severity:     
### assigned to:  
### status:       closed
### comments:     

On the Explorer, sys:store-conditional is a function that does type
checking and special processing when the pointer is a cons, while
sys:%store-conditional is a microcoded primitive.  On the symbolics,
both the % and non % versions compile into the same thing.  My original
version of holding-lock used sys:%store-conditional, and someone changed
it...  How about:

;; In the DEPENDENT file:

;; Remove this sometime after Explorer release 5 comes out
#+explorer ;; Use the microcoded primitive when the first parameter is a locative
(compiler:optimize-pattern (si:store-conditional si:locative t t) (si:%store-conditional 1 2 3))

#+lispm
(defmacro holding-lock ((locator &optional whostate) &body body)
  ; This macro is for use in a multi-process environment.
  (let ((lock (gensym)) (have-lock (gensym)))
    `(let* ((,lock (zl:locf ,locator))
	    (,have-lock (eq (car ,lock) sys:current-process)))
       (unwind-protect 
	   (progn (unless ,have-lock
		    ;; Redundant, but saves time if not locked.
		    (or (sys:store-conditional (THE si:locative ,lock) nil sys:current-process)
			(sys:process-lock (THE si:locative ,lock) ,@(when whostate `(nil ,whostate)))))
		  ,@body)
	 (unless ,have-lock
	   (sys:store-conditional (THE si:locative ,lock) sys:current-process nil))))))


