Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by EXPO.LCS.MIT.EDU; Thu, 10 Mar 88 11:01:18 EST
Return-Path: <@TI.COM:Oren@Home.csc.ti.com>
Received: from TI.COM by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 131310; 10 Mar 88 10:48:23 EST
Received: by [10.7.0.46] id AA13178; Thu, 10 Mar 88 09:30:03 CST
Received: from SI by tilde id AA24777; Thu, 10 Mar 88 09:22:29 CST
Message-Id: <2782999420-10110847@SI>
Sender: OREN@si.csc.ti.com
Date: Thu, 10 Mar 88  09:23:40 CST
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@zermatt.lcs.mit.edu
Cc: Ekberg@home.csc.ti.com
Subject: CLX keymap-notify and query-keymap bug fixes
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Thu, 10 Mar 88 11:01 EST
Resent-Message-Id: <880310110117.1.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   84
### area:         CLX
### severity:     
### assigned to:  bob
### status:       closed

The bit-vector256-get macro was implemented wrong, so the :keymap-notify
event only worked sometimes (and not often).  Of course it DID work
while I was testing...  

While testing the fix I discovered that read-bitvector256 (also used by
query-keymap) was reversing the bits for non-lispm's
[when #-(and clx-overlapping-arrays clx-little-endian)].
I fixed that too, and eliminated the overlapping-array hack.

I also extended QUERY-KEYMAP to take an optional bitvector so it needn't
conse one up every time.  The original code had hooks for this, but
never used them.

;; From the MACROS file:
(define-accessor bit-vector256 (256)
  ;; used for key-maps
  ;; REAL-INDEX parameter provided so the default index can be over-ridden.
  ;; This is needed for the :keymap-notify event where the keymap overlaps
  ;; the window id.
  ((index &optional (real-index index) data)
   `(read-bitvector256 buffer-bbuf ,real-index ,data))
  ((index map &optional (real-index index) (buffer *buffer*))
   `(write-bitvector256 ,buffer ,real-index ,map)))

;; From the BUFFER file:
(defun read-bitvector256 (buffer-bbuf boffset data)
  (declare (type buffer-bytes buffer-bbuf)
	   (type array-index boffset)
	   (type (OR null (simple-bit-vector 256)) data))
  (LET ((result (OR data (make-array 256 :element-type 'bit :initial-element 0))))
    (declare-array (simple-bit-vector 256) result)
    (dotimes (i 32)
      (declare (type array-index i))
      (do ((byte (aref-card8 buffer-bbuf (index+ boffset i)) (index-ash byte -1))
	   (j (index-ash i 3) (index+ j 1)))
	  ((zerop byte))
	(declare (type array-index j)
		 (type card8 byte))
	(setf (aref result j) (the bit (logand byte 1)))))
    result))

;; From the REQUESTS file:
(defun query-keymap (display &optional bit-vector)
  (declare (type display display)
	   (type (OR null (bit-vector 256)) bit-vector))
  (declare-values (bit-vector 256))
  (let (result)
    (with-display (display)
      (with-buffer-request (display *x-querykeymap* :no-after))
      (with-buffer-reply (display 40 :sizes 8)
	(setq result (bit-vector256-get 8 8 bit-vector))))
    (display-invoke-after-function display)
    result))

;; Note: The input file must be re-compiled.


