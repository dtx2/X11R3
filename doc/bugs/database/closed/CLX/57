Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Fri, 12 Aug 88 14:59:28 EDT
Date: Fri, 12 Aug 88 14:59 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: CLX fill-polygon
To: xbugs@expo.lcs.mit.edu
Message-Id: <19880812185951.5.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   862
### area:         CLX
### severity:     low
### comments:     

AREA:
	CLX

SYNOPSIS:
	fill-polygon shouldn't be exported

DESCRIPTION:
	[From LaMott Oren]
	CLX exports fill-polygon, even though it doesn't appear in the doc.lisp
	file (except in the cross-references).  I've got a feeling fill-polygon
	must have been in a very early version of the CLX spec, because its got
	keyword parameters that wouldn't need to be there otherwise.

	It seems to me that the export for fill-polygon (in the graphics file)
	should be removed, &key removed from its lambda-list, and the keywords
	removed from its only call in draw-lines.  The cross-references in the
	DOC file need to be changed to show that draw-lines (not fill-polygon)
	uses the FillPoly request.

FIX:

*** /tmp/,RCSt1a00261	Fri Aug 12 14:58:26 1988
--- lib/CLX/graphics.l	Thu Aug 11 20:34:28 1988
***************
*** 25,31 ****
  	  draw-points
  	  draw-line
  	  draw-lines
- 	  fill-polygon
  	  draw-segments
  	  draw-rectangle
  	  draw-rectangles
--- 25,30 ----
***************
*** 155,161 ****
  	   (type boolean relative-p fill-p)
  	   (type (member :complex :non-convex :convex) shape))
    (if fill-p
!       (fill-polygon drawable gcontext points :relative-p relative-p :shape shape)
      (with-buffer-request ((drawable-display drawable)  *x-polyline* :gc-force gcontext)
        ((data boolean) relative-p)
        (drawable drawable)
--- 154,160 ----
  	   (type boolean relative-p fill-p)
  	   (type (member :complex :non-convex :convex) shape))
    (if fill-p
!       (fill-polygon drawable gcontext points relative-p shape)
      (with-buffer-request ((drawable-display drawable)  *x-polyline* :gc-force gcontext)
        ((data boolean) relative-p)
        (drawable drawable)
***************
*** 163,169 ****
        ((sequence :format int16) points))))
  
  ;; Internal function called from DRAW-LINES
! (defun fill-polygon (drawable gcontext points &key relative-p (shape :complex))
    ;; This is clever about appending to previous requests.  Should it be?
    (declare (type drawable drawable)
  	   (type gcontext gcontext)
--- 162,168 ----
        ((sequence :format int16) points))))
  
  ;; Internal function called from DRAW-LINES
! (defun fill-polygon (drawable gcontext points relative-p shape)
    ;; This is clever about appending to previous requests.  Should it be?
    (declare (type drawable drawable)
  	   (type gcontext gcontext)

