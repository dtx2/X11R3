Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by EXPO.LCS.MIT.EDU; Fri, 18 Mar 88 07:46:19 EST
Return-Path: <@TI.COM:Oren@Home.csc.ti.com>
Received: from ti.com (TI.COM) by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 133609; 17 Mar 88 18:47:59 EST
Received: by ti.com id AA18998; Thu, 17 Mar 88 17:46:32 CST
Received: from SI by tilde id AA03590; Thu, 17 Mar 88 10:45:41 CST
Message-Id: <2783609218-10675784@SI>
Sender: OREN@si.csc.ti.com
Date: Thu, 17 Mar 88  10:46:58 CST
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@zermatt.lcs.mit.edu
Subject: CLX trace fixes
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Fri, 18 Mar 88 07:45 EST
Resent-Message-Id: <880318074548.8.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   174
### area:         CLX
### severity:     
### assigned to:  
### status:       closed
### comments:     

describe-trace prints the bitmask keys in reverse order.  Here's the fix:

;; From the lib/CLX/debug/describe.l file:
(defun print-value (i value type doc &aux temp)
  (format t "~2d ~3d " i value)
  (if (consp type)
      (case (first type)
	(bitmask (format t "~a" (nreverse (decode-mask (symbol-value (second type)) value)))
		 (setq type (car type)))
	(member (if (null (setq temp (nth value (cdr type))))
		    (format t "*****ERROR*****")
		  (format t "~a" temp)
		  (setq type (car type)))))
    (case type
      ((window pixmap drawable cursor font gcontext colormap atom)
       (format t "[#x~x]" value)
       #+comment
       (let ((temp (lookup-resource-id display value)))
	 (when (eq (first type) 'atom)
	   (setq temp (lookup-xatom display value)))
	 (when temp (format t " (~s)" (type-of temp)))))
      (int16 (setq temp (card16->int16 value))
	     (when (minusp temp) (format t "~d" temp)))
      (otherwise
       (when (and (numberp type) (not (= type value)))
	 (format t "*****ERROR*****")))))
  (format t "~30,10t ~10a ~a" type doc))

describe-trace doesn't print event sequence numbers, which makes it
difficult to use describe-event.  In addition, there may be several
events with the same sequence number (for example many :EXPOSUREs from a
single map)  find-trace and describe-event are extended to handle this.

;; From the lib/CLX/debug/trace.l file:
(defun find-trace (display type sequence &optional (number 0))
  (dolist (history (display-trace-history display))
    (when (and (symbolp (car history))
	       (= (aref (cdr history) 0) type)
	       (= (byte-ref16 (cdr history) 2) sequence)
	       (minusp (decf number)))
      (return (cdr history)))))

(defun describe-event (display name sequence &optional (number 0))
  "Describe the event with event-name NAME and sequence number SEQUENCE.
If there is more than one event, return NUMBER in the sequence."
  (declare (type display display)
	   (type (or stringable (integer 0 63)) name)
	   (type (integer 0) sequence))
  (let* ((event (event-number name))
	 (vector (and event (find-trace display event sequence number))))
    (if (not event)
	(format t "~%~s isn't an event name" name)
      (if (not vector)
	  (if (and (plusp number) (setq vector (find-trace display event sequence 0)))
	      (do ((i 1 (1+ i))
		   (last-vector))
		  (nil)
		(if (setq vector (find-trace display event sequence i))
		    (setq last-vector vector)
		  (progn 
		    (format t "~%Event number ~d not found, last event was ~d"
			    number (1- i))
		    (return (trace-event-print display last-vector)))))
	    (format t "~%Event ~s not found"
		    (aref *event-key-vector* event)))
	(trace-event-print display vector)))))

(defun describe-trace (display &optional length)
  "Display the trace history for DISPLAY.
 The default is to show ALL history entries.
 When the LENGTH parameter is used, only the last LENGTH entries are
 displayed."
  (declare (type display display))
  #+ti (si:load-if "clx:debug;describe")
  (dolist (hist (reverse (subseq (display-trace-history display)
				 0 length)))
    (let* ((id (car hist))
	   (vector (cdr hist))
	   (length (length vector)))
      (format t "~%~5d " id)
      (case id
	(:error
	 (trace-error-print display vector))
	(:event
	 (let ((event (trace-event-print display vector)))
	   (when event (format t "from ~d ~{ ~s~}"
			       (byte-ref16 vector 2) event))))
	(:reply
	 (format t "To ~d length ~d"
		 (byte-ref16 vector 2) length)
	 (let ((actual-length (index+ 32 (index* 4 (byte-ref32 vector 4)))))
	   (unless (= length actual-length)
	     (format t " Should be ~d **************" actual-length)))
	 (let ((*print-array* t)
	       (*print-base* 16.))
	   (princ " ")
	   (princ vector)))
	(otherwise
	  (let* ((len (length vector))
		 (hist (make-reply-buffer len)))
	    (buffer-replace (reply-ibuf8 hist) vector 0 len)
	    (print-history-description hist)))))))


