Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Tue, 5 Jul 88 09:14:08 EDT
Date: Tue, 5 Jul 88 09:14 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: minor CLX problems
To: xbugs@expo.lcs.mit.edu
Message-Id: <19880705131427.7.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   683
### area:         CLX
### severity:     low
### comments:     

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	any

DISPLAY:
	any

WINDOW MANAGER:
	any

AREA:
	CLX

SYNOPSIS:
	avoid confusing Symbolics compiler
	avoid type mismatch complaints from compilers
	move function def for inline expansion

DESCRIPTION:
	The Symbolics compiler gets confused by the rebinding of "line"
	in the context of a register declaration.

	Initialize some structure members to objects of correct type
	to avoid compiler complaints.

	Move gen-byte and byte-reverse source to permit open coding.

REPEAT-BY:

FILES:
	lib/CLX/image.l

FIX:

*** /tmp/,RCSt1a01106	Mon Jul  4 14:32:08 1988
--- lib/CLX/image.l	Sat Jun 18 12:23:24 1988
***************
*** 25,30 ****
--- 25,31 ----
  ;;; -------------------------------------------------------------------------------------
  ;;; 10/14/87	LGO	Created
  ;;; 11/03/87	LGO	Re-written to split out image-x image-xy and image-z types
+ ;;;  5/18/88    DLC     Moved BYTE-REVERSE to before it was used for inline expansion
  
  ;;; TO DO:
  ;;; 1. Write lispm versions of the conversion functions that use BITBLT
***************
*** 100,114 ****
  
  (defun set-image-property (image name value) (setf (getf (image-plist image) name) value))
  
  (defstruct (image-x (:include image))
    ;; Use this format for shoveling image data
    ;; Private structure. Accessors for these NOT exported.
    (format :z-pixmap :type (member :bitmap :xy-pixmap :z-pixmap))
    (bytes-per-line 0 :type card16)
!   (bits-per-pixel 0 :type (member 1 4 8 16 24 32))
    (bit-lsb-first-p nil :type boolean)		; Bit order
    (byte-lsb-first-p nil :type boolean)		; Byte order
!   (data '#() :type (array card8 (*))))		; row-major
  
  (defstruct (image-xy (:include image))
    ;; Public structure
--- 101,120 ----
  
  (defun set-image-property (image name value) (setf (getf (image-plist image) name) value))
  
+ (defvar *empty-data-x* (make-sequence '(array card8 (*)) 0))
+ (proclaim '(type (array card8 (*)) *empty-data-x*))
+ (defvar *empty-data-z* (make-array '(0 0) :element-type 'bit))
+ (proclaim '(type pixarray *empty-data-z*))
+ 
  (defstruct (image-x (:include image))
    ;; Use this format for shoveling image data
    ;; Private structure. Accessors for these NOT exported.
    (format :z-pixmap :type (member :bitmap :xy-pixmap :z-pixmap))
    (bytes-per-line 0 :type card16)
!   (bits-per-pixel 1 :type (member 1 4 8 16 24 32))
    (bit-lsb-first-p nil :type boolean)		; Bit order
    (byte-lsb-first-p nil :type boolean)		; Byte order
!   (data *empty-data-x* :type (array card8 (*)))); row-major
  
  (defstruct (image-xy (:include image))
    ;; Public structure
***************
*** 118,125 ****
  (defstruct (image-z (:include image))
    ;; Public structure
    ;; Use this format for image processing
!   (bits-per-pixel 0 :type (member 1 4 8 16 24 32))
!   (pixarray '#() :type pixarray))
  
  (defun create-image (&key width height
  		     depth data plist name x-hot y-hot
--- 124,131 ----
  (defstruct (image-z (:include image))
    ;; Public structure
    ;; Use this format for image processing
!   (bits-per-pixel 1 :type (member 1 4 8 16 24 32))
!   (pixarray *empty-data-z* :type pixarray))
  
  (defun create-image (&key width height
  		     depth data plist name x-hot y-hot
***************
*** 323,328 ****
--- 329,373 ----
  ;;;-----------------------------------------------------------------------------
  ;;; Pixel-Array conversions
  
+ #+comment ;; Used to generate the table in byte-reverse
+ (defun genbyte ()
+   (let ((result (make-array 256)))
+     (dotimes (i 256)
+       (let ((b 0))
+ 	(setq b (dpb (ldb (byte 1 0) i) (byte 1 7) b))
+ 	(setq b (dpb (ldb (byte 1 1) i) (byte 1 6) b))
+ 	(setq b (dpb (ldb (byte 1 2) i) (byte 1 5) b))
+ 	(setq b (dpb (ldb (byte 1 3) i) (byte 1 4) b))
+ 	(setq b (dpb (ldb (byte 1 4) i) (byte 1 3) b))
+ 	(setq b (dpb (ldb (byte 1 5) i) (byte 1 2) b))
+ 	(setq b (dpb (ldb (byte 1 6) i) (byte 1 1) b))
+ 	(setq b (dpb (ldb (byte 1 7) i) (byte 1 0) b))
+ 	(setf (aref result i) b)))
+     result))
+ 
+ (proclaim '(inline byte-reverse))
+ (defun byte-reverse (byte)
+   (aref '#.(coerce
+ 	    '#(0 128 64 192 32 160 96 224 16 144 80 208 48 176 112 240
+ 	       8 136 72 200 40 168 104 232 24 152 88 216 56 184 120 248
+ 	       4 132 68 196 36 164 100 228 20 148 84 212 52 180 116 244
+ 	       12 140 76 204 44 172 108 236 28 156 92 220 60 188 124 252
+ 	       2 130 66 194 34 162 98 226 18 146 82 210 50 178 114 242
+ 	       10 138 74 202 42 170 106 234 26 154 90 218 58 186 122 250
+ 	       6 134 70 198 38 166 102 230 22 150 86 214 54 182 118 246
+ 	       14 142 78 206 46 174 110 238 30 158 94 222 62 190 126 254
+ 	       1 129 65 193 33 161 97 225 17 145 81 209 49 177 113 241
+ 	       9 137 73 201 41 169 105 233 25 153 89 217 57 185 121 249
+ 	       5 133 69 197 37 165 101 229 21 149 85 213 53 181 117 245
+ 	       13 141 77 205 45 173 109 237 29 157 93 221 61 189 125 253
+ 	       3 131 67 195 35 163 99 227 19 147 83 211 51 179 115 243
+ 	       11 139 75 203 43 171 107 235 27 155 91 219 59 187 123 251
+ 	       7 135 71 199 39 167 103 231 23 151 87 215 55 183 119 247
+ 	       15 143 79 207 47 175 111 239 31 159 95 223 63 191 127 255)
+ 	     '(vector card8))
+ 	byte))
+ 
+ 
  (defun z-format-pixarray (data index bytes-per-line depth bits-per-pixel
  				src-x src-y width height)
    (declare (type (simple-array card8 (*)) data)
***************
*** 618,661 ****
  	(setf (aref data index) (byte-reverse (aref data index)))
  	(index-incf index)))))
  
- #+comment ;; Used to generate the table in byte-reverse
- (defun genbyte ()
-   (let ((result (make-array 256)))
-     (dotimes (i 256)
-       (let ((b 0))
- 	(setq b (dpb (ldb (byte 1 0) i) (byte 1 7) b))
- 	(setq b (dpb (ldb (byte 1 1) i) (byte 1 6) b))
- 	(setq b (dpb (ldb (byte 1 2) i) (byte 1 5) b))
- 	(setq b (dpb (ldb (byte 1 3) i) (byte 1 4) b))
- 	(setq b (dpb (ldb (byte 1 4) i) (byte 1 3) b))
- 	(setq b (dpb (ldb (byte 1 5) i) (byte 1 2) b))
- 	(setq b (dpb (ldb (byte 1 6) i) (byte 1 1) b))
- 	(setq b (dpb (ldb (byte 1 7) i) (byte 1 0) b))
- 	(setf (aref result i) b)))
-     result))
  
- (proclaim '(inline byte-reverse))
- (defun byte-reverse (byte)
-   (aref '#.(coerce
- 	    '#(0 128 64 192 32 160 96 224 16 144 80 208 48 176 112 240
- 	       8 136 72 200 40 168 104 232 24 152 88 216 56 184 120 248
- 	       4 132 68 196 36 164 100 228 20 148 84 212 52 180 116 244
- 	       12 140 76 204 44 172 108 236 28 156 92 220 60 188 124 252
- 	       2 130 66 194 34 162 98 226 18 146 82 210 50 178 114 242
- 	       10 138 74 202 42 170 106 234 26 154 90 218 58 186 122 250
- 	       6 134 70 198 38 166 102 230 22 150 86 214 54 182 118 246
- 	       14 142 78 206 46 174 110 238 30 158 94 222 62 190 126 254
- 	       1 129 65 193 33 161 97 225 17 145 81 209 49 177 113 241
- 	       9 137 73 201 41 169 105 233 25 153 89 217 57 185 121 249
- 	       5 133 69 197 37 165 101 229 21 149 85 213 53 181 117 245
- 	       13 141 77 205 45 173 109 237 29 157 93 221 61 189 125 253
- 	       3 131 67 195 35 163 99 227 19 147 83 211 51 179 115 243
- 	       11 139 75 203 43 171 107 235 27 155 91 219 59 187 123 251
- 	       7 135 71 199 39 167 103 231 23 151 87 215 55 183 119 247
- 	       15 143 79 207 47 175 111 239 31 159 95 223 63 191 127 255)
- 	     '(vector card8))
- 	byte))
- 
  
  ;;;-----------------------------------------------------------------------------
  ;;; PUT-IMAGE
--- 663,669 ----
***************
*** 1328,1336 ****
  		 (data (make-array (* line-width height)
  				   :element-type '(unsigned-byte 8)))
  		 (number-string (make-string 2))
! 		 (line 0)
  		 (byte 0))
! 	    (declare (type card16 byte-width line-width line byte)
  		     (type string number-string)
  		     (type (simple-array card8 (*)) data))
  	    (with-vector (data (simple-array card8 (*)))
--- 1336,1344 ----
  		 (data (make-array (* line-width height)
  				   :element-type '(unsigned-byte 8)))
  		 (number-string (make-string 2))
! 		 (line-base 0)
  		 (byte 0))
! 	    (declare (type card16 byte-width line-width line-base byte)
  		     (type string number-string)
  		     (type (simple-array card8 (*)) data))
  	    (with-vector (data (simple-array card8 (*)))
***************
*** 1340,1350 ****
  		  (loop (when (eql (read-char fstream) #\x) (return)))
  		  (setf (aref number-string 0) (read-char fstream))
  		  (setf (aref number-string 1) (read-char fstream))
! 		  (setf (aref data (+ line byte))
  			(parse-integer number-string :radix 16. :junk-allowed t))
  		  (incf byte))
  		(setq byte 0
! 		      line (+ line line-width)))
  	      (create-image :width width :height height :depth depth
  			    :plist properties :data data
  			    :bit-lsb-first-p t ;; WHY? (sounds like a bug)
--- 1348,1358 ----
  		  (loop (when (eql (read-char fstream) #\x) (return)))
  		  (setf (aref number-string 0) (read-char fstream))
  		  (setf (aref number-string 1) (read-char fstream))
! 		  (setf (aref data (+ line-base byte))
  			(parse-integer number-string :radix 16. :junk-allowed t))
  		  (incf byte))
  		(setq byte 0
! 		      line-base (+ line-base line-width)))
  	      (create-image :width width :height height :depth depth
  			    :plist properties :data data
  			    :bit-lsb-first-p t ;; WHY? (sounds like a bug)

