Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by EXPO.LCS.MIT.EDU; Fri, 18 Mar 88 11:13:29 EST
Return-Path: <@TI.COM:Oren@Home.csc.ti.com>
Received: from ti.com (TI.COM) by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 133719; 18 Mar 88 10:01:13 EST
Received: by ti.com id AA22992; Fri, 18 Mar 88 08:59:39 CST
Received: from SI by tilde id AA22585; Fri, 18 Mar 88 08:58:14 CST
Message-Id: <2783689163-3479204@SI>
Sender: OREN@si.csc.ti.com
Date: Fri, 18 Mar 88  08:59:23 CST
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@zermatt.lcs.mit.edu
Subject: CLX write-simple-array-x performance
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Fri, 18 Mar 88 11:12 EST
Resent-Message-Id: <880318111259.7.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   175
### area:         CLX
### severity:     
### assigned to:  
### status:       closed
### comments:     performance enhancement

I've been metering some of the CLX code and I noticed that 70%
of the time executing write-sequence-card8 is taken doing:
(typep data '(simple-array card8 (*)))

The simple-array test is fast (its ucoded on an explorer) but it takes
250us to figure out that the element type is card8.  Since there's no
speed difference between write-simple-array-... and write-vector-...
on a lispm, I think ALL the simple array special cases should be
conditionalized out for lispm's.  For example:

(defun write-sequence-card8
       (buffer boffset data &optional (start 0) (end (length data)) transform)
  (declare (type buffer buffer)
	   (type sequence data)
	   (type array-index boffset start end))
  (declare-funarg (or null (function (t) card8)) transform)
  (typecase data
    (list
      (if transform
	  (write-list-card8-with-transform buffer boffset data start end transform)
	  (write-list-card8 buffer boffset data start end)))
    #-lispm ;; Lispm's handle simple-arrays just as fast as vectors, so nuke the type check.
    ((simple-array card8 (*))
     (if transform
	 (write-simple-array-card8-with-transform buffer boffset data start end transform)
	 (write-simple-array-card8 buffer boffset data start end)))
    (t
      (if transform
	  (write-vector-card8-with-transform buffer boffset data start end transform)
	  (write-vector-card8 buffer boffset data start end)))))

In addition, all the write-simple-array... functions can be conditioned out.


