Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by EXPO.LCS.MIT.EDU; Thu, 24 Mar 88 16:23:43 EST
Return-Path: <@TI.COM:Oren@Home.csc.ti.com>
Received: from ti.com (TI.COM) by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 135058; 24 Mar 88 12:31:44 EST
Received: by ti.com id AA29495; Thu, 24 Mar 88 11:14:11 CST
Received: from SI by tilde id AA24124; Thu, 24 Mar 88 11:10:43 CST
Message-Id: <2784215526-3938371@SI>
Sender: OREN@si.csc.ti.com
Date: Thu, 24 Mar 88  11:12:06 CST
From: LaMott Oren <Oren@home.csc.ti.com>
To: bug-clx@zermatt.lcs.mit.edu
Subject: CLX lispm performance hack
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Thu, 24 Mar 88 16:23 EST
Resent-Message-Id: <880324162340.5.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   208
### area:         CLX
### severity:     
### assigned to:  
### status:       closed
### comments:     

The put-memberX macros expand into `(position ,thing (the simple-vector ...))
which is good for non-lispm's without cdr coded lists.  On a lispm its
just as fast to do position on a list as a vector.  CLX usually ends up
doing a type check before the position call which uses the list, so
making position use the same list prevents a possible page fault to get
the vector.  In addition, the TI Explorer optimizes position on a list
into the micro-coded zetalisp find-position-in-list.

;; From the CLX/macros file:
(define-accessor member8 (8)
  ((index &rest keywords)
   (let ((value (gensym)))
     `(let ((,value (read-card8 ,index)))
	(and (< ,value ,(length keywords))
	     (aref ',(apply #'vector keywords) ,value)))))
  ((index thing &rest keywords)
   `(write-card8 ,index (position ,thing
				  #+lispm ',keywords ;; Lispm's prefer lists
				  #-lispm (the simple-vector ',(apply #'vector keywords))
				  :test #'eq)))
  ((index thing &rest keywords)
   (let ((value (gensym)))
     `(let ((,value (position ,thing
			      #+lispm ',keywords
			      #-lispm (the simple-vector ',(apply #'vector keywords))
			      :test #'eq)))
	(and ,value (write-card8 ,index ,value))))))

(define-accessor member16 (16)
  ((index &rest keywords)
   (let ((value (gensym)))
     `(let ((,value (read-card16 ,index)))
	(and (< ,value ,(length keywords))
	     (aref ',(apply #'vector keywords) ,value)))))
  ((index thing &rest keywords)
   `(write-card16 ,index (position ,thing
				   #+lispm ',keywords ;; Lispm's prefer lists
				   #-lispm (the simple-vector ',(apply #'vector keywords))
				   :test #'eq)))
  ((index thing &rest keywords)
   (let ((value (gensym)))
     `(let ((,value (position ,thing
			      #+lispm ',keywords
			      #-lispm (the simple-vector ',(apply #'vector keywords))
			      :test #'eq)))
	(and ,value (write-card16 ,index ,value))))))

(define-accessor member (32)
  ((index &rest keywords)
   (let ((value (gensym)))
     `(let ((,value (read-card29 ,index)))
	(and (< ,value ,(length keywords))
	     (aref ',(apply #'vector keywords) ,value)))))
  ((index thing &rest keywords)
   `(write-card29 ,index (position ,thing
				   #+lispm ',keywords ;; Lispm's prefer lists
				   #-lispm (the simple-vector ',(apply #'vector keywords))
				   :test #'eq)))
  ((index thing &rest keywords)
   (if (cdr keywords) ;; IF more than one
       (let ((value (gensym)))
	 `(let ((,value (position ,thing
				   #+lispm ',keywords
				   #-lispm (the simple-vector ',(apply #'vector keywords))
				  :test #'eq)))
	    (and ,value (write-card29 ,index ,value))))
     `(and (eq ,thing ,(car keywords)) (write-card29 ,index 0)))))


