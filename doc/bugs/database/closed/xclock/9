Return-Path: dana@thumper.bellcore.com
Received: by expo.lcs.mit.edu; Tue, 19 Apr 88 14:14:30 EDT
Received: by thumper.bellcore.com (5.54/4.7)
	id AA07683; Tue, 19 Apr 88 14:11:33 EDT
Received: by dino.bellcore.com (4.12/4.7)
	id AA06093; Tue, 19 Apr 88 14:09:25 edt
Date: Tue, 19 Apr 88 14:09:25 edt
From: dana@thumper.bellcore.com (Dana A. Chee)
Message-Id: <8804191809.AA06093@dino.bellcore.com>
To: xbugs@expo.lcs.mit.edu
Cc: dana@thumper.bellcore.com, ludwig@zippy.lcs.mit.edu
Subject: timer/refresh bug in Xaw/Clock.c

### bug number:   389
### area:         xclock
### severity:     
### assigned to:  
### status:       closed
### comments:     fix supplied


VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/75

CLIENT OPERATING SYSTEM:
	SunOS 3.2

DISPLAY:
	SUN

SYNOPSIS:
	When a clock is refreshed, the original timer is not removed.

DESCRIPTION:
	In the Clock tool, whenever a refresh is called for, the function
	clock_tic is called and a new timer event is created.  But any
	existing event is not cleared, therefore, your refresh rate is
	different than what you requested (actually, it often causes
	flicker when using the digital clock).

	Also, rewriting text without clearing the window first leaves
	garbage around in the digital mode if the new string is not as
	long as the old one (happens whenever a variable width font is
	used.

REPEAT-BY:
	Run xclock in digital mode with a variable width font.  Cause
	several refreshes to occur.  Watch what happens to your
	interval timer.

FIX:
	Context diff for Clock.c:
----------------------- Clock.diff ----------------
*** lib/Xaw/Clock.c	Fri Feb 26 10:25:20 1988
--- Clock.c	Tue Apr 19 13:53:29 1988
***************
*** 282,287 ****
--- 282,299 ----
          register Display *dpy = XtDisplay(w);
          register Window win = XtWindow(w);
  
+ 	if( id != NULL && w->clock.interval_id != *id )
+ 		/* some extraneous event, ignore */
+ 		return;
+ 	
+ 	if( id == NULL )
+ 	{
+ 		/* got a tick from a redisplay, clear out any waiting
+ 		   timer event */
+ 		if( w->clock.interval_id )
+ 			XtRemoveTimeOut( w->clock.interval_id);
+ 	}
+        
  	w->clock.interval_id =
  	    XtAddTimeOut( w->clock.update*1000, clock_tic, (caddr_t)w );
  	(void) time(&time_value);
***************
*** 304,309 ****
--- 316,322 ----
  	if( w->clock.analog == FALSE ) {
  	    time_ptr = asctime(&tm);
  	    time_ptr[strlen(time_ptr) - 1] = 0;
+ 	    XClearWindow(dpy, win);
  	    XDrawImageString (dpy, win, w->clock.myGC,
  			     2+w->clock.padding, 2+w->clock.font->ascent+w->clock.padding,
  			     time_ptr, strlen(time_ptr));


