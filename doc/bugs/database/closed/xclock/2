Return-Path: lori%hpcvxlc@hplabs.hp.com
Received: from ATHENA (ATHENA.MIT.EDU) by EXPO.LCS.MIT.EDU; Thu, 17 Mar 88 14:08:43 EST
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA28455; Thu, 17 Mar 88 14:07:48 EST
Received: from hp-pcd.HP.COM ([15.0.200.33]) by hplabs.HP.COM with SMTP ; Thu, 17 Mar 88 09:12:24 PST
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA09306; Thu, 17 Mar 88 08:46:12 PST
Received: from hpcvxlc by hpcvxlc.HP.COM; Thu, 17 Mar 88 08:46:46 pst
Message-Id: <8803171646.AA25405@hpcvxlc.HP.COM>
To: xbugs@athena.mit.edu
Subject: xclock bug
X-Mailer: mh6.5
Date: Thu, 17 Mar 88 08:46:41 PST
From: Lori Cook <lori%hpcvxlc@hplabs.hp.com>

### bug number:   157
### area:         xclock
### severity:     
### assigned to:  
### status:       closed
### comments:     

VERSION:
	X11 release 2
SYNOPSIS:
	When the second hand option is specified for 'xclock', and a move is
	done on the clock, the clock widget can get confused as to when to
	update the second hand.
DESCRIPTION:
	There are two ways to enter the clock_tic routine in Clock.c. The first
	is from the routine Redisplay and the other is from the alarm set by
	clock_tic. Any exposure event will cause Redisplay to be called. Every
	clock_tic is called, it sets a timeout via XtAddTimeOut. So the
	senario goes like this:
	
	1) xclock fires up. Redisplay is called to draw the clock. It calls
	   clock_tic, which calls XtAddTimeout. This is the first timeout set.
	2) xclock is allowed to run undisturbed for some interval. Every time
	   the alarm goes off it calls clock_tic which sets the next timeout.
	3) an exposure event occurs at some point before the next timeout, so
	   Redisplay is called, which calls clock_tic, which sets another
	   timeout. At this point, two different timeouts are now active
	   instead of one.

	The result is the second hand moving more than once for the update
	time specified.

REPEAT-BY:
	Start up an 'xclock -update 5'.
	Use a 'moveopaque' in uwm to move the clock around the screen.
	Eventually the second hand will start updating at intervals closer
	together than the 5 seconds specified.
FIX:
	WARNING: When clock_tic is entered via an alarm call, the 'id' variable
	will be non-NULL. When clock_tic is entered via the Redisplay routine,
	'id' is NULL. Unfortunately, clock_tic is called via the Redisplay
	routine the very first time we want to draw the clock and hands,
	therefore the kludge with the variable 'first'.

*** lib/Xaw/Clock.c.R2	Wed Mar 16 15:28:51 1988
--- lib/Xaw/Clock.c	Wed Mar 16 15:34:32 1988
***************
*** 281,286
  	char	*time_ptr = time_string;
          register Display *dpy = XtDisplay(w);
          register Window win = XtWindow(w);
  
  	w->clock.interval_id =
  	    XtAddTimeOut( w->clock.update*1000, clock_tic, (caddr_t)w );

--- 281,287 -----
  	char	*time_ptr = time_string;
          register Display *dpy = XtDisplay(w);
          register Window win = XtWindow(w);
+ 	static  int first = 1;
  
  	if (id || first) {
  	    w->clock.interval_id =
***************
*** 282,289
          register Display *dpy = XtDisplay(w);
          register Window win = XtWindow(w);
  
! 	w->clock.interval_id =
! 	    XtAddTimeOut( w->clock.update*1000, clock_tic, (caddr_t)w );
  	(void) time(&time_value);
  	tm = *localtime(&time_value);
  	/*

--- 283,293 -----
          register Window win = XtWindow(w);
  	static  int first = 1;
  
! 	if (id || first) {
! 	    w->clock.interval_id =
! 		XtAddTimeOut( w->clock.update*1000, clock_tic, (caddr_t)w );
! 	    first = 0;
! 	}
  	(void) time(&time_value);
  	tm = *localtime(&time_value);
  	/*

