Return-Path: lori%hpcvxlc@hplabs.hp.com
Received: by expo.lcs.mit.edu; Mon, 13 Jun 88 12:50:03 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA06874; Mon, 13 Jun 88 12:48:33 EDT
Received: from hp-pcd.HP.COM (hp-pcd) by hplabs.HP.COM with SMTP ; Mon, 13 Jun 88 08:48:30 PST
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA25719; Mon, 13 Jun 88 09:47:38 PDT
Received: from hpcvxlc by hpcvxlc.HP.COM; Mon, 13 Jun 88 09:49:35 pdt
Message-Id: <8806131649.AA02709@hpcvxlc.HP.COM>
To: xbugs@athena.mit.edu
Subject: digital xclock ptimization for large fonts
X-Mailer: mh6.5
Date: Mon, 13 Jun 88 09:49:31 PDT
From: Lori Cook <lori%hpcvxlc@hplabs.hp.com>

### bug number:   595
### area:         xclock
### severity:     enhancement
### comments:     

VERSION:
	X11 release 2
SYNOPSIS:
	When a large font digital clock is displayed and update equals
	one second, the system can become bogged down.
DESCRIPTION:
	By the very nature of a large font, the text takes a significant
	amount of time to write to the display. When the update time is
	one second, the requests to write the text to the display become
	closer and closer together. This causes xclock to hog the cpu
	time and other clients have a difficult time getting their
	requests in. It becomes extremely difficult for 'uwm' to do any
	work.
REPEAT-BY:
	run 'xclock -digital -fn vsg-114 -update 1'
	wait a few minutes.
	attempt to bring up a uwm menu.
SUGGESTED FIX:
	The idea is to cut down on the amount of text written to the
	display. Therefore only write the text starting at the first
	character that needs changing.
*** lib/Xaw/Clock.c.old	Thu Jun  9 18:44:01 1988
--- lib/Xaw/Clock.c	Thu Jun  9 18:39:22 1988
***************
*** 55,60
  #define min(a, b) ((a) < (b) ? (a) : (b))
  #define abs(a) ((a) < 0 ? -(a) : (a))
  
  
  /* Initialization of defaults */
  

--- 55,61 -----
  #define min(a, b) ((a) < (b) ? (a) : (b))
  #define abs(a) ((a) < 0 ? -(a) : (a))
  
+ char old_time_str[28];
  
  /* Initialization of defaults */
  
***************
*** 296,301
  	    erase_hands (w, (struct tm *) 0);
          DrawClockFace(w);
      }
      clock_tic((caddr_t)w, (XtIntervalId)NULL);
  }
  

--- 297,304 -----
  	    erase_hands (w, (struct tm *) 0);
          DrawClockFace(w);
      }
+     else
+ 	strcpy(old_time_str, "");
      clock_tic((caddr_t)w, (XtIntervalId)NULL);
  }
  
***************
*** 335,340
  	}
  	if( w->clock.analog == FALSE ) {
  	    int	clear_from;
  
  	    time_ptr = asctime(&tm);
  	    time_ptr[strlen(time_ptr) - 1] = 0;

--- 338,344 -----
  	}
  	if( w->clock.analog == FALSE ) {
  	    int	clear_from;
+ 	    int i, len, old_len;
  
  	    time_ptr = asctime(&tm);
  	    time_ptr[strlen(time_ptr) - 1] = 0;
***************
*** 338,343
  
  	    time_ptr = asctime(&tm);
  	    time_ptr[strlen(time_ptr) - 1] = 0;
  	    XDrawImageString (dpy, win, w->clock.myGC,
  			     2+w->clock.padding, 2+w->clock.font->ascent+w->clock.padding,
  			     time_ptr, strlen(time_ptr));

--- 342,351 -----
  
  	    time_ptr = asctime(&tm);
  	    time_ptr[strlen(time_ptr) - 1] = 0;
+ 	    for (i = 0, len = strlen(time_ptr), old_len = strlen(old_time_str);
+ 		    i < len && i < old_len && old_time_str[i] == time_ptr[i];
+ 			i++);
+ 	    strcpy(old_time_str, time_ptr);
  	    XDrawImageString (dpy, win, w->clock.myGC,
  			     2+w->clock.padding + XTextWidth(w->clock.font, time_ptr, i),
  			     2+w->clock.font->ascent+w->clock.padding,
***************
*** 339,346
  	    time_ptr = asctime(&tm);
  	    time_ptr[strlen(time_ptr) - 1] = 0;
  	    XDrawImageString (dpy, win, w->clock.myGC,
! 			     2+w->clock.padding, 2+w->clock.font->ascent+w->clock.padding,
! 			     time_ptr, strlen(time_ptr));
  	    /*
  	     * Clear any left over bits
  	     */

--- 347,355 -----
  			i++);
  	    strcpy(old_time_str, time_ptr);
  	    XDrawImageString (dpy, win, w->clock.myGC,
! 			     2+w->clock.padding + XTextWidth(w->clock.font, time_ptr, i),
! 			     2+w->clock.font->ascent+w->clock.padding,
! 			     time_ptr + i, len - i);
  	    /*
  	     * Clear any left over bits
  	     */
***************
*** 344,350
  	    /*
  	     * Clear any left over bits
  	     */
! 	    clear_from = XTextWidth (w->clock.font, time_ptr, strlen (time_ptr))
   	    		+ 2 + w->clock.padding;
  	    if (clear_from < w->core.width)
  		XFillRectangle (dpy, win, w->clock.EraseGC,

--- 353,359 -----
  	    /*
  	     * Clear any left over bits
  	     */
! 	    clear_from = XTextWidth (w->clock.font, time_ptr, len)
   	    		+ 2 + w->clock.padding;
  	    if (clear_from < w->core.width)
  		XFillRectangle (dpy, win, w->clock.EraseGC,

