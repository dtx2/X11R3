Return-Path: jrs@magic.ecn.purdue.edu
Received: from magic.ecn.purdue.edu ([128.46.130.84]) by EXPO.LCS.MIT.EDU; Mon, 21 Mar 88 16:56:19 EST
Received: by magic.ecn.purdue.edu (5.54/1.12jrs)
	id AA15130; Mon, 21 Mar 88 16:54:43 EST
Date: Mon, 21 Mar 88 16:54:43 EST
From: jrs@magic.ecn.purdue.edu (Jeff Schwab)
Message-Id: <8803212154.AA15130@magic.ecn.purdue.edu>
To: xbugs@expo.lcs.mit.edu
Subject: Clock widget exposure handing problems

### bug number:   189
### area:         xclock
### severity:     
### assigned to:  
### status:       closed
### comments:     reasonable looking source for fix


VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/50

CLIENT OPERATING SYSTEM:
	SunOS 3.4

DISPLAY:
	BW2

SYNOPSIS:
	 Analog Clock widget did a very bad job of handling exposures.

DESCRIPTION:
	 When an analog clock widget was partially obscured and then
	 re-exposed, it had two nasty habits.  First, each exposure
	 would add another timer element,  which resulted in the
	 X server becoming a dedicated clock server after sufficient number
	 of exposures.  This also affects digital clocks.
	 Secondly, if the clock hands were not in the obscured region
	 at the time it was re-exposed, dead, dismembered hands
	 often resulted.

REPEAT-BY:
	Start of xclock (or other clock widget user).  Partially
	obscure the window a number of times.  Observe result.

FIX:
*** /tmp/,RCSt1a15111	Mon Mar 21 16:42:57 1988
--- Clock.c	Sun Mar 20 12:00:09 1988
***************
*** 282,287
          register Display *dpy = XtDisplay(w);
          register Window win = XtWindow(w);
  
  	w->clock.interval_id =
  	    XtAddTimeOut( w->clock.update*1000, clock_tic, (caddr_t)w );
  	(void) time(&time_value);

--- 282,288 -----
          register Display *dpy = XtDisplay(w);
          register Window win = XtWindow(w);
  
+ 	XtRemoveTimeOut(w->clock.interval_id);
  	w->clock.interval_id =
  	    XtAddTimeOut( w->clock.update*1000, clock_tic, (caddr_t)w );
  	(void) time(&time_value);
***************
*** 640,645
  {
  	register int i;
  	register int delta = (w->clock.radius - w->clock.second_hand_length) / 3;
  	
  	w->clock.segbuffptr = w->clock.segbuff;
  	w->clock.numseg = 0;

--- 641,650 -----
  {
  	register int i;
  	register int delta = (w->clock.radius - w->clock.second_hand_length) / 3;
+ 	Display *dpy = XtDisplay(w);
+ 	Window win = XtWindow(w);
+ 
+ 	/* Erase old hands */
  	
  	if(w->clock.numseg > 0) {
  	    if (w->clock.show_second_hand == TRUE) {
***************
*** 641,646
  	register int i;
  	register int delta = (w->clock.radius - w->clock.second_hand_length) / 3;
  	
  	w->clock.segbuffptr = w->clock.segbuff;
  	w->clock.numseg = 0;
  	for (i = 0; i < 60; i++)

--- 646,674 -----
  
  	/* Erase old hands */
  	
+ 	if(w->clock.numseg > 0) {
+ 	    if (w->clock.show_second_hand == TRUE) {
+ 		XDrawLines(dpy, win, w->clock.EraseGC, w->clock.sec,
+ 				VERTICES_IN_HANDS-1, CoordModeOrigin);
+ 		if(w->clock.Hdpixel != w->core.background_pixel) {
+ 		    XFillPolygon(dpy, win, w->clock.EraseGC, w->clock.sec,
+ 				VERTICES_IN_HANDS-2, Convex, CoordModeOrigin);
+ 		}
+ 	    }
+ 	    XDrawLines(dpy, win, w->clock.EraseGC, w->clock.segbuff,
+ 			    VERTICES_IN_HANDS, CoordModeOrigin);
+ 	    XDrawLines(dpy, win, w->clock.EraseGC, w->clock.hour,
+ 			    VERTICES_IN_HANDS, CoordModeOrigin);
+ 	    if(w->clock.Hdpixel != w->core.background_pixel) {
+ 		XFillPolygon(dpy, win, w->clock.EraseGC, w->clock.segbuff,
+ 			    VERTICES_IN_HANDS, Convex, CoordModeOrigin);
+ 		XFillPolygon(dpy, win, w->clock.EraseGC, w->clock.hour,
+ 			    VERTICES_IN_HANDS, Convex, CoordModeOrigin);
+ 	    }
+ 	}
+ 
+ 	/* Now redraw face */
+ 
  	w->clock.segbuffptr = w->clock.segbuff;
  	w->clock.numseg = 0;
  	for (i = 0; i < 60; i++)
***************
*** 649,655
  	/*
  	 * Go ahead and draw it.
  	 */
! 	XDrawSegments(XtDisplay(w), XtWindow(w),
  		      w->clock.myGC, (XSegment *) &(w->clock.segbuff[0]),
  		      w->clock.numseg/2);
  	

--- 677,683 -----
  	/*
  	 * Go ahead and draw it.
  	 */
! 	XDrawSegments(dpy, win,
  		      w->clock.myGC, (XSegment *) &(w->clock.segbuff[0]),
  		      w->clock.numseg/2);
  	


