Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Wed, 10 Aug 88 13:16:17 EDT
Date: Wed, 10 Aug 88 13:16 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: GetImage with backing-store
To: xbugs@expo.lcs.mit.edu
Message-Id: <19880810171641.1.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   845
### area:         server
### severity:     low
### comments:     

CLIENT MACHINE and OPERATING SYSTEM:
	any

DISPLAY:
	any

WINDOW MANAGER:
	any

AREA:
	server

SYNOPSIS:
	backing store routines don't do XY format GetImage right
	backing store GetImage doesn't check border intersection right
	lots of routine should be static
	lint

REPEAT BY:
	xwd -xy | xwud  on a color window with backing store = WhenMapped

FIX:

*** /tmp/,RCSt1a06947	Wed Aug 10 13:12:53 1988
--- server/ddx/mi/mibstore.c	Wed Aug 10 13:10:39 1988
***************
*** 1,4 ****
! /* $Header: mibstore.c,v 1.4 88/07/29 12:08:35 keith Exp $ */
  /***********************************************************
  Copyright 1987 by the Regents of the University of California
  and the Massachusetts Institute of Technology, Cambridge, Massachusetts.
--- 1,4 ----
! /* $Header: mibstore.c,v 1.5 88/08/10 13:11:46 rws Exp $ */
  /***********************************************************
  Copyright 1987 by the Regents of the University of California
  and the Massachusetts Institute of Technology, Cambridge, Massachusetts.
***************
*** 184,190 ****
  
  static RegionPtr miRestoreAreas();
  static void miSaveAreas(), miBSDrawGuarantee(),
! 	    miTranslateBackingStore(), miExposeCopy();
  
  /*-
   *-----------------------------------------------------------------------
--- 184,191 ----
  
  static RegionPtr miRestoreAreas();
  static void miSaveAreas(), miBSDrawGuarantee(),
! 	    miTranslateBackingStore(), miExposeCopy(),
! 	    miCreateBSPixmap(), miDestroyBSPixmap(), miTileVirtualBS();
  
  /*-
   *-----------------------------------------------------------------------
***************
*** 198,204 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSFillSpans(pDrawable, pGC, nInit, pptInit, pwidthInit, fSorted)
      DrawablePtr pDrawable;
      GCPtr	pGC;
--- 199,205 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSFillSpans(pDrawable, pGC, nInit, pptInit, pwidthInit, fSorted)
      DrawablePtr pDrawable;
      GCPtr	pGC;
***************
*** 251,257 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSSetSpans(pDrawable, pGC, psrc, ppt, pwidth, nspans, fSorted)
      DrawablePtr		pDrawable;
      GCPtr		pGC;
--- 252,258 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSSetSpans(pDrawable, pGC, psrc, ppt, pwidth, nspans, fSorted)
      DrawablePtr		pDrawable;
      GCPtr		pGC;
***************
*** 362,368 ****
      }
  
      pGC = GetScratchGC(pDrawable->depth, pDrawable->pScreen);
!     ValidateGC(pPixmap, pGC);
      
      /*
       * For each span, translate it into the backing pixmap's coordinates and
--- 363,369 ----
      }
  
      pGC = GetScratchGC(pDrawable->depth, pDrawable->pScreen);
!     ValidateGC((DrawablePtr)pPixmap, pGC);
      
      /*
       * For each span, translate it into the backing pixmap's coordinates and
***************
*** 443,449 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPutImage(pDst, pGC, depth, x, y, w, h, leftPad, format, pBits)
      DrawablePtr	  pDst;
      GCPtr   	  pGC;
--- 444,450 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPutImage(pDst, pGC, depth, x, y, w, h, leftPad, format, pBits)
      DrawablePtr	  pDst;
      GCPtr   	  pGC;
***************
*** 480,485 ****
--- 481,487 ----
   * backing stored window
   */
  
+ void
  miGetImageWithBS ( pDraw, x, y, w, h, format, planemask, pImage)
      DrawablePtr		pDraw;
      int			x, y, w, h;
***************
*** 491,497 ****
      if ((pDraw->type == DRAWABLE_WINDOW) &&
  	(((WindowPtr)pDraw)->backingStore != NotUseful))
      {
! 	miBSGetImage( pDraw, (PixmapPtr) 0, x, y, w, h, format, planemask, pImage);
      }
  }
  
--- 493,500 ----
      if ((pDraw->type == DRAWABLE_WINDOW) &&
  	(((WindowPtr)pDraw)->backingStore != NotUseful))
      {
! 	miBSGetImage((WindowPtr) pDraw, NullPixmap, x, y, w, h,
! 		     format, planemask, pImage);
      }
  }
  
***************
*** 538,550 ****
       * by taking the inverse of the not-clipped-by-children region.
       */
  
!     pRgn = NotClippedByChildren (pWin);
      box.x1 = x + pWin->absCorner.x;
      box.y1 = y + pWin->absCorner.y;
      box.x2 = box.x1 + w;
      box.y2 = box.y1 + h;
      
!     (* pScreen->Inverse)(pRgn, pRgn, &box);
  
      /*
       * Nothing that wasn't visible -- return immediately.
--- 541,553 ----
       * by taking the inverse of the not-clipped-by-children region.
       */
  
!     pRgn = (* pScreen->RegionCreate)(NULL, 1);
      box.x1 = x + pWin->absCorner.x;
      box.y1 = y + pWin->absCorner.y;
      box.x2 = box.x1 + w;
      box.y2 = box.y1 + h;
      
!     (* pScreen->Inverse)(pRgn, pWin->borderClip, &box);
  
      /*
       * Nothing that wasn't visible -- return immediately.
***************
*** 559,586 ****
       * if no pixmap was given to us, create one now
       */
  
      if (!pOldPixmapPtr) {
  	pNewPixmapPtr = (*pScreen->CreatePixmap) (pScreen, w, h, pWin->drawable.depth);
! 	pGC = GetScratchGC (pNewPixmapPtr->drawable.depth, pScreen);
! 	ValidateGC (pNewPixmapPtr, pGC);
  	(*pGC->PutImage) (pNewPixmapPtr, pGC,
!  		pWin->drawable.depth, 0, 0, w, h, 0, format, pImage);
  	pPixmapPtr = pNewPixmapPtr;
      }
      else
      {
! 	pGC = GetScratchGC (pOldPixmapPtr->drawable.depth, pScreen);
! 	pNewPixmapPtr = 0;
  	pPixmapPtr = pOldPixmapPtr;
! 	ValidateGC (pPixmapPtr, pGC);
      }
-     /*
-      * make sure the CopyArea operations below never
-      * end up sending NoExpose or GraphicsExpose events.
-      */
  
-     pGC->graphicsExposures = FALSE;
- 
      /*
       * translate to window-relative coordinates
       */
--- 562,590 ----
       * if no pixmap was given to us, create one now
       */
  
+     pGC = GetScratchGC (pWin->drawable.depth, pScreen);
+     /*
+      * make sure the CopyArea operations below never
+      * end up sending NoExpose or GraphicsExpose events.
+      */
+     pGC->graphicsExposures = FALSE;
      if (!pOldPixmapPtr) {
  	pNewPixmapPtr = (*pScreen->CreatePixmap) (pScreen, w, h, pWin->drawable.depth);
! 	pGC->fgPixel = planeMask;
! 	pGC->bgPixel = 0;
! 	ValidateGC ((DrawablePtr)pNewPixmapPtr, pGC);
  	(*pGC->PutImage) (pNewPixmapPtr, pGC,
!  		pWin->drawable.depth, 0, 0, w, h, 0,
! 		(format == XYPixmap) ? XYBitmap : format, pImage);
  	pPixmapPtr = pNewPixmapPtr;
      }
      else
      {
! 	pNewPixmapPtr = NullPixmap;
  	pPixmapPtr = pOldPixmapPtr;
! 	ValidateGC ((DrawablePtr)pPixmapPtr, pGC);
      }
  
      /*
       * translate to window-relative coordinates
       */
***************
*** 706,716 ****
      ScreenPtr	pScreen;
      int		dx, dy;
      int		n;
-     XID		gcval[4];
-     BITS32	gcmask;
-     int		i;
-     xRectangle	*pRect;
- 		
      
      pBox = pRgn->rects;
      pScreen = pWin->drawable.pScreen;
--- 710,715 ----
***************
*** 726,732 ****
  	    if (!pBackingStore->pBackingPixmap &&
   		pBackingStore->backgroundTile != (PixmapPtr) ParentRelative)
  	    {
! 		miBSFillVirtualBits (pPixmap, pGC, pBackRgn, x, y,
  	    			     pBackingStore->backgroundPixel,
  				     pBackingStore->backgroundTile,
  				     (PixmapPtr) USE_BACKGROUND_PIXEL);
--- 725,731 ----
  	    if (!pBackingStore->pBackingPixmap &&
   		pBackingStore->backgroundTile != (PixmapPtr) ParentRelative)
  	    {
! 		miBSFillVirtualBits ((DrawablePtr)pPixmap, pGC, pBackRgn, x, y,
  	    			     pBackingStore->backgroundPixel,
  				     pBackingStore->backgroundTile,
  				     (PixmapPtr) USE_BACKGROUND_PIXEL);
***************
*** 739,746 ****
  		if (pBackingStore->pBackingPixmap != NullPixmap)
  		{
  		    pBox = pBackRgn->rects;
- 		    i = 0;
- 		    gcmask = 0;
  		    for (n = 0; n < pBackRgn->numRects; n++)
  		    {
  			(*pGC->CopyArea) (pBackingStore->pBackingPixmap,
--- 738,743 ----
***************
*** 764,771 ****
  	    pBox = (*pScreen->RegionExtents) (pRgn);
  
  	    if (pBox->x1 < 0 || pBox->y1 < 0 ||
! 		pWin->clientWinSize.width < pBox->x2 ||
!  		pWin->clientWinSize.height < pBox->y2)
  	    {
  		/*
  		 * compute areas of border to display
--- 761,768 ----
  	    pBox = (*pScreen->RegionExtents) (pRgn);
  
  	    if (pBox->x1 < 0 || pBox->y1 < 0 ||
! 		pWin->borderWidth + pWin->clientWinSize.width < pBox->x2 ||
!  		pWin->borderWidth + pWin->clientWinSize.height < pBox->y2)
  	    {
  		/*
  		 * compute areas of border to display
***************
*** 787,793 ****
  
  		if ((*pScreen->RegionNotEmpty) (pBackRgn))
  		{
! 		    miBSFillVirtualBits (pPixmap, pGC, pBackRgn, x, y,
  					 pWin->borderPixel,
  					 pWin->borderTile,
  					 (PixmapPtr) USE_BORDER_PIXEL);
--- 784,791 ----
  
  		if ((*pScreen->RegionNotEmpty) (pBackRgn))
  		{
! 		    miBSFillVirtualBits ((DrawablePtr)pPixmap, pGC, pBackRgn,
! 					 x, y,
  					 pWin->borderPixel,
  					 pWin->borderTile,
  					 (PixmapPtr) USE_BORDER_PIXEL);
***************
*** 1192,1198 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSCopyArea (pSrc, pDst, pGC, srcx, srcy, w, h, dstx, dsty)
      DrawablePtr	  pSrc;
      DrawablePtr	  pDst;
--- 1190,1196 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSCopyArea (pSrc, pDst, pGC, srcx, srcy, w, h, dstx, dsty)
      DrawablePtr	  pSrc;
      DrawablePtr	  pDst;
***************
*** 1280,1286 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSCopyPlane (pSrc, pDst, pGC, srcx, srcy, w, h, dstx, dsty, plane)
      DrawablePtr	  pSrc;
      DrawablePtr	  pDst;
--- 1278,1284 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSCopyPlane (pSrc, pDst, pGC, srcx, srcy, w, h, dstx, dsty, plane)
      DrawablePtr	  pSrc;
      DrawablePtr	  pDst;
***************
*** 1373,1379 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPolyPoint (pDrawable, pGC, mode, npt, pptInit)
      DrawablePtr pDrawable;
      GCPtr	pGC;
--- 1371,1377 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPolyPoint (pDrawable, pGC, mode, npt, pptInit)
      DrawablePtr pDrawable;
      GCPtr	pGC;
***************
*** 1418,1424 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPolylines (pDrawable, pGC, mode, npt, pptInit)
      DrawablePtr	  pDrawable;
      GCPtr   	  pGC;
--- 1416,1422 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPolylines (pDrawable, pGC, mode, npt, pptInit)
      DrawablePtr	  pDrawable;
      GCPtr   	  pGC;
***************
*** 1462,1468 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPolySegment(pDraw, pGC, nseg, pSegs)
      DrawablePtr pDraw;
      GCPtr 	pGC;
--- 1460,1466 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPolySegment(pDraw, pGC, nseg, pSegs)
      DrawablePtr pDraw;
      GCPtr 	pGC;
***************
*** 1506,1512 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPolyRectangle(pDraw, pGC, nrects, pRects)
      DrawablePtr	pDraw;
      GCPtr	pGC;
--- 1504,1510 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPolyRectangle(pDraw, pGC, nrects, pRects)
      DrawablePtr	pDraw;
      GCPtr	pGC;
***************
*** 1549,1555 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPolyArc(pDraw, pGC, narcs, parcs)
      DrawablePtr	pDraw;
      GCPtr	pGC;
--- 1547,1553 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPolyArc(pDraw, pGC, narcs, parcs)
      DrawablePtr	pDraw;
      GCPtr	pGC;
***************
*** 1593,1599 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSFillPolygon(pDraw, pGC, shape, mode, count, pPts)
      DrawablePtr		pDraw;
      register GCPtr	pGC;
--- 1591,1597 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSFillPolygon(pDraw, pGC, shape, mode, count, pPts)
      DrawablePtr		pDraw;
      register GCPtr	pGC;
***************
*** 1639,1645 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPolyFillRect(pDrawable, pGC, nrectFill, prectInit)
      DrawablePtr pDrawable;
      GCPtr	pGC;
--- 1637,1643 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPolyFillRect(pDrawable, pGC, nrectFill, prectInit)
      DrawablePtr pDrawable;
      GCPtr	pGC;
***************
*** 1685,1691 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPolyFillArc(pDraw, pGC, narcs, parcs)
      DrawablePtr	pDraw;
      GCPtr	pGC;
--- 1683,1689 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPolyFillArc(pDraw, pGC, narcs, parcs)
      DrawablePtr	pDraw;
      GCPtr	pGC;
***************
*** 1729,1735 ****
   *
   *-----------------------------------------------------------------------
   */
! int
  miBSPolyText8(pDraw, pGC, x, y, count, chars)
      DrawablePtr pDraw;
      GCPtr	pGC;
--- 1727,1733 ----
   *
   *-----------------------------------------------------------------------
   */
! static int
  miBSPolyText8(pDraw, pGC, x, y, count, chars)
      DrawablePtr pDraw;
      GCPtr	pGC;
***************
*** 1764,1770 ****
   *
   *-----------------------------------------------------------------------
   */
! int
  miBSPolyText16(pDraw, pGC, x, y, count, chars)
      DrawablePtr pDraw;
      GCPtr	pGC;
--- 1762,1768 ----
   *
   *-----------------------------------------------------------------------
   */
! static int
  miBSPolyText16(pDraw, pGC, x, y, count, chars)
      DrawablePtr pDraw;
      GCPtr	pGC;
***************
*** 1799,1805 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSImageText8(pDraw, pGC, x, y, count, chars)
      DrawablePtr pDraw;
      GCPtr	pGC;
--- 1797,1803 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSImageText8(pDraw, pGC, x, y, count, chars)
      DrawablePtr pDraw;
      GCPtr	pGC;
***************
*** 1834,1840 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSImageText16(pDraw, pGC, x, y, count, chars)
      DrawablePtr pDraw;
      GCPtr	pGC;
--- 1832,1838 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSImageText16(pDraw, pGC, x, y, count, chars)
      DrawablePtr pDraw;
      GCPtr	pGC;
***************
*** 1869,1875 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSImageGlyphBlt(pDrawable, pGC, x, y, nglyph, ppci, pglyphBase)
      DrawablePtr pDrawable;
      GC 		*pGC;
--- 1867,1873 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSImageGlyphBlt(pDrawable, pGC, x, y, nglyph, ppci, pglyphBase)
      DrawablePtr pDrawable;
      GC 		*pGC;
***************
*** 1908,1914 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPolyGlyphBlt(pDrawable, pGC, x, y, nglyph, ppci, pglyphBase)
      DrawablePtr pDrawable;
      GCPtr	pGC;
--- 1906,1912 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPolyGlyphBlt(pDrawable, pGC, x, y, nglyph, ppci, pglyphBase)
      DrawablePtr pDrawable;
      GCPtr	pGC;
***************
*** 1947,1953 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSPushPixels(pGC, pBitMap, pDst, w, h, x, y)
      GCPtr	pGC;
      PixmapPtr	pBitMap;
--- 1945,1951 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSPushPixels(pGC, pBitMap, pDst, w, h, x, y)
      GCPtr	pGC;
      PixmapPtr	pBitMap;
***************
*** 1989,1995 ****
   *
   *-----------------------------------------------------------------------
   */
! void
  miBSClearToBackground(pWin, x, y, w, h, generateExposures)
      WindowPtr	  	pWin;
      int	    	  	x;
--- 1987,1993 ----
   *
   *-----------------------------------------------------------------------
   */
! static void
  miBSClearToBackground(pWin, x, y, w, h, generateExposures)
      WindowPtr	  	pWin;
      int	    	  	x;
***************
*** 2100,2106 ****
  		gcvalues[3] = ts_y_origin;
  		gcmask |= GCTileStipXOrigin|GCTileStipYOrigin;
  		DoChangeGC(pGC, gcmask, gcvalues, TRUE);
! 		ValidateGC(pBackingStore->pBackingPixmap, pGC);
      
  		/*
  		 * Figure out the array of rectangles to fill and fill them with
--- 2098,2104 ----
  		gcvalues[3] = ts_y_origin;
  		gcmask |= GCTileStipXOrigin|GCTileStipYOrigin;
  		DoChangeGC(pGC, gcmask, gcvalues, TRUE);
! 		ValidateGC((DrawablePtr)pBackingStore->pBackingPixmap, pGC);
      
  		/*
  		 * Figure out the array of rectangles to fill and fill them with
***************
*** 2192,2198 ****
  	pBackingStore->pBackingPixmap = NullPixmap;
  	pBackingStore->pSavedRegion = (* pScreen->RegionCreate)(NullBox, 1);
  	pBackingStore->pgcBlt = CreateGC((DrawablePtr)pWin,
! 					 GCGraphicsExposures, &false,
  					 &status);
  	pBackingStore->SaveAreas = SaveAreas;
  	pBackingStore->RestoreAreas = RestoreAreas;
--- 2190,2196 ----
  	pBackingStore->pBackingPixmap = NullPixmap;
  	pBackingStore->pSavedRegion = (* pScreen->RegionCreate)(NullBox, 1);
  	pBackingStore->pgcBlt = CreateGC((DrawablePtr)pWin,
! 					 (BITS32)GCGraphicsExposures, &false,
  					 &status);
  	pBackingStore->SaveAreas = SaveAreas;
  	pBackingStore->RestoreAreas = RestoreAreas;
***************
*** 2355,2361 ****
  					 pWin->clientWinSize.height, 
  					 pWin->drawable.depth);
  
! 	ValidateGC(pNewPixmap, pGC);
  
  	if ((* pScreen->RegionNotEmpty) (pBackingStore->pSavedRegion))
  	{
--- 2353,2359 ----
  					 pWin->clientWinSize.height, 
  					 pWin->drawable.depth);
  
! 	ValidateGC((DrawablePtr)pNewPixmap, pGC);
  
  	if ((* pScreen->RegionNotEmpty) (pBackingStore->pSavedRegion))
  	{
***************
*** 3241,3247 ****
  
      if (pBackingStore->pBackingPixmap->drawable.serialNumber
          != pBackingGC->serialNumber)
! 	ValidateGC(pBackingStore->pBackingPixmap, pBackingGC);
  
      if (pBackingGC->clientClip == 0) {
      	ErrorF ("backing store clip list nil");
--- 3239,3245 ----
  
      if (pBackingStore->pBackingPixmap->drawable.serialNumber
          != pBackingGC->serialNumber)
! 	ValidateGC((DrawablePtr)pBackingStore->pBackingPixmap, pBackingGC);
  
      if (pBackingGC->clientClip == 0) {
      	ErrorF ("backing store clip list nil");
***************
*** 3249,3254 ****
--- 3247,3253 ----
  }
  
  
+ static void
  miDestroyBSPixmap (pWin)
      WindowPtr	pWin;
  {
***************
*** 3267,3272 ****
--- 3266,3272 ----
      pWin->drawable.serialNumber = NEXT_SERIAL_NUMBER;
  }
  
+ static void
  miTileVirtualBS (pWin)
      WindowPtr	pWin;
  {
***************
*** 3295,3300 ****
--- 3295,3301 ----
  static struct { int w, h; } failedRecord[FAILEDSIZE];
  static int failedIndex;
  
+ static void
  miCreateBSPixmap (pWin)
      WindowPtr	pWin;
  {

