Return-Path: harvard!adelie!ora!venture!adrian@eddie.mit.edu
Received: by EXPO.LCS.MIT.EDU; Mon, 9 May 88 23:05:29 EDT
Received: by EDDIE.MIT.EDU with sendmail-5.45/4.7 id <AA01572@EDDIE.MIT.EDU>; Mon, 9 May 88 23:01:05 EDT
Received: by harvard.harvard.edu; Mon, 9 May 88 18:12:10 EDT
Received: by adelie.Adelie.COM (1.2/smail2.2/02-18-87)
Message-Id: <8805092135.AA12479@adelie.Adelie.COM>
From: harvard!ora!venture!adrian@eddie.mit.edu
Date: Mon, 9 May 88 17:35:37 edt
To: xbugs@expo.lcs.mit.edu

### bug number:   479
### area:         server
### severity:     very high
### comments:     


VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/110C running in mono

CLIENT OPERATING SYSTEM:
	SunOS 3.2

DISPLAY:
	Color (but running in mono)

SYNOPSIS:
	This program crashes the server, without any comment.
	It worked until I added the XSetDashes call.

DESCRIPTION:

REPEAT-BY:

#include <X11/Xlib.h>
#include <X11/Xutil.h>
/* #include <X11/Xatom.h> */
/* #include <X11/Xos.h> */

#include <stdio.h>
/* #include <math.h> */

#include "bitmaps/icon_bitmap"
#define BITMAPDEPTH 1

/* These are used in every subroutine, so it saves arguments to declare them global. 
 * If there were additional source files, they would be declared extern there. */
Display *display;
int screen;

void main(argc, argv)
int argc;
char **argv;
	{
	Window win; 	
	unsigned int width, height, x, y; 	/* window size and position */
	unsigned int borderwidth = 4;	/* four pixels */
	unsigned int dwidth, dheight;
	unsigned int icon_width, icon_height;
	char *window_name = "basicwin";
	char *icon_name = "";
	Pixmap icon_pixmap;
	XSizeHints size_hints;
	XIconSize *size_list;
	int count;
	XEvent report;
	GC gc;
	XFontStruct *font_info;

	/* The following declarations are for XGetGeometry, but they are not
	 * used because only width and height declared above are needed */
	Window root;
	unsigned int border_width, depth;

	/* connect to X server */
	
	if ( (display=XOpenDisplay(NULL)) == NULL )
		{
		(void) fprintf( stderr, "Cannot connect to X server\n");
		exit( -1 );
		}

	/* get screen size from display structure macro */
	screen = DefaultScreen(display);
	dwidth = DisplayWidth(display, screen);
	dheight = DisplayHeight(display, screen);

	
	(void) printf("The current display has a width of %d pixels,\n",dwidth);
	(void) printf("and a height of %d pixels.\n",dheight); 

	/* place window */
	x = dwidth/3, y = dheight/3;

	/* size window with enough room for text */
	width = 350, height = dheight/4;  	

	/* create opaque window */
	win = XCreateSimpleWindow(display, RootWindow(display,screen), x, y, width, height, borderwidth, BlackPixel(display,screen), WhitePixel(display,screen));


	/* Get available icon sizes from Window manager */
	if (XGetIconSizes(display, RootWindow(display,screen), &size_list, &count) == 0)
		{
		(void) fprintf( stderr, "Window manager didn't set icon sizes - using default.\n");
		icon_width = 40;
		icon_height = 40;
		}
	else
		{
		icon_width = size_list->min_width;
		icon_height = size_list->min_height;
		}

	/* Create pixmap of depth 1 (bitmap) for icon */
	icon_pixmap = XCreateBitmapFromData(display, win, icon_bitmap_bits, icon_width, icon_height);

	/* Set resize hints */
	size_hints.flags = PPosition | PSize | PMinSize;
	size_hints.x = x;
	size_hints.y = y;
	size_hints.width = width;
	size_hints.height = height;
	size_hints.min_width = 350;
	size_hints.min_height = 100;

	/* set Properties for window manager (always before mapping) */
	XSetStandardProperties(display, win, window_name, icon_name, 
			icon_pixmap, argv, argc, &size_hints);

	/* Select event types wanted */
	XSelectInput(display, win, ExposureMask | KeyPressMask | ButtonPressMask);

	load_font(&font_info);

	/* create GC for text and drawing */
	getGCs(win, &gc, font_info);

	/* Display window */
	XMapWindow(display, win); 

	/* get events, use first to display text and graphics */
	while (1)  
	{
		XNextEvent(display, &report);
		if (report.type == Expose)
		{
			/* get window size */
			XGetGeometry(display, win, &root, &x, &y, &width, &height, &border_width, &depth);

			/* place text in window */
			place_text(win, gc, font_info, width, height); 

			/* place graphics in window, */
			place_graphics(win, gc, width, height);
		}
		else break;
	}

	/* unload font */
	XUnloadFont(display, font_info->fid);
	XFreeGC(display, gc);
}

getGCs(win, gc, font_info)
Window win;
GC *gc;
XFontStruct *font_info;
{
	unsigned long valuemask = 0; /* ignore XGCvalues and use defaults */
	XGCValues *values = NULL;
	unsigned int line_width = 12;
	int line_style = LineOnOffDash;
	int cap_style = CapRound;
	int join_style = JoinRound;
	int dash_offset = 0;
	static char dash_list[] = {24,8};
	int list_length = 2;

	/* Create default Graphics Context */
	*gc = XCreateGC(display, win, valuemask, values);

	/* specify font */
	XSetFont(display, *gc, font_info->fid);

	/* specify black foreground since default is white on white */
	XSetForeground(display, *gc, BlackPixel(display,screen));

	/* set line attributes */
	XSetLineAttributes(display, *gc, line_width, line_style, cap_style, join_style);

	/* set dashes to be line_width in length */
	XSetDashes(display, gc, dash_offset, dash_list, list_length);
}

load_font(font_info)
XFontStruct **font_info;
{
	char *fontname = "9x15";  

 	/* Access font */
	if ((*font_info = XLoadQueryFont(display,fontname)) == NULL)
		{
		(void) fprintf( stderr, "Basic: Cannot open 9x15 font\n");
		exit( -1 );
		}
}

place_text(win, gc, font_info, win_width, win_height)
Window win;
GC gc;
XFontStruct *font_info;
unsigned int win_width, win_height;
	{
	int y = 20; 	/* offset from corner of window*/
	char *string1 = "Hi! I'm a window, who are you?";
	char *string2 = "To terminate program; Press any key";
	char *string3 = "or button while in this window.";
	int len1, len2, len3;
	int width1, width2, width3;

	/* need length for XText */
	len1 = strlen(string1);
	len2 = strlen(string2);
	len3 = strlen(string3);

	/* get string widths for centering */
	width1 = XTextWidth(font_info, string1, len1);
	width2 = XTextWidth(font_info, string2, len2);
	width3 = XTextWidth(font_info, string3, len3);

	/* output text, centered on each line */
	XDrawString(display,win,gc,(win_width - width1)/2,y,string1,len1); 
	XDrawString(display,win,gc,(win_width - width2)/2, (int)(win_height - 35),string2,len2); 
	XDrawString(display,win,gc,(win_width - width3)/2, (int)(win_height - 15),string3,len3); 
	}


place_graphics(win, gc, window_width, window_height)
Window win;
GC gc;
unsigned int window_width, window_height;
{
	Drawable drawable;
	int x, y;
	int width, height;
	int angle1, angle2;

	height = window_height/3;
	width = window_height/3;
	angle1 = 0;
	angle2 = 360*64;
	drawable = win;
	x = window_width/2  - width/2;  /* center circle */
	y = window_height/2 - height/2;
	XDrawArc(display, drawable, gc, x, y, width, height, angle1, angle2);
}



