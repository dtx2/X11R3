Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Tue, 5 Jul 88 09:06:42 EDT
Date: Tue, 5 Jul 88 09:07 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: rotated pixmaps aren't needed in cfb anymore
To: xbugs@expo.lcs.mit.edu
Message-Id: <19880705130701.2.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   679
### area:         server
### severity:     low
### comments:     

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	any

DISPLAY:
	Sun color

WINDOW MANAGER:
	any

AREA:
	server

SYNOPSIS:
	rotated tiles and stipples aren't needed in cfb GCs

DESCRIPTION:
	ditto

REPEAT-BY:
	eyeball

FILES:
	server/ddx/cfb/cfb.h
	server/ddx/cfb/cfbgc.c
	server/ddx/cfb/cfbfillsp.c
	server/ddx/sun/sunBW2zoid.c

FIX:

*** /tmp/,RCSt1a00889	Mon Jul  4 12:19:28 1988
--- server/ddx/cfb/cfb.h	Sat Jun 18 14:47:57 1988
***************
*** 123,130 ****
--- 123,132 ----
      unsigned char       ropFillArea;    /*  == alu, rop, or ropOpStip */
      short		fExpose;	/* callexposure handling ? */
      short		freeCompClip;
+ #ifdef CFBROTPIX
      PixmapPtr		pRotatedTile;	/* tile/stipple  rotated to align with window */
      PixmapPtr		pRotatedStipple;/* and using offsets */
+ #endif
      RegionPtr		pAbsClientRegion;/* client region in screen coords */
      RegionPtr		pCompositeClip; /* FREE_CC or REPLACE_CC */
      } cfbPrivGC;


*** /tmp/,RCSt1a00948	Mon Jul  4 12:22:21 1988
--- server/ddx/cfb/cfbgc.c	Sat Jun 18 14:48:14 1988
***************
*** 36,43 ****
--- 36,45 ----
  #include "mistruct.h"
  
  #include "cfbmskbits.h"
+ #ifdef CFBROTPIX
  extern cfbXRotatePixmap();
  extern cfbYRotatePixmap();
+ #endif
  extern void mfbPushPixels();
  
  Bool
***************
*** 113,120 ****
--- 115,124 ----
  	    pPriv->rop = pGC->alu;
  	    pPriv->fExpose = TRUE;
  	    pGC->devPriv = (pointer) pPriv;
+ #ifdef CFBROTPIX
  	    pPriv->pRotatedTile = NullPixmap;
  	    pPriv->pRotatedStipple = NullPixmap;
+ #endif
  	    pPriv->pAbsClientRegion = (*pGC->pScreen->RegionCreate) (NULL, 1);
  	    pPriv->pCompositeClip = (*pGC->pScreen->RegionCreate) (NULL, 1);
  	    pPriv->freeCompClip = REPLACE_CC;
***************
*** 170,179 ****
--- 174,185 ----
      pQ->pNextGCInterest->pLastGCInterest = pGC->pLastGCInterest;
  
      pPriv = (cfbPrivGC *)(pGC->devPriv);
+ #ifdef CFBROTPIX
      if (pPriv->pRotatedTile)
  	cfbDestroyPixmap(pPriv->pRotatedTile);
      if (pPriv->pRotatedStipple)
  	cfbDestroyPixmap(pPriv->pRotatedStipple);
+ #endif
      if (pPriv->freeCompClip == FREE_CC && pPriv->pCompositeClip)
  	(*pGC->pScreen->RegionDestroy)(pPriv->pCompositeClip);
      if(pPriv->pAbsClientRegion)
***************
*** 206,213 ****
--- 212,221 ----
      WindowPtr   pWin;
      int         mask;		/* stateChanges */
      int         index;		/* used for stepping through bitfields */
+ #ifdef CFBROTPIX
      int         xrot, yrot;	/* rotations for tile and stipple pattern */
      Bool        fRotate = FALSE;/* True if rotated pixmaps are needed */
+ #endif
      int         new_line, new_text, new_fillspans;
      /* flags for changing the proc vector */
      cfbPrivGCPtr devPriv;
***************
*** 382,389 ****
--- 390,399 ----
      }
      else {
  */
+ #ifdef CFBROTPIX
  	yrot = 0;
  	xrot = 0;
+ #endif
  /*
      }
  */
***************
*** 395,402 ****
  
      mask = changes;
      while (mask) {
! 	index = ffs(mask) - 1;
! 	mask &= ~(index = (1 << index));
  
  	/*
  	 * this switch acculmulates a list of which procedures might have
--- 405,412 ----
  
      mask = changes;
      while (mask) {
! 	index = lowbit (mask);
! 	mask &= ~index;
  
  	/*
  	 * this switch acculmulates a list of which procedures might have
***************
*** 434,440 ****
--- 444,452 ----
  	    if (pGC->tile == (PixmapPtr) NULL)
  		break;
  	    cfbPadPixmap(pGC->tile);
+ #ifdef CFBROTPIX
  	    fRotate = TRUE;
+ #endif
  	    new_fillspans = TRUE;
  	    break;
  
***************
*** 442,451 ****
--- 454,466 ----
  	    if (pGC->stipple == (PixmapPtr) NULL)
  		break;
  	    cfbPadPixmap(pGC->stipple);
+ #ifdef CFBROTPIX
  	    fRotate = TRUE;
+ #endif
  	    new_fillspans = TRUE;
  	    break;
  
+ #ifdef CFBROTPIX
  	case GCTileStipXOrigin:
  	    fRotate = TRUE;
  	    break;
***************
*** 453,458 ****
--- 468,474 ----
  	case GCTileStipYOrigin:
  	    fRotate = TRUE;
  	    break;
+ #endif
  
  	case GCFont:
  	    new_text = TRUE;
***************
*** 570,575 ****
--- 586,592 ----
  	}
      } /* end of new_fillspans */
  
+ #ifdef CFBROTPIX
      if (xrot || yrot || fRotate) {
  	/*
  	 * First destroy any previously-rotated tile/stipple
***************
*** 610,615 ****
--- 627,633 ----
  		cfbYRotatePixmap(devPriv->pRotatedStipple, yrot);
  	}
      }
+ #endif
  }
  
  
*** /tmp/,RCSt1a00917	Mon Jul  4 12:20:39 1988
--- server/ddx/cfb/cfbfillsp.c	Sat Jun 18 14:48:28 1988
***************
*** 287,299 ****
  
      if (pGC->fillStyle == FillTiled)
      {
! 	pTile = ((cfbPrivGC *)(pGC->devPriv))->pRotatedTile;
  	tlwidth = pTile->devKind >> 2;
  	rop = pGC->alu;
      }
      else
      {
! 	pTile = ((cfbPrivGC *)(pGC->devPriv))->pRotatedStipple;
  	tlwidth = pTile->devKind >> 2;
  	rop = pGC->alu;
      }
--- 287,299 ----
  
      if (pGC->fillStyle == FillTiled)
      {
! 	pTile = pGC->tile;
  	tlwidth = pTile->devKind >> 2;
  	rop = pGC->alu;
      }
      else
      {
! 	pTile = pGC->stipple;
  	tlwidth = pTile->devKind >> 2;
  	rop = pGC->alu;
      }
***************
*** 493,499 ****
       *		Words per scanline = stwidth
       *		Pointer to pixels = pStipple->devPrivate
       */
!     pStipple = ((cfbPrivGC *)(pGC->devPriv))->pRotatedStipple;
  
      if (pStipple->drawable.depth != 1) {
  	FatalError( "Stipple depth not equal to 1!\n" );
--- 493,499 ----
       *		Words per scanline = stwidth
       *		Pointer to pixels = pStipple->devPrivate
       */
!     pStipple = pGC->stipple;
  
      if (pStipple->drawable.depth != 1) {
  	FatalError( "Stipple depth not equal to 1!\n" );


*** /tmp/,RCSt1a00931	Mon Jul  4 12:21:13 1988
--- server/ddx/sun/sunBW2zoid.c	Sat Jun 18 14:49:02 1988
***************
*** 1,4 ****
! /* $Header: sunBW2zoid.c,v 4.1 87/09/10 18:25:11 sun Exp $ */
  /*-
   * sunBW2zoids.c --
   *	Functions for handling the sun BWTWO board for the zoids extension.
--- 1,4 ----
! /* $Header: sunBW2zoid.c,v 4.2 88/06/18 14:47:57 rws Exp $ */
  /*-
   * sunBW2zoids.c --
   *	Functions for handling the sun BWTWO board for the zoids extension.
***************
*** 647,653 ****
  
        case FillStippled:
          alu = privGC->rop; /* used reduced ROP */
! 	pTile = getMpr(privGC->pRotatedStipple);
  	pScratch = getSubregion(pDrawable,
  			sunFbData[pDrawable->pScreen->myNum].scratch_pr);
  	tileRegion(pScratch, pTile);
--- 647,653 ----
  
        case FillStippled:
          alu = privGC->rop; /* used reduced ROP */
! 	pTile = getMpr(pGC->stipple);
  	pScratch = getSubregion(pDrawable,
  			sunFbData[pDrawable->pScreen->myNum].scratch_pr);
  	tileRegion(pScratch, pTile);
***************
*** 655,661 ****
  	break;
  
        case FillTiled:
! 	pTile = getMpr(privGC->pRotatedTile);
  	pScratch = getSubregion(pDrawable,
  			sunFbData[pDrawable->pScreen->myNum].scratch_pr);
  	tileRegion(pScratch, pTile);
--- 655,661 ----
  	break;
  
        case FillTiled:
! 	pTile = getMpr(pGC->tile);
  	pScratch = getSubregion(pDrawable,
  			sunFbData[pDrawable->pScreen->myNum].scratch_pr);
  	tileRegion(pScratch, pTile);

