Return-Path: @XX.LCS.MIT.EDU,@relay.cs.net:scotthe%shark.gwd.tek.com@tektronix.tek.com
Received: by expo.lcs.mit.edu; Tue, 23 Aug 88 15:41:13 EDT
Received: from RELAY.CS.NET by XX.LCS.MIT.EDU with TCP/SMTP; Tue 23 Aug 88 15:40:21-EDT
Received: from relay2.cs.net by RELAY.CS.NET id ae18944; 23 Aug 88 15:22 EDT
Received: from tektronix.tek.com by RELAY.CS.NET id aa19214; 23 Aug 88 15:11 EDT
Received: from shark.GWD.TEK.COM by tektronix.TEK.COM (5.51/6.24)
	id AA08333; Tue, 23 Aug 88 10:57:04 PDT
Received: by shark.GWD.TEK.COM (5.16/6.24)
	id AA06000; Tue, 23 Aug 88 10:58:08 PDT
From: Scott Hennes <scotthe@shark.gwd.tek.com>
Message-Id: <8808231758.AA06000@shark.GWD.TEK.COM>
Date: Tue, 23 Aug 88 10:58:06 PDT
To: xbugs@expo.lcs.mit.edu
Cc: alt@shark.gwd.tek.com
Fcc: //shark/bd/X11/doc/bugtracking/xbugs_mail
Subject: X11 R2 bug report:miBSDoCopy has memory leak and incomplete event

### bug number:   903
### area:         server
### severity:     low
### comments:	  Please do not use this change.  A DDX change is forthcoming...


Scott Hennes
M.S. 61-277
Tektronix, Inc.
P.O. Box 1000
Wilsonville, OR
	 97070-1000

(503) 685-2144
tektronix!shark!scotthe

--------------------
VERSION:
	X11 release 2 with fixes 1-216 plus 260 applied

CLIENT MACHINE:
	Tektronix 4316

CLIENT OPERATING SYSTEM:
	UTEK 2.3 (== 4.2bsd kernel with some 4.3 utilities)

DISPLAY:
	Tektronix 4316

SYNOPSIS:
	Routine miBSDoCopy has a memory leak and does not completelly fill
	in the graphicsExposure event

DESCRIPTION:
	Area: server/ddx/mi/miBSDoCopy
	Files: (full pathname of files)

	Regions pointed to by pRgnExp and pRgnObs are not freed unless
	pRgnObs is empty.

	Graphic Exposure event does not have majorEvent or minorEvent
	filled in.

REPEAT-BY:
	Eyeball the code

        FIX:
*** /tmp/,RCSt1021218	Tue Aug 23 10:38:37 1988
--- gfbbstore.c	Mon Aug 22 14:24:28 1988
***************
*** 1177,1182
  		    ev->u.graphicsExposure.width = pBox->x2 - pBox->x1;
  		    ev->u.graphicsExposure.height = pBox->y2 - pBox->y1;
  		    ev->u.graphicsExposure.count = i - 1;
  		}
  		TryClientEvents(requestingClient, events, pRgnExp->numRects,
  				0, NoEventMask, 0);

--- 1177,1188 -----
  		    ev->u.graphicsExposure.width = pBox->x2 - pBox->x1;
  		    ev->u.graphicsExposure.height = pBox->y2 - pBox->y1;
  		    ev->u.graphicsExposure.count = i - 1;
+ 		    ev->u.graphicsExposure.majorEvent =
+ 			    ((xReq *)requestingClient->requestBuffer)->reqType;
+ 		    /* XXX will need support for extensions */
+ 		    ev->u.graphicsExposure.minorEvent = 0;
+ 
+ 
  		}
  		TryClientEvents(requestingClient, events, pRgnExp->numRects,
  				0, NoEventMask, 0);
***************
*** 1184,1189
  	    }
  	}
      }
      return (TRUE);
  }
  

--- 1190,1197 -----
  	    }
  	}
      }
+     (*pGC->pScreen->RegionDestroy) (pRgnExp);
+     (*pGC->pScreen->RegionDestroy) (pRgnObs);
      return (TRUE);
  }
  

