Return-Path: jta@bilbo.locus
Received: by expo.lcs.mit.edu; Fri, 15 Jul 88 18:45:27 EDT
Received: by devnet (1.0L/0.07) id AA30237; Fri, 15 Jul 88 13:09:34 PDT
Date: Fri, 15 Jul 88 13:09:34 PDT
From: Jim Anderson <jta@bilbo.locus>
Message-Id: <8807152009.AA30237@devnet>
To: xbugs:@bilbo.lcs.mit.edu

### bug number:   705
### area:         server
### severity:     very low
### comments:     

Please send just ONE bug report per mail message.  Reports should be sent to

                            xbugs@expo.lcs.mit.edu



VERSION:
	X11 release 2

CLIENT MACHINE:
	Prime EXL

CLIENT OPERATING SYSTEM:
	System 5 Release 3

DISPLAY:
	PC Xsight

SYNOPSIS:
	Unnecessary work.  (server/dix/dispatch.c)

DESCRIPTION:
	This bug report is purely a matter of opinion.

	The variable nextFreeClientID in dispatch.c is unnecessary and
	convolutes the code.  It seems unlikely that there will ever be
	so many client slots or that new client connections will ever be
	such a frequent occurrence as to make the allocation scheme
	implemented using this variable preferable to a simple linear
	search of the clients vector for a null entry.

	Also, a couple of loops in CloseDownClient that search the client
	vector for the client being closed can be replaced by:
		clients[client->index] = NullClient;

	A real bug, also fixed here, is that when growing the clients
	vector, way too much memory is allocated because a sizeof(ClientRec)
	should be sizeof(ClientPtr).

REPEAT-BY:

FIX:
*** dispatch.c	Tue Jul 12 13:13:49 1988
--- ../new/dispatch.c	Tue Jul 12 13:12:12 1988
***************
*** 101,107
  #endif
  
  /* buffers for clients. legal values below */
- static int nextFreeClientID=1;	   /* 0 is for the server */
  
  static int	nClients = 0;	/* number active clients */
  

--- 101,106 -----
  #endif
  
  /* buffers for clients. legal values below */
  
  static int	nClients = 0;	/* number active clients */
  
***************
*** 337,343
      ClientPtr		client;
      int			nready, nnew;
  
-     nextFreeClientID = 1;
      InitSelections();
      nClients = 0;
      clientsDoomed = FALSE;

--- 336,341 -----
      ClientPtr		client;
      int			nready, nnew;
  
      InitSelections();
      nClients = 0;
      clientsDoomed = FALSE;
***************
*** 3264,3270
      register ClientPtr client;
  {
      extern void DeleteClientFromAnySelections();
-     register int i;
        /* ungrab server if grabbing client dies */
      if (grabbingClient &&  (onlyClient == client))
      {

--- 3262,3267 -----
      register ClientPtr client;
  {
      extern void DeleteClientFromAnySelections();
        /* ungrab server if grabbing client dies */
      if (grabbingClient &&  (onlyClient == client))
      {
***************
*** 3279,3291
          client->clientGone = TRUE;  /* so events aren't sent to client */
          CloseDownConnection(client);
          FreeClientResources(client);
!         for (i=0; i<currentMaxClients; i++)
!             if (clients[i] == client)
! 	    {
! 		nextFreeClientID = i;
!                 clients[nextFreeClientID] = NullClient;
! 		break;
! 	    }
          xfree(client);
  #if defined(XSIGHT)
  	--nClients;

--- 3276,3282 -----
          client->clientGone = TRUE;  /* so events aren't sent to client */
          CloseDownConnection(client);
          FreeClientResources(client);
! 	clients[client->index] = NullClient;
          xfree(client);
  #if defined(XSIGHT)
  	--nClients;
***************
*** 3298,3310
      else if (client->clientGone)
      {
          FreeClientResources(client);
!         for (i=0; i<currentMaxClients; i++)
!             if (clients[i] == client)
! 	    {
! 		nextFreeClientID = i;
!                 clients[nextFreeClientID] = NullClient;
! 		break;
! 	    }
          xfree(client);
  	--nClients;
      }

--- 3289,3295 -----
      else if (client->clientGone)
      {
          FreeClientResources(client);
! 	clients[client->index] = NullClient;
          xfree(client);
  	--nClients;
      }
***************
*** 3358,3364
  	    && (client->clientGone))
  	{
              FreeClientResources(client);
-             nextFreeClientID = i;
  	    xfree(client);
  	    clients[i] = NullClient;
  	}

--- 3343,3348 -----
  	    && (client->clientGone))
  	{
              FreeClientResources(client);
  	    xfree(client);
  	    clients[i] = NullClient;
  	}
***************
*** 3378,3403
      int i;
      ClientPtr client;
  
!     if (nextFreeClientID >= currentMaxClients)
!         nextFreeClientID = 1;
!     if (!clients[nextFreeClientID])
!     {
! 	i = nextFreeClientID;
! 	nextFreeClientID++;
!     }
!     else
!     {
! 	i = 1;
! 	while ((i<currentMaxClients) && (clients[i]))
!             i++;
!         if (i < currentMaxClients)
! 	    nextFreeClientID = i;
! 	else
!         {
! 	    clients = (ClientPtr *)xrealloc(clients,
! 					    i * sizeof(ClientRec));
! 	    currentMaxClients++;
! 	}
      }
      clients[i] = client =  (ClientPtr)xalloc(sizeof(ClientRec));
      client->index = i;

--- 3362,3372 -----
      int i;
      ClientPtr client;
  
!     for (i=1; i<currentMaxClients; i++)
! 	if (clients[i] == NullClient) break;
!     if (i >= currentMaxClients) {
! 	clients = (ClientPtr *)xrealloc(clients, (i+1) * sizeof(ClientPtr));
! 	currentMaxClients = i+1;
      }
      clients[i] = client =  (ClientPtr)xalloc(sizeof(ClientRec));
      client->index = i;

