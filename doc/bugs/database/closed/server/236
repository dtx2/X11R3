Return-Path: sandra%defun@cs.utah.edu
Received: by expo.lcs.mit.edu; Fri, 23 Sep 88 17:50:20 EDT
Received: by cs.utah.edu (5.54/utah-2.0-cs)
	id AA07237; Fri, 23 Sep 88 15:50:26 MDT
Received: by defun.utah.edu (5.54/utah-2.0-leaf)
	id AA03143; Fri, 23 Sep 88 15:50:22 MDT
From: sandra%defun@cs.utah.edu (Sandra J Loosemore)
Message-Id: <8809232150.AA03143@defun.utah.edu>
Date: Fri, 23 Sep 88 15:50:21 MDT
Subject: extra exposures when shrinking a window
To: xbugs@expo.lcs.mit.edu

### bug number:   1003
### area:         server
### severity:     low
### comments:     

I appear to have found a bug in the X server, running on an HP 9000
series workstation.  Our local maintainer is at a loss to explain this
and suggested I send a description of the problem to the Xbugs mailing
list.

When I shrink a window, I'm getting two expose events on the window
and each of the window's descendants.  I can't understand why the
server would think that any of child windows would have to be redrawn
at all.  It happens even when none of the children are anywhere near
the part of the parent window that is being clipped away.

Here is a test program using CLX that demonstrates the behavior.  The
parent is window 0; it contains two subwindows and one of those
contains two more children.  Pressing button 1 shrinks window 0 and
button 3 makes it stop.

(defun test (host)
    (let* ((display  (xlib:open-display host))
	   (screen   (xlib:display-default-screen display))
	   (black    (xlib:screen-black-pixel screen))
	   (white    (xlib:screen-white-pixel screen))
	   (window0  (xlib:create-window :parent (xlib:screen-root screen)
					 :x 0 :y 0 :width 200 :height 100
					 :event-mask '(:exposure :button-press)
					 :background white
					 :border black
					 :border-width 1))
	   (window1  (xlib:create-window :parent window0
					 :x 5 :y 50 :width 40 :height 45
					 :event-mask '(:exposure)
					 :background white
					 :border black
					 :border-width 1))
	   (window2  (xlib:create-window :parent window0
					 :x 50 :y 5 :width 90 :height 90
					 :event-mask '(:exposure)
					 :background white
					 :border black
					 :border-width 1))
	   (window3  (xlib:create-window :parent window2
					 :x 5 :y 5 :width 25 :height 25
					 :event-mask '(:exposure)
					 :background white
					 :border black
					 :border-width 1))
	   (window4  (xlib:create-window :parent window2
					 :x 50 :y 50 :width 25 :height 25
					 :event-mask '(:exposure)
					 :background white
					 :border black
					 :border-width 1))
	   (windows  (list window0 window1 window2 window3 window4)))
	(dolist (w windows)
	    (xlib:map-window w))
	(unwind-protect
		(loop
		    (xlib:event-case (display :force-output-p t)
			(:button-press (code)
			 (case code
			     (1
			      (format t "Shrinking window 0...~%")
			      (setf (xlib:drawable-width window0) 150))
			     (3
			      (return-from test nil)))
			 t)
			(:exposure (window count)
			 (when (zerop count)
			     (format t "Got an expose event on window ~s.~%"
				     (position window windows
					       :test #'xlib:window-equal)))
			 t)))
	    (xlib:close-display display))))


And, here is a dribble file.  The first bunch of expose events are from
the windows being mapped, and then after the button is pressed to shrink
the window there are two more for each window:

;;; Dribble file #P"/u/sandra/lisp/thesis/test.log" started
T
> (test "")
Got an expose event on window 0.
Got an expose event on window 2.
Got an expose event on window 4.
Got an expose event on window 3.
Got an expose event on window 1.
Shrinking window 0...
Got an expose event on window 0.
Got an expose event on window 2.
Got an expose event on window 4.
Got an expose event on window 3.
Got an expose event on window 1.
Got an expose event on window 0.
Got an expose event on window 2.
Got an expose event on window 4.
Got an expose event on window 3.
Got an expose event on window 1.
NIL
> (dribble)


Any clues as to what is going on here?  All of those extra expose events
are really killing the performance of an application I'm working on.

-Sandra Loosemore (sandra@cs.utah.edu)
-------

