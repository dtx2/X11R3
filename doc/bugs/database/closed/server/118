Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Tue, 5 Jul 88 14:36:45 EDT
Date: Tue, 5 Jul 88 14:37 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: program-driven Zaphod broken on Sun
To: xbugs@expo.lcs.mit.edu
Message-Id: <19880705183701.7.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   688
### area:         server
### severity:     low
### comments:     

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	any

DISPLAY:
	Sun 3/60C (CG4)

WINDOW MANAGER:
	any

AREA:
	server

SYNOPSIS:
	warping between screens doesn't update display correctly

DESCRIPTION:
	On a Sun with a CG4, using WarpPointer to move the cursor
	between the monochrome and color screens causes the cursor
	to disappear but doesn't cause the other screen to appear.

REPEAT-BY:
	click on the root window when running wm, or use CLX
	to warp the pointer to the other screen

FILES:
	server/ddx/sun/sunCursor.c

FIX:

*** /tmp/,RCSt1a00246	Tue Jul  5 14:32:24 1988
--- server/ddx/sun/sunCursor.c	Tue Jul  5 14:31:43 1988
***************
*** 437,449 ****
      xEvent	  motion;
      extern int	sunSigIO;
  
-     if (currentCursor)
- 	sunDisplayCursor (pScreen, currentCursor);
-     
      pDev = LookupPointerDevice();
  
      pptrPriv = (PtrPrivPtr)pDev->devicePrivate;
  
      pptrPriv->pScreen = pScreen;
      pptrPriv->x = hotX;
      pptrPriv->y = hotY;
--- 437,457 ----
      xEvent	  motion;
      extern int	sunSigIO;
  
      pDev = LookupPointerDevice();
  
      pptrPriv = (PtrPrivPtr)pDev->devicePrivate;
  
+     if (pptrPriv->pScreen != pScreen)
+     {
+         if (currentCursor)
+ 	    sunRemoveCursor();
+ 	(*sunFbs[pptrPriv->pScreen->myNum].EnterLeave) (pptrPriv->pScreen, 1);
+ 	(*sunFbs[pScreen->myNum].EnterLeave) (pScreen, 0);
+     }
+ 
+     if (currentCursor)
+ 	sunDisplayCursor (pScreen, currentCursor);
+     
      pptrPriv->pScreen = pScreen;
      pptrPriv->x = hotX;
      pptrPriv->y = hotY;
***************
*** 524,530 ****
      currentCursor = pCursor;
      ((CrPrivPtr)pCursor->devPriv[pScreen->myNum])->state = CR_OUT;
      isItTimeToYield++;
! 
      pDev = LookupPointerDevice();
  
      if (pScreen != ((PtrPrivPtr)pDev->devicePrivate)->pScreen) {
--- 532,538 ----
      currentCursor = pCursor;
      ((CrPrivPtr)pCursor->devPriv[pScreen->myNum])->state = CR_OUT;
      isItTimeToYield++;
! #ifdef notdef
      pDev = LookupPointerDevice();
  
      if (pScreen != ((PtrPrivPtr)pDev->devicePrivate)->pScreen) {
***************
*** 531,537 ****
  	/*XXX*/
  	((PtrPrivPtr)pDev->devicePrivate)->pScreen = pScreen;
      }
! 
      return TRUE;
  }
  
--- 539,545 ----
  	/*XXX*/
  	((PtrPrivPtr)pDev->devicePrivate)->pScreen = pScreen;
      }
! #endif
      return TRUE;
  }
  


