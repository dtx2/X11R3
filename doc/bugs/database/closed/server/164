Return-Path: elsie!ado@ncifcrf.gov
Received: by expo.lcs.mit.edu; Sat, 6 Aug 88 13:35:53 EDT
Received: by fcs280s.ncifcrf.gov (4.0/NCIFCRF-1.0)
	id AA10082; Sat, 6 Aug 88 13:34:12 EDT
Received: by elsie.UUCP (5.51/4.7)
	id AA07440; Sat, 6 Aug 88 13:33:38 EDT
Date: Sat, 6 Aug 88 13:33:38 EDT
From: elsie!ado@ncifcrf.gov (Arthur David Olson)
Message-Id: <8808061733.AA07440@elsie.UUCP>
Subject: XSetClipMask sometimes doesn't
Apparently-To: xbugs@expo.lcs.mit.edu

### bug number:   831
### area:         server
### severity:     low
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/110-LC-8

CLIENT OPERATING SYSTEM:
	SunOS Release 4.0

DISPLAY:
	cgfour

SYNOPSIS:
	XSetClipMask sometimes doesn't.

DESCRIPTION:
	If you establish a clipping mask and do an XSetClipMask,
	then change the clipping mask and do another XSetClipMask to update,
	you're out of luck.

REPEAT-BY:
	Compile the following code, then note the difference between doing
	an
		a.out
	and an
		a.out +
		
	#include "X11/Xlib.h"

	#define WIDTH		256
	#define HEIGHT		256

	static XImage *		image;
	static XImage *		clipimage;
	static GC		gc;
	static GC		clipgc;
	static Display *	display;
	static int		screen;
	static Window		rootwindow;
	static Window		window;
	static Pixmap		clip_mask;
	static GC		tgc;

	main(argc, argv)
	int	argc;
	char *	argv[];
	{
		display = XOpenDisplay((char *) 0);
		XSynchronize(display, 1);
		screen = XDefaultScreen(display);
		rootwindow = XRootWindow(display, screen);
		window = XCreateSimpleWindow(display, rootwindow,
			0, 0, WIDTH, HEIGHT, 1, 1, 0);
		XMapWindow(display, window);
		sleep(10);

		gc = XDefaultGC(display, screen);
		clipgc = XCreateGC(display, window,
			(unsigned long) 0, (XGCValues *) 0);
		XCopyGC(display, gc, (unsigned long) ~0, clipgc);
		clip_mask = XCreatePixmap(display, window, WIDTH, HEIGHT, 1);
		tgc = XCreateGC(display, clip_mask, 0, (XGCValues *) 0);
		/*
		** Zero out the clip mask.
		*/
		XSetFunction(display, tgc, GXclear);
		XFillRectangle(display, clip_mask, tgc, 0, 0, WIDTH, HEIGHT);
		/*
		** Set bits in region 100-149.
		*/
		XSetFunction(display, tgc, GXset);
		XFillRectangle(display, clip_mask, tgc, 100, 100, 50, 50);
		/*
		** Set the clip mask.
		*/
		XSetClipMask(display, clipgc, clip_mask);
		/*
		** Fill the whole image; should result in region 100-149 filling.
		*/
		XFillRectangle(display, window, clipgc, 0, 0, WIDTH, HEIGHT);
		/*
		** Zero out the clip mask.
		*/
		XSetFunction(display, tgc, GXclear);
		XFillRectangle(display, clip_mask, tgc, 0, 0, WIDTH, HEIGHT);
		/*
		** Set bits in region 150-199.
		*/
		XSetFunction(display, tgc, GXset);
		XFillRectangle(display, clip_mask, tgc, 150, 150, 50, 50);
		/*
		** Again set the clip mask, possibly with a fakeout.
		*/
		if (argc > 1)
			XSetClipMask(display, clipgc, None);
		XSetClipMask(display, clipgc, clip_mask);
		/*
		** Fill the whole image; should result in region 150-199 filling.
		*/
		XFillRectangle(display, window, clipgc, 0, 0, WIDTH, HEIGHT);
		pause();
	}

FIX:
	One possibility is to change XSetClipMask to unconditionally execute
	the
		gc->values.clip_mask = mask;
		gc->dirty |= GCClipMask;
		gc->rects = 0;
		_XFlushGCCache(dpy, gc);
	code, recognizing the fact that even if the argument mask equals the
	cached mask it may be necessary to pass a request to the server
	(since the bits stored in the mask may have changed).

	Another possibility is to document the situation.  (It may already
	be documented; if so, I missed it.)
-- 
	ado@ncifcrf.gov			ADO is a trademark of Ampex.

