Return-Path: deboor%nutmeg.Berkeley.EDU@ginger.berkeley.edu
Received: from nutmeg.Berkeley.EDU by expo.lcs.mit.edu; Sun, 3 Apr 88 16:58:22 EDT
Received: by nutmeg.Berkeley.EDU (5.57/1.25)
	id AA01593; Sat, 2 Apr 88 14:23:48 PST
Date: Sat, 2 Apr 88 14:23:48 PST
From: deboor%nutmeg.Berkeley.EDU@ginger.berkeley.edu (Adam R de Boor)
Message-Id: <8804022223.AA01593@nutmeg.Berkeley.EDU>
To: x11%brie@sun.com, xbugs@expo.lcs.mit.edu
Subject: fix for bad interactions between bitGravity and winGravity

### bug number:   254
### area:         server
### severity:     
### assigned to:  rws
### status:       closed
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/160C or 3/75M

CLIENT OPERATING SYSTEM:
	SunOS 3.2 or Sprite (Berkeley experimental)

DISPLAY:
	cg2 or bw2

SYNOPSIS:
	 Windows with winGravity that are children of windows with
	 bitGravity != ForgetGravity lose big-time.

DESCRIPTION:
	 See previous bug report on this subject.

REPEAT-BY:
	Have a window with SouthWest bitGravity and a child with NorthEast
	winGravity, draw a pattern in the child, resize the parent and
	clear the child: things be hosed.

FIX:
	In an attempt to not change the WindowRec structure, this code uses
	an extra thing allocated and freed each time a resize is requested.
	The thing is pointed to by the 'nolongerused' field, which has become
	a union. This is gross. If you don't mind the grossness, we can leave
	it this way, but I'd prefer to place the 'struct gravity' at the end
	of the WindowRec. 
	These patches also are to properly implement Forget bitGravity in
	the backing-store implementation I sent you folks a few weeks ago.

*** /tmp/,RCSt1a01433	Sat Apr  2 14:04:10 1988
--- window.c	Fri Apr  1 13:38:14 1988
***************
*** 22,28
  
  ******************************************************************/
  
! /* $Header: window.c,v 1.201 88/03/29 13:48:13 deboor Exp $ */
  
  #include "X.h"
  #define NEED_REPLIES

--- 22,28 -----
  
  ******************************************************************/
  
! /* $Header: window.c,v 1.203 88/04/01 13:35:08 deboor Exp $ */
  
  #include "X.h"
  #define NEED_REPLIES
***************
*** 1669,1679
      }    
  }
  
! /* XXX need to retile border on each window with ParentRelative origin */
! static void
! ResizeChildrenWinSize(pWin, dx, dy, dw, dh)
!     WindowPtr pWin;
!     int dx, dy, dw, dh;
  {
      register WindowPtr pSib;
      short x, y;

--- 1669,1697 -----
      }    
  }
  
! /*-
!  *-----------------------------------------------------------------------
!  * Gravitate --
!  *	Move the children of the given window according to their respective
!  *	window gravities. Only modify the winSize and borderSize regions
!  *	and the absCorner structures for each window (and their inferiors).
!  *	The actual movement of the bits must come later.
!  *
!  * Results:
!  *	pWin's clipList with the newly-shifted children removed from it.
!  *
!  * Side Effects:
!  *	See above.
!  *
!  *-----------------------------------------------------------------------
!  */
! static RegionPtr
! Gravitate(pWin, dx, dy, dw, dh)
!     WindowPtr	  	pWin;
!     int	    	  	dx;
!     int		  	dy;
!     int		  	dw;
!     int		  	dh;
  {
      register WindowPtr	pSib;
      short	  	cwsx, cwsy;
***************
*** 1675,1686
      WindowPtr pWin;
      int dx, dy, dw, dh;
  {
!     register WindowPtr pSib;
!     short x, y;
!     register short cwsx, cwsy;
!     Bool unmap = FALSE;
!     register ScreenPtr pScreen;
!     xEvent event;
  
      pScreen = pWin->drawable.pScreen;
      pSib = pWin->firstChild;

--- 1693,1705 -----
      int		  	dw;
      int		  	dh;
  {
!     register WindowPtr	pSib;
!     short	  	cwsx, cwsy;
!     short   	  	x, y;
!     Bool    	  	unmap = FALSE;
!     xEvent  	  	event;
!     register ScreenPtr	pScreen;
!     register RegionPtr	pRegion;
  
      pScreen = pWin->drawable.pScreen;
      pRegion = (* pScreen->RegionCreate)(NullBox, 1);
***************
*** 1683,1689
      xEvent event;
  
      pScreen = pWin->drawable.pScreen;
!     pSib = pWin->firstChild;
      x = pWin->absCorner.x;
      y = pWin->absCorner.y;
  

--- 1702,1715 -----
      register RegionPtr	pRegion;
  
      pScreen = pWin->drawable.pScreen;
!     pRegion = (* pScreen->RegionCreate)(NullBox, 1);
!     (* pScreen->RegionCopy)(pRegion, pWin->clipList);
! 
!     if (!dw && !dh)
!     {
! 	return (pRegion);
!     }
! 
      x = pWin->absCorner.x;
      y = pWin->absCorner.y;
  	
***************
*** 1686,1693
      pSib = pWin->firstChild;
      x = pWin->absCorner.x;
      y = pWin->absCorner.y;
! 
!     while (pSib) 
      {
  	cwsx = pSib->clientWinSize.x;
  	cwsy = pSib->clientWinSize.y;

--- 1712,1719 -----
  
      x = pWin->absCorner.x;
      y = pWin->absCorner.y;
! 	
!     for (pSib = pWin->firstChild; pSib != NullWindow; pSib = pSib->nextSib)
      {
  	cwsx = pSib->clientWinSize.x;
  	cwsy = pSib->clientWinSize.y;
***************
*** 1691,1749
      {
  	cwsx = pSib->clientWinSize.x;
  	cwsy = pSib->clientWinSize.y;
!         if (dw || dh)
!         {
! 	    switch (pSib->winGravity)
! 	    {
! 	       case UnmapGravity: 
!                     unmap = TRUE;
! 	       case NorthWestGravity: 
! 		    break;
!                case NorthGravity:  
!                    cwsx += dw/2;
! 		   break;
!                case NorthEastGravity:    
! 		   cwsx += dw;	     
! 		   break;
!                case WestGravity:         
!                    cwsy += dh/2;
!                    break;
!                case CenterGravity:    
!                    cwsx += dw/2;
! 		   cwsy += dh/2;
!                    break;
!                case EastGravity:         
!                    cwsx += dw;
! 		   cwsy += dh/2;
!                    break;
!                case SouthWestGravity:    
! 		   cwsy += dh;
!                    break;
!                case SouthGravity:        
!                    cwsx += dw/2;
! 		   cwsy += dh;
!                    break;
!                case SouthEastGravity:    
!                    cwsx += dw;
! 		   cwsy += dh;
! 		   break;
!                case StaticGravity:
! 		   cwsx -= dx;
! 		   cwsy -= dy;
! 		   break;
! 	       default:
!                    break;
! 	    }
! 	    if (cwsx != pSib->clientWinSize.x || cwsy != pSib->clientWinSize.y)
! 	    {
! 		event.u.u.type = GravityNotify;
! 		event.u.gravity.window = pSib->wid;
! 		event.u.gravity.x = cwsx - pSib->borderWidth;
! 		event.u.gravity.y = cwsy - pSib->borderWidth;
! 		DeliverEvents (pSib, &event, 1, NullWindow);
! 		pSib->clientWinSize.x = cwsx;
! 		pSib->clientWinSize.y = cwsy;
! 	    }
  	}
  
  	pSib->oldAbsCorner.x = pSib->absCorner.x;

--- 1717,1765 -----
      {
  	cwsx = pSib->clientWinSize.x;
  	cwsy = pSib->clientWinSize.y;
! 	
! 	pSib->extra.gravity = (struct gravity *)Xalloc(sizeof(struct gravity));
! 
! 	switch (pSib->winGravity)
! 	{
! 	    case UnmapGravity: 
! 		unmap = TRUE;
! 	    case NorthWestGravity: 
! 		break;
! 	    case NorthGravity:  
! 		cwsx += dw/2;
! 		break;
! 	    case NorthEastGravity:    
! 		cwsx += dw;	     
! 		break;
! 	    case WestGravity:         
! 		cwsy += dh/2;
! 		break;
! 	    case CenterGravity:    
! 		cwsx += dw/2;
! 		cwsy += dh/2;
! 		break;
! 	    case EastGravity:         
! 		cwsx += dw;
! 		cwsy += dh/2;
! 		break;
! 	    case SouthWestGravity:    
! 		cwsy += dh;
! 		break;
! 	    case SouthGravity:        
! 		cwsx += dw/2;
! 		cwsy += dh;
! 		break;
! 	    case SouthEastGravity:    
! 		cwsx += dw;
! 		cwsy += dh;
! 		break;
! 	    case StaticGravity:
! 		cwsx -= dx;
! 		cwsy -= dy;
! 		break;
! 	    default:
! 		break;
  	}
  	if (cwsx != pSib->clientWinSize.x || cwsy != pSib->clientWinSize.y)
  	{
***************
*** 1745,1750
  		pSib->clientWinSize.y = cwsy;
  	    }
  	}
  
  	pSib->oldAbsCorner.x = pSib->absCorner.x;
  	pSib->oldAbsCorner.y = pSib->absCorner.y;

--- 1761,1776 -----
  	    default:
  		break;
  	}
+ 	if (cwsx != pSib->clientWinSize.x || cwsy != pSib->clientWinSize.y)
+ 	{
+ 	    event.u.u.type = GravityNotify;
+ 	    event.u.gravity.window = pSib->wid;
+ 	    event.u.gravity.x = cwsx - pSib->borderWidth;
+ 	    event.u.gravity.y = cwsy - pSib->borderWidth;
+ 	    DeliverEvents (pSib, &event, 1, NullWindow);
+ 	    pSib->clientWinSize.x = cwsx;
+ 	    pSib->clientWinSize.y = cwsy;
+ 	}
  
  	pSib->oldAbsCorner.x = pSib->absCorner.x;
  	pSib->oldAbsCorner.y = pSib->absCorner.y;
***************
*** 1748,1753
  
  	pSib->oldAbsCorner.x = pSib->absCorner.x;
  	pSib->oldAbsCorner.y = pSib->absCorner.y;
  	pSib->absCorner.x = x + cwsx;
  	pSib->absCorner.y = y + cwsy;
  

--- 1774,1780 -----
  
  	pSib->oldAbsCorner.x = pSib->absCorner.x;
  	pSib->oldAbsCorner.y = pSib->absCorner.y;
+ 	pSib->extra.gravity->oldAbsCorner = pSib->oldAbsCorner;
  	pSib->absCorner.x = x + cwsx;
  	pSib->absCorner.y = y + cwsy;
  
***************
*** 1764,1769
  		(int)pSib->clientWinSize.height + (pSib->borderWidth<<1));
  	else
  	    (* pScreen->RegionCopy)(pSib->borderSize, pSib->winSize);
  	(* pScreen->PositionWindow)(pSib, pSib->absCorner.x, pSib->absCorner.y);
  	pSib->marked = 1;
  	if (pSib->firstChild) 

--- 1791,1799 -----
  		(int)pSib->clientWinSize.height + (pSib->borderWidth<<1));
  	else
  	    (* pScreen->RegionCopy)(pSib->borderSize, pSib->winSize);
+ 
+ 	(* pScreen->Subtract)(pRegion, pRegion, pSib->borderSize);
+ 
  	(* pScreen->PositionWindow)(pSib, pSib->absCorner.x, pSib->absCorner.y);
  
  	/*
***************
*** 1765,1770
  	else
  	    (* pScreen->RegionCopy)(pSib->borderSize, pSib->winSize);
  	(* pScreen->PositionWindow)(pSib, pSib->absCorner.x, pSib->absCorner.y);
  	pSib->marked = 1;
  	if (pSib->firstChild) 
              ResizeChildrenWinSize(pSib, 0, 0, 0, 0);

--- 1795,1809 -----
  	(* pScreen->Subtract)(pRegion, pRegion, pSib->borderSize);
  
  	(* pScreen->PositionWindow)(pSib, pSib->absCorner.x, pSib->absCorner.y);
+ 
+ 	/*
+ 	 * Preserve the border clip for later copying.
+ 	 */
+ 	pSib->extra.gravity->oldBorderClip =
+ 	    (* pScreen->RegionCreate)(NullBox, 1);
+ 	(* pScreen->RegionCopy) (pSib->extra.gravity->oldBorderClip,
+ 				 pSib->borderClip);
+ 
  	pSib->marked = 1;
  	if (pSib->firstChild) 
              ResizeChildrenWinSize(pSib, 0, 0, 0, 0);
***************
*** 1768,1773
  	pSib->marked = 1;
  	if (pSib->firstChild) 
              ResizeChildrenWinSize(pSib, 0, 0, 0, 0);
          if (unmap)
  	{
              UnmapWindow(pSib, DONT_HANDLE_EXPOSURES, SEND_NOTIFICATION,	TRUE);

--- 1807,1813 -----
  	pSib->marked = 1;
  	if (pSib->firstChild) 
              ResizeChildrenWinSize(pSib, 0, 0, 0, 0);
+ 
          if (unmap)
  	{
              UnmapWindow(pSib, DONT_HANDLE_EXPOSURES, SEND_NOTIFICATION,	TRUE);
***************
*** 1773,1778
              UnmapWindow(pSib, DONT_HANDLE_EXPOSURES, SEND_NOTIFICATION,	TRUE);
  	    unmap = FALSE;
  	}
          pSib = pSib->nextSib;
      }
  }

--- 1813,1877 -----
              UnmapWindow(pSib, DONT_HANDLE_EXPOSURES, SEND_NOTIFICATION,	TRUE);
  	    unmap = FALSE;
  	}
+     }
+     return (pRegion);
+ }
+ 	
+ 
+ /*-
+  *-----------------------------------------------------------------------
+  * ResizeChildrenWinSize --
+  *	Adjust the winSize, borderSize and absCorner for all inferiors of
+  *	pWin to account for pWin having been reconfigured.
+  *
+  * Results:
+  *	None.
+  *
+  * Side Effects:
+  *	See above.
+  *
+  *-----------------------------------------------------------------------
+  */
+ 
+ /* XXX need to retile border on each window with ParentRelative origin */
+ static void
+ ResizeChildrenWinSize(pWin, dx, dy, dw, dh)
+     WindowPtr pWin;
+     int dx, dy, dw, dh;
+ {
+     register WindowPtr pSib;
+     short x, y;
+     register ScreenPtr pScreen;
+ 
+     pScreen = pWin->drawable.pScreen;
+     pSib = pWin->firstChild;
+     x = pWin->absCorner.x;
+     y = pWin->absCorner.y;
+ 
+     while (pSib) 
+     {
+ 	pSib->oldAbsCorner.x = pSib->absCorner.x;
+ 	pSib->oldAbsCorner.y = pSib->absCorner.y;
+ 	pSib->absCorner.x = x + pSib->clientWinSize.x;
+ 	pSib->absCorner.y = y + pSib->clientWinSize.y;
+ 
+ 	ClippedRegionFromBox(pWin, pSib->winSize,
+ 			     pSib->absCorner.x, pSib->absCorner.y,
+ 			     (int)pSib->clientWinSize.width,
+ 			     (int)pSib->clientWinSize.height);
+ 
+ 	if (pSib->borderWidth)
+ 	    ClippedRegionFromBox(pWin, pSib->borderSize,
+ 		pSib->absCorner.x - pSib->borderWidth,
+ 		pSib->absCorner.y - pSib->borderWidth,
+ 		(int)pSib->clientWinSize.width + (pSib->borderWidth<<1),
+ 		(int)pSib->clientWinSize.height + (pSib->borderWidth<<1));
+ 	else
+ 	    (* pScreen->RegionCopy)(pSib->borderSize, pSib->winSize);
+ 	(* pScreen->PositionWindow)(pSib, pSib->absCorner.x, pSib->absCorner.y);
+ 	pSib->marked = 1;
+ 	if (pSib->firstChild) 
+             ResizeChildrenWinSize(pSib, 0, 0, 0, 0);
          pSib = pSib->nextSib;
      }
  }
***************
*** 1777,1782
      }
  }
  
  static int
  ExposeAll(pWin, pScreen)
      WindowPtr pWin;

--- 1876,1896 -----
      }
  }
  
+ /*-
+  *-----------------------------------------------------------------------
+  * ExposeChild --
+  *	Merge whatever parts of pRegion intersect this window's exposed
+  *	portions into the window's 'exposed' region, since there's no
+  *	valid data in them.
+  *
+  * Results:
+  *	WT_WALKCHILDREN
+  *
+  * Side Effects:
+  *	The exposed region will be altered if any parts need to be.
+  *
+  *-----------------------------------------------------------------------
+  */
  static int
  ExposeChild(pWin, pRegion)
      register WindowPtr	pWin;
***************
*** 1778,1783
  }
  
  static int
  ExposeAll(pWin, pScreen)
      WindowPtr pWin;
      ScreenPtr pScreen;

--- 1892,2017 -----
   *-----------------------------------------------------------------------
   */
  static int
+ ExposeChild(pWin, pRegion)
+     register WindowPtr	pWin;
+     register RegionPtr	pRegion;
+ {
+     register ScreenPtr	pScreen;
+     static RegionPtr	pExposed = (RegionPtr)NULL;
+ 
+     pScreen = pWin->drawable.pScreen;
+ 
+     if (pExposed == (RegionPtr)NULL)
+     {
+ 	pExposed = (* pScreen->RegionCreate)(NullBox, 1);
+     }
+     (* pScreen->Intersect) (pExposed, pRegion, pWin->clipList);
+     (* pScreen->Union) (pWin->exposed, pWin->exposed, pExposed);
+     return(WT_WALKCHILDREN);
+ }
+ 
+ /*-
+  *-----------------------------------------------------------------------
+  * MoveChildren --
+  *	Shift child windows around on the screen according to their
+  *	gravities. Uses the extra.oldBorderClip to actually do the
+  *	copy. Performs the moves from the top down to keep the clipping
+  *	correct. As it moves down the stack, it tracks what parts of the
+  *	screen it has altered and doesn't copy those areas of siblings.
+  *	Any area not copied is added to the window's exposed region, as
+  *	usual. This really usurps the function of ValidateTree, but what
+  *	can we do?
+  *	To be "correct", we should move each window in turn, then
+  *	call ValidateTree and DoObscures. Unfortunately, that would be
+  *	horrifically slow and icky, so we're just icky.
+  *
+  * Results:
+  *	None.
+  *
+  * Side Effects:
+  *	The childrens's bits are shifted.
+  *
+  *-----------------------------------------------------------------------
+  */
+ static void
+ MoveChildren(pWin)
+     WindowPtr	  	pWin;
+ {
+     register WindowPtr	pSib;
+     register ScreenPtr	pScreen;
+     register RegionPtr	pRegion;
+     register RegionPtr	pObscured;
+     register int	dx;
+     register int	dy;
+ 
+     pScreen = pWin->drawable.pScreen;
+     pRegion = (* pScreen->RegionCreate)(NullBox, 1);
+     pObscured = (* pScreen->RegionCreate)(NullBox, 1);
+     
+     for (pSib = pWin->firstChild; pSib != NullWindow; pSib = pSib->nextSib)
+     {
+ 	if (pSib->realized)
+ 	{
+ 	    /*
+ 	     * See if we've wiped out any of the data for this child by moving
+ 	     * previous children. If so, pObscured will contain those areas in
+ 	     * the child's old location that have been obliterated.
+ 	     */
+ 	    (* pScreen->Intersect) (pObscured, pSib->extra.gravity->oldBorderClip,
+ 				    pRegion);
+ 	    dx = pSib->absCorner.x - pSib->extra.gravity->oldAbsCorner.x;
+ 	    dy = pSib->absCorner.y - pSib->extra.gravity->oldAbsCorner.y;
+ 
+ 	    if (dx || dy)
+ 	    {
+ 		/*
+ 		 * Remove any obscured areas from what we're going to copy,
+ 		 * then copy the ok areas to their new location. CopyWindow
+ 		 * will translate oldBorderClip to the window's new place.
+ 		 */
+ 		(* pScreen->Subtract) (pSib->extra.gravity->oldBorderClip,
+ 					pSib->extra.gravity->oldBorderClip,
+ 					pObscured);
+ 
+ 		(* pSib->CopyWindow) (pSib, pSib->extra.gravity->oldAbsCorner,
+ 				      pSib->extra.gravity->oldBorderClip);
+ 	    }
+ 
+ 	    /*
+ 	     * If any parts of the window were obscured by our work, we have to
+ 	     * make sure the client knows to expose that area. Note this is one
+ 	     * place where backing-store breaks down, since there's no chance
+ 	     * to capture the bits we wiped out...
+ 	     */
+ 	    if ((* pScreen->RegionNotEmpty) (pObscured))
+ 	    {
+ 		(* pScreen->TranslateRegion) (pObscured, dx, dy);
+ 		TraverseTree(pSib, ExposeChild, pObscured);
+ 	    }
+ 
+ 	    /*
+ 	     * Any bits we actually managed to copy needn't be refreshed by the
+ 	     * client, so remove them from the exposed region of the child.
+ 	     */
+ 	    (* pScreen->Subtract) (pSib->exposed, pSib->exposed,
+ 				   pSib->extra.gravity->oldBorderClip);
+ 
+ 	    /*
+ 	     * Note another area we've obliterated.
+ 	     */
+ 	    (* pScreen->Union) (pRegion, pRegion,
+ 				pSib->extra.gravity->oldBorderClip);
+ 
+ 	}
+ 	(* pScreen->RegionDestroy)(pSib->extra.gravity->oldBorderClip);
+ 	Xfree(pSib->extra.gravity);
+     }
+     (* pScreen->RegionDestroy) (pRegion);
+     (* pScreen->RegionDestroy) (pObscured);
+ }
+ 	    
+ 	    
+ static int
  ExposeAll(pWin, pScreen)
      WindowPtr pWin;
      ScreenPtr pScreen;
***************
*** 1795,1800
  
  
  
  static void
  SlideAndSizeWindow(pWin, x, y, w, h, pSib)
      WindowPtr pWin;

--- 2029,2047 -----
  
  
  
+ /*-
+  *-----------------------------------------------------------------------
+  * SlideAndSizeWindow --
+  *	Move and resize the given window, restacking it above pSib.
+  *
+  * Results:
+  *	None.
+  *
+  * Side Effects:
+  *	Of course.
+  *
+  *-----------------------------------------------------------------------
+  */
  static void
  SlideAndSizeWindow(pWin, x, y, w, h, pSib)
      register WindowPtr 	pWin;
***************
*** 1797,1806
  
  static void
  SlideAndSizeWindow(pWin, x, y, w, h, pSib)
!     WindowPtr pWin;
!     short x,y;
!     unsigned short w, h;
!     WindowPtr pSib;
  {
      WindowPtr pParent;
      Bool WasMapped = (Bool)(pWin->realized);

--- 2044,2055 -----
   */
  static void
  SlideAndSizeWindow(pWin, x, y, w, h, pSib)
!     register WindowPtr 	pWin;
!     short		x;
!     short		y;
!     unsigned short	w;
!     unsigned short	h;
!     WindowPtr		pSib;
  {
      WindowPtr	  	pParent;
      unsigned short	width;
***************
*** 1802,1821
      unsigned short w, h;
      WindowPtr pSib;
  {
!     WindowPtr pParent;
!     Bool WasMapped = (Bool)(pWin->realized);
!     unsigned short width = pWin->clientWinSize.width,
!                    height = pWin->clientWinSize.height;    
!     short oldx = pWin->absCorner.x,
!           oldy = pWin->absCorner.y;
!     int bw = pWin->borderWidth;
!     short dw, dh;
!     DDXPointRec oldpt;
!     RegionPtr oldRegion;
!     Bool anyMarked;
!     register ScreenPtr pScreen;
!     BoxPtr pBox;
!     WindowPtr pFirstChange;
  
      /* if this is a root window, can't be resized */
      if (!(pParent = pWin->parent)) 

--- 2051,2070 -----
      unsigned short	h;
      WindowPtr		pSib;
  {
!     WindowPtr	  	pParent;
!     unsigned short	width;
!     unsigned short	height;
!     short   	  	oldx;
!     short   	  	oldy;
!     int			bw;
!     DDXPointRec		oldPt;
!     RegionPtr		oldRegion;
!     Bool		anyMarked;
!     ScreenPtr		pScreen;
!     BoxPtr		pBox;
!     WindowPtr		pFirstChange;
!     int	    	  	dw;
!     int			dh;
  
      pParent = pWin->parent;
  
***************
*** 1817,1825
      BoxPtr pBox;
      WindowPtr pFirstChange;
  
!     /* if this is a root window, can't be resized */
!     if (!(pParent = pWin->parent)) 
!         return ;
  
      pScreen = pWin->drawable.pScreen;
      if (WasMapped) 

--- 2066,2072 -----
      int	    	  	dw;
      int			dh;
  
!     pParent = pWin->parent;
  
      if (pParent == NullWindow)
      {
***************
*** 1821,1826
      if (!(pParent = pWin->parent)) 
          return ;
  
      pScreen = pWin->drawable.pScreen;
      if (WasMapped) 
      {

--- 2068,2086 -----
  
      pParent = pWin->parent;
  
+     if (pParent == NullWindow)
+     {
+ 	/*
+ 	 * Can't reconfigure root window
+ 	 */
+ 	return;
+     }
+     width = pWin->clientWinSize.width;
+     height = pWin->clientWinSize.height;
+     oldx = pWin->absCorner.x;
+     oldy = pWin->absCorner.y;
+     bw = pWin->borderWidth;
+     anyMarked = FALSE;
      pScreen = pWin->drawable.pScreen;
  
      if (pWin->realized)
***************
*** 1822,1828
          return ;
  
      pScreen = pWin->drawable.pScreen;
!     if (WasMapped) 
      {
          if (pWin->bitGravity != ForgetGravity) {
              oldRegion = NotClippedByChildren(pWin);

--- 2082,2089 -----
      bw = pWin->borderWidth;
      anyMarked = FALSE;
      pScreen = pWin->drawable.pScreen;
! 
!     if (pWin->realized)
      {
  	pBox = (* pScreen->RegionExtents)(pWin->borderSize);
  	anyMarked = MarkSiblingsBelowMe(pWin, pBox);
***************
*** 1824,1833
      pScreen = pWin->drawable.pScreen;
      if (WasMapped) 
      {
!         if (pWin->bitGravity != ForgetGravity) {
!             oldRegion = NotClippedByChildren(pWin);
! 	}
!         pBox = (* pScreen->RegionExtents)(pWin->borderSize);
  	anyMarked = MarkSiblingsBelowMe(pWin, pBox);
      }
      pWin->clientWinSize.x = x + bw;

--- 2085,2091 -----
  
      if (pWin->realized)
      {
! 	pBox = (* pScreen->RegionExtents)(pWin->borderSize);
  	anyMarked = MarkSiblingsBelowMe(pWin, pBox);
      }
      pWin->clientWinSize.x = x + bw;
***************
*** 1834,1843
      pWin->clientWinSize.y = y + bw;
      pWin->clientWinSize.height = h;
      pWin->clientWinSize.width = w;
!     pWin->oldAbsCorner.x = oldx;
!     pWin->oldAbsCorner.y = oldy;
!     oldpt.x = oldx;
!     oldpt.y = oldy;
  
      x = pWin->absCorner.x = pParent->absCorner.x + x + bw;
      y = pWin->absCorner.y = pParent->absCorner.y + y + bw;

--- 2092,2098 -----
      pWin->clientWinSize.y = y + bw;
      pWin->clientWinSize.height = h;
      pWin->clientWinSize.width = w;
!     pWin->oldAbsCorner = pWin->absCorner;
  
      x = pWin->absCorner.x = pParent->absCorner.x + x + bw;
      y = pWin->absCorner.y = pParent->absCorner.y + y + bw;
***************
*** 1842,1851
      x = pWin->absCorner.x = pParent->absCorner.x + x + bw;
      y = pWin->absCorner.y = pParent->absCorner.y + y + bw;
  
!     ClippedRegionFromBox(pParent, pWin->winSize,
! 			 x, y, (int)w, (int)h);
! 
!     if (pWin->borderWidth)
  	ClippedRegionFromBox(pParent, pWin->borderSize,
  			     x - bw, y - bw, (int)w + (bw<<1), (int)h + (bw<<1));
      else

--- 2097,2105 -----
      x = pWin->absCorner.x = pParent->absCorner.x + x + bw;
      y = pWin->absCorner.y = pParent->absCorner.y + y + bw;
  
!     ClippedRegionFromBox(pParent, pWin->winSize, x, y, (int)w, (int)h);
!     if (bw)
!     {
  	ClippedRegionFromBox(pParent, pWin->borderSize,
  			     x - bw, y - bw,
  			     (int)w + (bw << 1), (int)h + (bw << 1));
***************
*** 1847,1853
  
      if (pWin->borderWidth)
  	ClippedRegionFromBox(pParent, pWin->borderSize,
! 			     x - bw, y - bw, (int)w + (bw<<1), (int)h + (bw<<1));
      else
          (* pScreen->RegionCopy)(pWin->borderSize, pWin->winSize);
  

--- 2101,2109 -----
      if (bw)
      {
  	ClippedRegionFromBox(pParent, pWin->borderSize,
! 			     x - bw, y - bw,
! 			     (int)w + (bw << 1), (int)h + (bw << 1));
!     }
      else
      {
  	(* pScreen->RegionCopy)(pWin->borderSize, pWin->winSize);
***************
*** 1849,1855
  	ClippedRegionFromBox(pParent, pWin->borderSize,
  			     x - bw, y - bw, (int)w + (bw<<1), (int)h + (bw<<1));
      else
!         (* pScreen->RegionCopy)(pWin->borderSize, pWin->winSize);
  
      dw = (int)w - (int)width;
      dh = (int)h - (int)height;

--- 2105,2113 -----
  			     (int)w + (bw << 1), (int)h + (bw << 1));
      }
      else
!     {
! 	(* pScreen->RegionCopy)(pWin->borderSize, pWin->winSize);
!     }
  
      dw = (int)w - (int)width;
      dh = (int)h - (int)height;
***************
*** 1853,1859
  
      dw = (int)w - (int)width;
      dh = (int)h - (int)height;
-     ResizeChildrenWinSize(pWin, x - oldx, y - oldy, dw, dh);
  
      /* let the hardware adjust background and border pixmaps, if any */
      (* pScreen->PositionWindow)(pWin, pWin->absCorner.x, pWin->absCorner.y);

--- 2111,2116 -----
  
      dw = (int)w - (int)width;
      dh = (int)h - (int)height;
  
      (* pScreen->PositionWindow)(pWin, x, y);
  
***************
*** 1855,1862
      dh = (int)h - (int)height;
      ResizeChildrenWinSize(pWin, x - oldx, y - oldy, dw, dh);
  
!     /* let the hardware adjust background and border pixmaps, if any */
!     (* pScreen->PositionWindow)(pWin, pWin->absCorner.x, pWin->absCorner.y);
  
      pFirstChange = MoveWindowInStack(pWin, pSib);
  

--- 2112,2118 -----
      dw = (int)w - (int)width;
      dh = (int)h - (int)height;
  
!     (* pScreen->PositionWindow)(pWin, x, y);
  
      pFirstChange = MoveWindowInStack(pWin, pSib);
      if (pWin->realized)
***************
*** 1859,1866
      (* pScreen->PositionWindow)(pWin, pWin->absCorner.x, pWin->absCorner.y);
  
      pFirstChange = MoveWindowInStack(pWin, pSib);
! 
!     if (WasMapped) 
      {
          RegionPtr pRegion;
  

--- 2115,2121 -----
      (* pScreen->PositionWindow)(pWin, x, y);
  
      pFirstChange = MoveWindowInStack(pWin, pSib);
!     if (pWin->realized)
      {
  #ifdef DO_SAVE_UNDERS
  	if (DO_SAVE_UNDERS(pWin))
***************
*** 1862,1870
  
      if (WasMapped) 
      {
-         RegionPtr pRegion;
- 
- 	anyMarked = MarkSiblingsBelowMe(pFirstChange, pBox) || anyMarked;
  #ifdef DO_SAVE_UNDERS
  	if (DO_SAVE_UNDERS(pWin))
  	{

--- 2117,2122 -----
      pFirstChange = MoveWindowInStack(pWin, pSib);
      if (pWin->realized)
      {
  #ifdef DO_SAVE_UNDERS
  	if (DO_SAVE_UNDERS(pWin))
  	{
***************
*** 1878,1883
  	    }
  	}
  #endif /* DO_SAVE_UNDERS */
  
  	if (pWin->bitGravity == ForgetGravity)
  	{

--- 2130,2136 -----
  	    }
  	}
  #endif /* DO_SAVE_UNDERS */
+ 	oldRegion = Gravitate(pWin, x - oldx, y - oldy, dw, dh);
  
  	/*
  	 * Postpone the MarkSiblingsBelowMe to here b/c Gravitate may
***************
*** 1879,1884
  	}
  #endif /* DO_SAVE_UNDERS */
  
  	if (pWin->bitGravity == ForgetGravity)
  	{
  	    (* pScreen->ValidateTree)(pParent, pFirstChange, TRUE, anyMarked);

--- 2132,2145 -----
  #endif /* DO_SAVE_UNDERS */
  	oldRegion = Gravitate(pWin, x - oldx, y - oldy, dw, dh);
  
+ 	/*
+ 	 * Postpone the MarkSiblingsBelowMe to here b/c Gravitate may
+ 	 * call UnmapWindow which will call ValidateTree which will unmark
+ 	 * pWin, which is not good.
+ 	 */
+ 	pBox = (* pScreen->RegionExtents)(pWin->borderSize);
+ 	anyMarked = MarkSiblingsBelowMe(pWin, pBox) || anyMarked;
+ 
  	if (pWin->bitGravity == ForgetGravity)
  	{
  	    (* pScreen->ValidateTree)(pParent, pFirstChange, TRUE, anyMarked);
***************
*** 1882,1897
  	if (pWin->bitGravity == ForgetGravity)
  	{
  	    (* pScreen->ValidateTree)(pParent, pFirstChange, TRUE, anyMarked);
- 	    /* CopyWindow will step on borders, so re-paint them */
- 	    (* pScreen->Subtract)(pWin->borderExposed, 
- 			 pWin->borderClip, pWin->winSize);
- #ifndef notdef
- 	    /* XXX this is unacceptable overkill
- 	     * It is also wrong, since a bitGravity of Forget in the parent
- 	     * should not affect the children -- ardeb
- 	     */
- 	    TraverseTree(pWin, ExposeAll, pScreen);
- #else
  	    (* pScreen->RegionCopy) (pWin->exposed, pWin->clipList);
  #endif notdef
   

--- 2143,2148 -----
  	if (pWin->bitGravity == ForgetGravity)
  	{
  	    (* pScreen->ValidateTree)(pParent, pFirstChange, TRUE, anyMarked);
  	    (* pScreen->RegionCopy) (pWin->exposed, pWin->clipList);
  	    (* pScreen->Subtract) (pWin->borderExposed,
  				   pWin->borderClip,
***************
*** 1893,1901
  	    TraverseTree(pWin, ExposeAll, pScreen);
  #else
  	    (* pScreen->RegionCopy) (pWin->exposed, pWin->clipList);
! #endif notdef
!  
! 	    DoObscures(pParent); 
  	    HandleExposures(pParent);
  	}
  	else

--- 2144,2159 -----
  	{
  	    (* pScreen->ValidateTree)(pParent, pFirstChange, TRUE, anyMarked);
  	    (* pScreen->RegionCopy) (pWin->exposed, pWin->clipList);
! 	    (* pScreen->Subtract) (pWin->borderExposed,
! 				   pWin->borderClip,
! 				   pWin->winSize);
! 	    if ((pWin->backingStore != NotUseful) && (pWin->backStorage))
! 	    {
! 		(* pWin->backStorage->Forget)(pWin);
! 		(* pScreen->RegionEmpty)(pWin->backStorage->obscured);
! 	    }
! 	    DoObscures(pParent);
! 	    MoveChildren(pWin);
  	    HandleExposures(pParent);
  	}
  	else
***************
*** 1900,1907
  	}
  	else
  	{
! 	    pRegion = (* pScreen->RegionCreate)(NULL, 1);
! 	    (* pScreen->RegionCopy)(pRegion, pWin->clipList);
  
  	    switch (pWin->bitGravity)
  	    {

--- 2158,2164 -----
  	}
  	else
  	{
! 	    RegionPtr	pRegion;
  
  	    pRegion = (* pScreen->RegionCreate) (NullBox, 1);
  
***************
*** 1903,1908
  	    pRegion = (* pScreen->RegionCreate)(NULL, 1);
  	    (* pScreen->RegionCopy)(pRegion, pWin->clipList);
  
  	    switch (pWin->bitGravity)
  	    {
  	      case NorthWestGravity: 

--- 2160,2172 -----
  	{
  	    RegionPtr	pRegion;
  
+ 	    pRegion = (* pScreen->RegionCreate) (NullBox, 1);
+ 
+ 	    if (pWin->backingStore != NotUseful)
+ 	    {
+ 		(* pScreen->RegionCopy) (pRegion, pWin->clipList);
+ 	    }
+ 
  	    switch (pWin->bitGravity)
  	    {
  	      case NorthWestGravity: 
***************
*** 1948,1954
  	    DoObscures(pParent);
  	    if (pWin->backStorage && (pWin->backingStore != NotUseful))
  	    {
!                 (* pWin->backStorage->TranslateBackingStore) (pWin, 
  							      x - oldx,
  							      y - oldy,
  							      pRegion);

--- 2212,2218 -----
  	    DoObscures(pParent);
  	    if (pWin->backStorage && (pWin->backingStore != NotUseful))
  	    {
! 		(* pWin->backStorage->TranslateBackingStore) (pWin,
  							      x - oldx,
  							      y - oldy,
  							      pRegion);
***************
*** 1953,1961
  							      y - oldy,
  							      pRegion);
  	    }
-             oldpt.x = oldx - x + pWin->absCorner.x;
- 	    oldpt.y = oldy - y + pWin->absCorner.y;
- 	    (* pWin->CopyWindow)(pWin, oldpt, oldRegion);
  
  
  	    /* Note that oldRegion is *translated* by CopyWindow */

--- 2217,2222 -----
  							      y - oldy,
  							      pRegion);
  	    }
  
  	    MoveChildren(pWin);
  
***************
*** 1957,1962
  	    oldpt.y = oldy - y + pWin->absCorner.y;
  	    (* pWin->CopyWindow)(pWin, oldpt, oldRegion);
  
  
  	    /* Note that oldRegion is *translated* by CopyWindow */
  

--- 2218,2224 -----
  							      pRegion);
  	    }
  
+ 	    MoveChildren(pWin);
  
  	    oldPt.x = oldx - x + pWin->absCorner.x;
  	    oldPt.y = oldy - y + pWin->absCorner.y;
***************
*** 1958,1964
  	    (* pWin->CopyWindow)(pWin, oldpt, oldRegion);
  
  
! 	    /* Note that oldRegion is *translated* by CopyWindow */
  
  	    /*
  	     * We've taken care of those spots in oldRegion so they needn't

--- 2220,2227 -----
  
  	    MoveChildren(pWin);
  
! 	    oldPt.x = oldx - x + pWin->absCorner.x;
! 	    oldPt.y = oldy - y + pWin->absCorner.y;
  
  	    /*
  	     * CopyWindow won't respect children, so clip oldRegion to avoid
***************
*** 1961,1968
  	    /* Note that oldRegion is *translated* by CopyWindow */
  
  	    /*
! 	     * We've taken care of those spots in oldRegion so they needn't
! 	     * be re-exposed...
  	     */
  	    (* pScreen->Subtract)(pWin->exposed, pWin->clipList, oldRegion);
  	    (* pScreen->RegionDestroy)(pRegion);

--- 2224,2232 -----
  	    oldPt.y = oldy - y + pWin->absCorner.y;
  
  	    /*
! 	     * CopyWindow won't respect children, so clip oldRegion to avoid
! 	     * copying into them by translating the new clip region to the
! 	     * old place and intersecting the regions.
  	     */
  	    (* pScreen->RegionCopy) (pRegion, pWin->clipList);
  	    (* pScreen->TranslateRegion) (pRegion, oldx - x, oldy - y);
***************
*** 1964,1971
  	     * We've taken care of those spots in oldRegion so they needn't
  	     * be re-exposed...
  	     */
! 	    (* pScreen->Subtract)(pWin->exposed, pWin->clipList, oldRegion);
! 	    (* pScreen->RegionDestroy)(pRegion);
  
  	    /* CopyWindow will step on borders, so repaint them */
  	    (* pScreen->Subtract)(pWin->borderExposed, 

--- 2228,2236 -----
  	     * copying into them by translating the new clip region to the
  	     * old place and intersecting the regions.
  	     */
! 	    (* pScreen->RegionCopy) (pRegion, pWin->clipList);
! 	    (* pScreen->TranslateRegion) (pRegion, oldx - x, oldy - y);
! 	    (* pScreen->Intersect) (oldRegion, oldRegion, pRegion);
  
  	    (* pWin->CopyWindow) (pWin, oldPt, oldRegion);
  
***************
*** 1967,1975
  	    (* pScreen->Subtract)(pWin->exposed, pWin->clipList, oldRegion);
  	    (* pScreen->RegionDestroy)(pRegion);
  
! 	    /* CopyWindow will step on borders, so repaint them */
! 	    (* pScreen->Subtract)(pWin->borderExposed, 
! 				  pWin->borderClip, pWin->winSize);
  
  	    HandleExposures(pParent);
  	    (* pScreen->RegionDestroy)(oldRegion);

--- 2232,2238 -----
  	    (* pScreen->TranslateRegion) (pRegion, oldx - x, oldy - y);
  	    (* pScreen->Intersect) (oldRegion, oldRegion, pRegion);
  
! 	    (* pWin->CopyWindow) (pWin, oldPt, oldRegion);
  
  	    /*
  	     * Now anything we didn't copy needs to be exposed, so subtract
***************
*** 1971,1976
  	    (* pScreen->Subtract)(pWin->borderExposed, 
  				  pWin->borderClip, pWin->winSize);
  
  	    HandleExposures(pParent);
  	    (* pScreen->RegionDestroy)(oldRegion);
  	}

--- 2234,2250 -----
  
  	    (* pWin->CopyWindow) (pWin, oldPt, oldRegion);
  
+ 	    /*
+ 	     * Now anything we didn't copy needs to be exposed, so subtract
+ 	     * the area copied from the area exposed to get the new exposed
+ 	     * region. In addition, re-expose the entire border.
+ 	     */
+ 	    (* pScreen->Subtract) (pWin->exposed, pWin->clipList, oldRegion);
+ 	    (* pScreen->Subtract) (pWin->borderExposed, pWin->borderClip,
+ 				   pWin->winSize);
+ 
+ 	    (* pScreen->RegionDestroy)(pRegion);
+ 
  	    HandleExposures(pParent);
  	}
  	(* pScreen->RegionDestroy)(oldRegion);
***************
*** 1972,1978
  				  pWin->borderClip, pWin->winSize);
  
  	    HandleExposures(pParent);
- 	    (* pScreen->RegionDestroy)(oldRegion);
  	}
  #ifdef DO_SAVE_UNDERS
  	if (DO_SAVE_UNDERS(pWin))

--- 2246,2251 -----
  	    (* pScreen->RegionDestroy)(pRegion);
  
  	    HandleExposures(pParent);
  	}
  	(* pScreen->RegionDestroy)(oldRegion);
  
***************
*** 1974,1979
  	    HandleExposures(pParent);
  	    (* pScreen->RegionDestroy)(oldRegion);
  	}
  #ifdef DO_SAVE_UNDERS
  	if (DO_SAVE_UNDERS(pWin))
  	{

--- 2247,2254 -----
  
  	    HandleExposures(pParent);
  	}
+ 	(* pScreen->RegionDestroy)(oldRegion);
+ 
  #ifdef DO_SAVE_UNDERS
  	if (DO_SAVE_UNDERS(pWin))
  	{
*** /tmp/,RCSt1a01546	Sat Apr  2 14:14:34 1988
--- windowstr.h	Sat Apr  2 14:16:26 1988
***************
*** 1,4
! /* $Header: windowstr.h,v 1.1 88/03/29 13:45:13 deboor Exp $ */
  /***********************************************************
  Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,
  and the Massachusetts Institute of Technology, Cambridge, Massachusetts.

--- 1,4 -----
! /* $Header: windowstr.h,v 1.2 88/04/02 14:13:32 deboor Exp $ */
  /***********************************************************
  Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,
  and the Massachusetts Institute of Technology, Cambridge, Massachusetts.
***************
*** 46,51
      void (* TranslateBackingStore)(); /* to make bit gravity and backing
  					store work together */
      void (* ClearToBackground)();
  } BackingStoreRec;
  
  /* 

--- 46,52 -----
      void (* TranslateBackingStore)(); /* to make bit gravity and backing
  					store work together */
      void (* ClearToBackground)();
+     void (* Forget)();	    	    /* To handle ForgetGravity */
  } BackingStoreRec;
  
  /* 
***************
*** 95,101
  
  	PropertyPtr userProps;            /* client's property list */
  
! 	XID nolongerused; /* XXX still here for ddx binary compatibility */
  	PixmapPtr backgroundTile;
  	unsigned long backgroundPixel;
  	PixmapPtr borderTile;

--- 96,109 -----
  
  	PropertyPtr userProps;            /* client's property list */
  
! 	union {
! 	    XID nolongerused; /* XXX still here for ddx binary compatibility */
! 	    struct gravity {
! 		RegionPtr oldBorderClip;
! 		DDXPointRec oldAbsCorner;
! 	    } *gravity;	    	/* For window gravity, but need to keep
! 				 * structure the same size? */
! 	} extra;
  	PixmapPtr backgroundTile;
  	unsigned long backgroundPixel;
  	PixmapPtr borderTile;
*** /tmp/,RCSt1a01578	Sat Apr  2 14:18:15 1988
--- mibstore.c	Sat Apr  2 14:20:04 1988
***************
*** 24,30
   */
  #ifndef lint
  static char rcsid[] =
! "$Header: mibstore.c,v 1.1 88/04/02 14:17:08 deboor Exp $ SPRITE (Berkeley)";
  #endif lint
  
  #define NEED_EVENTS

--- 24,30 -----
   */
  #ifndef lint
  static char rcsid[] =
! "$Header: mibstore.c,v 1.2 88/04/02 14:17:35 deboor Exp $ SPRITE (Berkeley)";
  #endif lint
  
  #define NEED_EVENTS
***************
*** 1773,1778
  	pBS->ExposeCopy =	    	miExposeCopy;
  	pBS->TranslateBackingStore = 	miTranslateBackingStore;
  	pBS->ClearToBackground =    	miBSClearToBackground;
  
  	pWin->backStorage = pBS;
  

--- 1773,1779 -----
  	pBS->ExposeCopy =	    	miExposeCopy;
  	pBS->TranslateBackingStore = 	miTranslateBackingStore;
  	pBS->ClearToBackground =    	miBSClearToBackground;
+ 	pBS->Forget =	    	    	miBSForget;
  
  	pWin->backStorage = pBS;
  
***************
*** 2956,2958
      (* pScreen->RegionDestroy) (pRgn);
  }
  

--- 2957,2999 -----
      (* pScreen->RegionDestroy) (pRgn);
  }
  
+ /*-
+  *-----------------------------------------------------------------------
+  * miBSForget --
+  *	Forget about anything we've saved -- used to implement Forget
+  *	bitGravity properly.
+  *
+  * Results:
+  *	None.
+  *
+  * Side Effects:
+  *	pBackingStore->pSavedRegion is emptied.
+  *
+  *-----------------------------------------------------------------------
+  */
+ void
+ miBSForget(pWin)
+     WindowPtr	  	pWin;
+ {
+     MIBackingStorePtr	pBackingStore;
+     ScreenPtr		pScreen;
+     BoxPtr  	  	pBox;
+     
+     pBackingStore = (MIBackingStorePtr)pWin->devBackingStore;
+     pScreen = pWin->drawable.pScreen;
+ 
+     /*
+      * Two stages here -- first wipe out knowledge of what we've saved by
+      * emptying pSavedRegion, then allow proper drawing in obscured regions
+      * by placing them all in our background region and marking the
+      * backing-store as clean.
+      */
+     (* pScreen->RegionEmpty) (pBackingStore->pSavedRegion);
+ 
+     pBox = (* pScreen->RegionExtents) (pWin->winSize);
+     (* pScreen->Inverse) (pBackingStore->background,
+ 			  pWin->clipList,
+ 			  pBox);
+     pBackingStore->clean = TRUE;
+ }    
+  

