Return-Path: mcvax!inset!rob@uunet.uu.net
Received: by expo.lcs.mit.edu; Sat, 21 May 88 04:43:41 EDT
Received: from mcvax.UUCP by uunet.UU.NET (5.54/1.14) with UUCP 
	id AA09201; Sat, 21 May 88 04:42:26 EDT
From: mcvax!inset!rob@uunet.uu.net
Received: by mcvax.cwi.nl; Sat, 21 May 88 09:44:05 +0200 (MET)
Message-Id: <8805210744.AA10339@mcvax.cwi.nl>
Received: from inset by kestrel.Ukc.AC.UK   with UUCP  id aa20625;
          20 May 88 12:43 BST
Received: from cetia by inset with v7.8; Fri May 20 09:47:47 BST 1988
Received: by cetia with v7.8; Fri May 20 10:10:31 GMT 1988
To: xbugs@expo.lcs.mit.edu
Date: Fri, 20 May 88 09:47:58 BST

### bug number:   528
### area:         server
### severity:     low
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	Cetia Unigraph

CLIENT OPERATING SYSTEM:
	SVr2 with BSD4.2 extensions and NFS

DISPLAY:
	UNIGRAPH

SYNOPSIS:
	 The server aborts with the message ``client not in use''.
	 (follow up to mail of 19 May 1988)

DESCRIPTION:
	The sequence of events is as follows:

	bad ReadRequest: close down client 3
	CloseDownClient 3: DestroyAll, Resources freed
	FreeClientResources: client 3, buckets 0
	Dispatch: new client 3
	InitClientResources: client 3, i 3, buckets 64
	Dispatch: exit from loop: nClients -1, clientsDoomed 0
	FreeAllResources: client 0, i 0
	FreeClientResources: client 0, buckets 0
	FreeAllResources: client 3, i 3
	FreeClientResources: client 3, buckets 0
	InitClientResources: client 0, i 0, buckets 64
	Dispatch: ready client 3 with NO resources
	AddResource(300000, 32, 905d8, 0), client=3 

	Fatal server bug!
	client not in use

REPEAT-BY:
	running the shell script below eventually results in
	the above situation (rand.c should be compiled and
	the program rand placed in the same directory as moveclock).
	it seems to happen quicker if the clients are run on the same
	machine as the server.

-----moveclock------
#!/bin/sh
if [ "$1" = "" ]
then
	DISP="cetia1:0"
else
	DISP="$1"
fi
XCLOCK=/X11.install/usr/bin/X11/xclock
RAND=`dirname $0`
if [ "$RAND" = "" ]
then
	RAND=./rand
else
	RAND=$RAND/rand
fi
while :
	do
	tmp="" ; pid=""
	for times in 1 2 3 4 5 6 7
		do
		if [ $times = 1 ]
		then
			TYPE=digital
			upd=7
			h=50
			w=550
		else
			TYPE=analog
			upd=1
#
# these loops to prevent looping in mfbClipLine (rel1)
#
			h=0 ; while [ $h -lt 50 ] ;do
				h=`$RAND 200`
			done
			w=0 ; while [ $w -lt 50 ] ;do
				w=`$RAND 800`
			done
		fi
		geom="geometry =${w}x${h}""+`$RAND 1024`+`$RAND 868`"
#			echo "	xclock -bw $times -update $upd -fn vxms-37.snf -${TYPE} -display $DISP -${geom} &"
			${XCLOCK} -bw $times -update $upd -fn vxms-37.snf -${TYPE} -display $DISP -${geom} &
			pid="$pid $!"
		done
	sleep 30
#	echo killing xclock processes no $pid
	kill  -1 $pid || exit 1; pid=""
	done
-------rand.c-------
#include <time.h>
#include <stdio.h>

main(argc,argv)
int argc,**argv;
{
	int arg;

	if(argc!=2) {
		fprintf(stderr,"Usage: %s range\n",argv[0]);
		exit(1);
	}
	if ( (arg=atoi(argv[1])) < 2 )
		arg=2;

	srand(time(0));
	printf("%d\n", (rand()%arg+1) );
}
-------the end------

FIX:
	The problem is that is possible that nClients is NEGITIVE
	when a new client is detected eg

	CloseDownClient: nClients 1
	bad ReadRequest: close down client 7
	CloseDownClient 7: DestroyAll, Resources freed
	FreeClientResources: client 7, buckets 0
	CloseDownClient: nClients -1
	Dispatch: new client 7, previous nClients -1

	i added a test in the new client case in which
	if nClients is < 0 i set it to 1
	otherwise increment it as usual.

