Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by EXPO.LCS.MIT.EDU; Thu, 5 May 88 13:28:00 EDT
Date: Thu, 5 May 88 13:27 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: server handling of too many clients
To: xbugs@expo.lcs.mit.edu
Message-Id: <19880505172747.8.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   459
### area:         server
### severity:     low
### comments:     

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	any

DISPLAY:
	all

AREA:
	server

SYNOPSIS:
	Server fails to worry about creating too many clients.

DESCRIPTION:
	NextAvailableClient() wasn't worrying about exceeding MAXCLIENTS
	(which can happen with Retain close-down modes).
	EstablishNewConnections() wasn't correctly handling the case
	where NextAvailableClient() returned NULL.

	CloseDownClient was needlessly searching to find the
	equivalent of client->index, and Oops had a useless loop.

	KillAllClients was failing to cleanup retained clients.

REPEAT-BY:
	eyeball the code (while looking at another bug)

FILES:
	server/dix/dispatch.c
	server/os/{4.2bsd,hpux}/connection.c

FIX:

*** /tmp/,RCSt1a27381	Thu May  5 13:25:02 1988
--- server/dix/dispatch.c	Thu May  5 13:24:26 1988
***************
*** 1,4 ****
! /* $Header: dispatch.c,v 1.48 88/05/05 09:17:30 rws Exp $ */
  /************************************************************
  Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,
  and the Massachusetts Institute of Technology, Cambridge, Massachusetts.
--- 1,4 ----
! /* $Header: dispatch.c,v 1.50 88/05/05 13:24:06 rws Exp $ */
  /************************************************************
  Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,
  and the Massachusetts Institute of Technology, Cambridge, Massachusetts.
***************
*** 3142,3154 ****
          client->clientGone = TRUE;  /* so events aren't sent to client */
          CloseDownConnection(client);
          FreeClientResources(client);
!         for (i=0; i<currentMaxClients; i++)
!             if (clients[i] == client)
! 	    {
! 		nextFreeClientID = i;
!                 clients[nextFreeClientID] = NullClient;
! 		break;
! 	    }
          xfree(client);
  	if(--nClients == 0)
  	    nClients = -1;
--- 3142,3149 ----
          client->clientGone = TRUE;  /* so events aren't sent to client */
          CloseDownConnection(client);
          FreeClientResources(client);
! 	nextFreeClientID = client->index;
! 	clients[client->index] = NullClient;
          xfree(client);
  	if(--nClients == 0)
  	    nClients = -1;
***************
*** 3157,3169 ****
      else if (client->clientGone)
      {
          FreeClientResources(client);
!         for (i=0; i<currentMaxClients; i++)
!             if (clients[i] == client)
! 	    {
! 		nextFreeClientID = i;
!                 clients[nextFreeClientID] = NullClient;
! 		break;
! 	    }
          xfree(client);
  	--nClients;
      }
--- 3152,3159 ----
      else if (client->clientGone)
      {
          FreeClientResources(client);
! 	nextFreeClientID = client->index;
! 	clients[client->index] = NullClient;
          xfree(client);
  	--nClients;
      }
***************
*** 3179,3185 ****
  {
      int i;
      for (i=1; i<currentMaxClients; i++)
!         if (clients[i] && !clients[i]->clientGone)
              CloseDownClient(clients[i]);     
  }
  
--- 3169,3175 ----
  {
      int i;
      for (i=1; i<currentMaxClients; i++)
!         if (clients[i])
              CloseDownClient(clients[i]);     
  }
  
***************
*** 3228,3263 ****
   * int NextAvailableClientID()
   *
   * OS depedent portion can't assign client id's because of CloseDownModes.
!  * Returns -1 if the there are no free clients.
   *************************/
  
  ClientPtr
  NextAvailableClient()
  {
!     int i;
!     ClientPtr client;
  
!     if (nextFreeClientID >= currentMaxClients)
!         nextFreeClientID = 1;
!     if (!clients[nextFreeClientID])
      {
! 	i = nextFreeClientID;
! 	nextFreeClientID++;
      }
!     else
!     {
! 	i = 1;
! 	while ((i<currentMaxClients) && (clients[i]))
!             i++;
!         if (i < currentMaxClients)
! 	    nextFreeClientID = i;
! 	else
!         {
! 	    clients = (ClientPtr *)xrealloc(clients,
! 					    i * sizeof(ClientRec));
! 	    currentMaxClients++;
! 	}
!     }
      clients[i] = client =  (ClientPtr)xalloc(sizeof(ClientRec));
      client->index = i;
      client->sequence = 0; 
--- 3218,3252 ----
   * int NextAvailableClientID()
   *
   * OS depedent portion can't assign client id's because of CloseDownModes.
!  * Returns NULL if the there are no free clients.
   *************************/
  
  ClientPtr
  NextAvailableClient()
  {
!     register int i;
!     register ClientPtr client;
  
!     i = nextFreeClientID;
!     while (clients[i])
      {
! 	i++;
! 	if (i >= currentMaxClients)
! 	    i = 1;
! 	if (i != nextFreeClientID)
! 	    continue;
! 	if (currentMaxClients == MAXCLIENTS)
! 	    return (ClientPtr) NULL;
! 	i = currentMaxClients;
! 	currentMaxClients++;
! 	clients = (ClientPtr *)xrealloc(clients,
! 					currentMaxClients * sizeof(ClientPtr));
! 	break;
      }
!     nextFreeClientID = i + 1;
!     if (nextFreeClientID == currentMaxClients)
! 	nextFreeClientID = 1;
! 
      clients[i] = client =  (ClientPtr)xalloc(sizeof(ClientRec));
      client->index = i;
      client->sequence = 0; 
***************
*** 3309,3315 ****
      int status;
  {
      xError rep;
-     register int i;
  
      rep.type = X_Error;
      rep.sequenceNumber = client->sequence;
--- 3298,3303 ----
***************
*** 3318,3325 ****
      rep.minorCode = minorCode;
      rep.resourceID = client->errorValue;
  
-     for (i=0; i<currentMaxClients; i++)
-         if (clients[i] == client) break;
  #ifdef notdef
      ErrorF(  "OOPS! => client: %x, seq: %d, err: %d, maj:%d, min: %d resID: %x\n",
      	client->index, rep.sequenceNumber, rep.errorCode,
--- 3306,3311 ----

*** /tmp/,RCSt1a26253	Thu May  5 11:44:22 1988
--- server/os/4.2bsd/connection.c	Thu May  5 11:44:08 1988
***************
*** 21,27 ****
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: connection.c,v 1.66 88/01/30 10:22:18 rws Exp $ */
  /*****************************************************************
   *  Stuff to create connections --- OS dependent
   *
--- 21,27 ----
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: connection.c,v 1.67 88/05/05 11:43:51 rws Exp $ */
  /*****************************************************************
   *  Stuff to create connections --- OS dependent
   *
***************
*** 497,502 ****
--- 497,504 ----
  		} 
  		else 
  		{
+ 		    ClientPtr next = (ClientPtr)NULL;
+ 
  #ifdef TCP_NODELAY
  		    fromlen = sizeof (from);
                      if (!getpeername (newconn, &from.sa, &fromlen))
***************
*** 511,518 ****
  #endif /* TCP_NODELAY */
  		    if (ClientAuthorized(newconn, &swapped, &reason))
  		    {
- 			ClientPtr next;
- 
  		        fcntl (newconn, F_SETFL, FNDELAY);
  			inputBuffers[newconn].used = 1; 
                          if (! inputBuffers[newconn].size) 
--- 513,518 ----
***************
*** 545,552 ****
  			   priv->fd = newconn;
  			   next->osPrivate = (pointer)priv;
  		        }
  		    }
! 		    else
  		    {
  			xConnSetupPrefix c;
  
--- 545,559 ----
  			   priv->fd = newconn;
  			   next->osPrivate = (pointer)priv;
  		        }
+ 			else
+ 			{
+ #define STR "Maximum number of clients exceeded"
+ 			   reason = (char *)Xalloc(sizeof(STR));
+ 			   strcpy(reason, STR);
+ #undef STR
+ 			}
  		    }
! 		    if (next == (ClientPtr)NULL)
  		    {
  			xConnSetupPrefix c;
  
*** /tmp/,RCSt1a27293	Thu May  5 13:14:28 1988
--- connection.c	Thu May  5 11:44:54 1988
***************
*** 21,27 ****
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: connection.c,v 1.5 88/01/30 10:25:45 rws Exp $ */
  /*****************************************************************
   *  Stuff to create connections --- OS dependent
   *
--- 21,27 ----
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: connection.c,v 1.6 88/05/05 11:44:39 rws Exp $ */
  /*****************************************************************
   *  Stuff to create connections --- OS dependent
   *
***************
*** 549,554 ****
--- 549,556 ----
  		} 
  		else 
  		{
+ 		    ClientPtr next = (ClientPtr)NULL;
+ 
  #ifdef TCP_NODELAY
  		    fromlen = sizeof (from);
                      if (!getpeername (newconn, &from.sa, &fromlen))
***************
*** 563,570 ****
  #endif /* TCP_NODELAY */
  		    if (ClientAuthorized(newconn, &swapped, &reason))
  		    {
- 			ClientPtr next;
- 
  #ifdef	hpux
  	/*
  	 * HPUX does not have  FNDELAY
--- 565,570 ----
***************
*** 608,615 ****
  			   priv->fd = newconn;
  			   next->osPrivate = (pointer)priv;
  		        }
  		    }
! 		    else
  		    {
  			xConnSetupPrefix c;
  
--- 608,622 ----
  			   priv->fd = newconn;
  			   next->osPrivate = (pointer)priv;
  		        }
+ 			else
+ 			{
+ #define STR "Maximum number of clients exceeded"
+ 			   reason = (char *)Xalloc(sizeof(STR));
+ 			   strcpy(reason, STR);
+ #undef STR
+ 			}
  		    }
! 		    if (next == (ClientPtr)NULL)
  		    {
  			xConnSetupPrefix c;
  

