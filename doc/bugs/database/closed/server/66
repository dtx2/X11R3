Return-Path: Richard.Draves@rpd.camelot.cs.cmu.edu
Received: from ATHENA (ATHENA.MIT.EDU) by EXPO.LCS.MIT.EDU; Sun, 20 Mar 88 22:34:56 EST
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA17252; Sun, 20 Mar 88 22:33:57 EST
Message-Id: <8803210333.AA17252@ATHENA.MIT.EDU>
Date: Sun, 20 Mar 88 22:31:56 EST
From: Richard.Draves@rpd.camelot.cs.cmu.edu
To: xbugs@athena.mit.edu
Subject: bug in XListFonts server functionality

### bug number:   187
### area:         server
### severity:     
### assigned to:  
### status:       closed
### comments:     contains rewritten code...

The match() function in os/4.2bsd/filenames.c is bogus.  It implicitly
appends a * to every pattern.  It also has another bug that may under
some circumstances cause core-dumps.  I rewrote it.

Rich

*** server/os/4.2bsd/filenames.c	Mon Feb  1 09:18:03 1988
--- /afs/cs.cmu.edu/os/source/usr/misc/.X11tra/src/X.V11R2/server/os/4.2bsd/filenames.c	Fri Mar 18 15:01:59 1988
***************
*** 159,196 ****
      register char	*pat;
      register char	*string;
  {
!     register int	ip;
!     Bool		matched;
! 
!     for ( ip=0; pat[ip]!='\0'; ip++)
      {
!         if ( pat[ip] == '*')
  	{
! 	    matched = FALSE;
! 	    while (! matched )   /* find where pat & string start to match */
! 	    {
! 		if ( string[ip] == '\0')
! 		{
! 		    if (pat[ip+1] == '\0')
! 		        return TRUE;
! 		    break;
! 		}
! 		while ( ! (matched = match( &pat[ip+1], &string[ip])))
! 		{
! 		    string++;
! 		    if ( string[0] == '\0') 
! 		        return FALSE;
! 		}
! 	    }
!             if (matched)
!                 return TRUE;
  	}
!         else if (string[ip] == '\0')
!             return FALSE;
! 	else if (( pat[ip] != '?') && (pat[ip] != string[ip]))
! 	     return FALSE;
      }
!     return TRUE;
  }
  
  
--- 159,183 ----
      register char	*pat;
      register char	*string;
  {
!     while (*pat != '\0')
      {
! 	if (*pat == '*')
  	{
! 	    do
! 		if (match(pat + 1, string))
! 		    return TRUE;
! 	    while (*string++ != '\0');
! 	    return FALSE;
  	}
! 	else if (*string == '\0')
! 	    return FALSE;
! 	else if ((*pat == '?') ||
! 		 (*pat == *string))
! 	    pat++, string++;
! 	else
! 	    return FALSE;
      }
!     return *string == '\0';
  }
  
  

