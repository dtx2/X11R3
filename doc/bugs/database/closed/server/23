Return-Path: dshr@sun.com 
Received: from ATHENA (ATHENA.MIT.EDU) by EXPO.LCS.MIT.EDU; Sun, 6 Mar 88 19:20:44 EST
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA09824; Sun, 6 Mar 88 19:20:07 EST
Received: from snail.sun.com by Sun.COM (4.0/SMI-4.0)
	id AA14703; Sun, 6 Mar 88 16:18:49 PST
Received: from brie.sun.com by snail.sun.com (4.0/SMI-3.2)
	id AA14144; Sun, 6 Mar 88 16:19:49 PST
Received: from devnull.sun.com by brie.sun.com (3.2/SMI-3.2)
	id AA20321; Sun, 6 Mar 88 16:19:52 PST
Received: by devnull.sun.com (4.0/SMI-4.0Beta)
	id AA03818; Sun, 6 Mar 88 16:12:05 PST
Message-Id: <8803070012.AA03818@devnull.sun.com>
Date: Sun 6 Mar 1988 15:59:54 EST
From: David Rosenthal <dshr@sun.com>
Subject: Bug in property.c
To: x11bugs%brie@sun.com
Cc: xbugs@expo.lcs.mit.edu

### bug number:   40
### area:         
### severity:     
### assigned to:  
### status:       

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/160C

CLIENT OPERATING SYSTEM:
	SunOS 4.0

DISPLAY:
	CG2

SYNOPSIS:
	The "length" field of the GetProperty reply is not being
	set correctly (I think).

DESCRIPTION:

	From server/dix/property.c:

	    /*
             *  Return type, format, value to client
             */
		n = (pProp->format/8) * pProp->size; /* size (bytes) of prop */
		ind = stuff->longOffset << 2;        

               /* If longOffset is invalid such that it causes "len" to
                        be negative, it's a value error. */

		if (n < ind)
		{
		    client->errorValue = stuff->longOffset;
		    return BadValue;
		}

		len = min(n - ind, 4 * stuff->longLength);

		reply.bytesAfter = n - (ind + len);
		reply.format = pProp->format;
		reply.length = len >> 2;
		reply.nItems = len / (pProp->format / 8 );
		reply.propertyType = pProp->type;
		WriteReplyToClient(client, sizeof(xGenericReply), &reply);

	Now let us suppose that:
	
	pProp->size == 3
	pProp->format == 8
	stuff->longOffset == 0
	stuff->longLength == 1
	
	Then:
	
	n == 3
	ind == 0
	len == 3
	reply.length == 0

	But:

		if (len)
		{
		    switch (reply.format) {
		    case 32: client->pSwapReplyFunc = CopySwap32Write; break;
		    case 16: client->pSwapReplyFunc = CopySwap16Write; break;
		    default: client->pSwapReplyFunc = (void (*) ())WriteToClient; break;
		    }
		    WriteSwappedDataToClient(client, len, pProp->data + ind);
		}

	which means that there is actually 4 bytes of data after the request.

REPEAT-BY:
	Read the code.

FIX:
	Round up the length instead of rounding it down.

