Return-Path: jim
Received: by expo.lcs.mit.edu; Fri, 1 Apr 88 11:23:04 EST
From: jim@expo.lcs.mit.edu (Jim Fulton)
Message-Id: <8804011623.AA12388@EXPO.LCS.MIT.EDU>
To: xbugs
Subject: HP getimage bug
Date: Fri, 01 Apr 88 11:23:03 EST

### bug number:   308
### area:         server
### severity:     
### assigned to:  
### status:       closed
### comments:     hp-specific



VERSION:
	X Window System, Version 11, Release 2


CLIENT MACHINE and OPERATING SYSTEM:
	Sun 3/280 running SunOS 3.4


DISPLAY:
	HP Topcat


AREA:
	server/ddx/hp


SYNOPSIS:
	GetImage leaves cursor turned on


DESCRIPTION:
	I ran a little magnifier program (X10 program using the protocol
	translator) and it left the cursor in the image.


REPEAT-BY:
	Do an XGetImage on an area containing the cursor.  I've attached the
	xmag program at the end of the file (compile it with X10 and run 
	through x10tox11).


FILES:
	server/ddx/hp/hp/hpByteBlt.c


FIX:
	[Preferred, but not necessary.]


AUXILLARY SOURCE CODE:

/*
 * X10 version of xmag, by Jim Fulton, from a version by Josh Littlefield,
 * back when both of them were at Cognition Inc.
 */

#include <X/Xlib.h>
#include <X/Xkeyboard.h>
#include <sys/types.h>

#ifndef NULL
#define NULL 0
#endif

#define Register register

#define DEF_SIZE	50
#define PIXMAPLIMIT	(31 * 1024)

typedef enum _boolean {true = 1, false = 0} boolean;

void MagnifyPixmap();
void MagnifyBitmap();

#define arrow_width 16
#define arrow_height 16
static short arrow_bits[] = {
   0x0000, 0x0002, 0x0006, 0x000e,
   0x001e, 0x003e, 0x007e, 0x00fe,
   0x01fe, 0x003e, 0x0036, 0x0062,
   0x0060, 0x00c0, 0x00c0, 0x0000};
static short arrow_mask_bits[] = {
   0x0003, 0x0007, 0x000f, 0x001f,
   0x003f, 0x007f, 0x00ff, 0x01ff,
   0x03ff, 0x03ff, 0x007f, 0x00f7,
   0x00f3, 0x01e0, 0x01e0, 0x01c0};

long nyb_mag_table [16] = {
    0x00000000,			/* 0 */
    0x000000ff,			/* 1 */
    0x0000ff00,			/* 2 */
    0x0000ffff,			/* 3 */
    0x00ff0000,			/* 4 */
    0x00ff00ff,			/* 5 */
    0x00ffff00,			/* 6 */
    0x00ffffff,			/* 7 */
    0xff000000,			/* 8 */
    0xff0000ff,			/* 9 */
    0xff00ff00,			/* A */
    0xff00ffff,			/* B */
    0xffff0000,			/* C */
    0xffff00ff,			/* D */
    0xffffff00,			/* E */
    0xffffffff,			/* F */
};

main(argc, argv)
  int argc;
  char *argv[];
{
    char *displayname = "";
    int x, y;
    caddr_t data, bitmapdata;
    boolean B_AND_W;
    Status (*PixGetFunc)();
    void (*MagFunc)();
    Window win;
    Cursor cursor;
    XButtonPressedEvent event;
    extern caddr_t malloc();
    extern Status XPixmapGetZCompressed(), XPixmapGetZ(), XPixmapGetXY();
    int majorid, minorid;
    int width, height, mag_width, mag_height;
    int enlarge = 8;
    int background;

    width = DEF_SIZE;

    if (argc >= 2) {
	while (++argv, --argc) {
	    if (**argv == '-') {
		switch ((*argv)[1]) {
		  case 's':
		    width = atoi(argv[1]);
		    if (width <= 0) {
			puts("Bad size value");
			exit(1);
		    }
		    break;
		  case 'e':
		    enlarge = atoi(argv[1]);
		    if (enlarge <= 0) {
			puts("Bad enlarge value");
			exit(1);
		    }
		    break;
		  case 'h':
		    Usage();
		    exit(0);
		  default:
		    printf("Bad option: %s\n", *argv);
		    exit(1);
		}
	    } else if (strchr(*argv, ':')) {
		displayname = *argv;
		continue;
	    }
	}
    }

    height = width;
    mag_width = enlarge * width;
    mag_height = enlarge * height;

    (void)XOpenDisplay(displayname);

    background = WhitePixel;
    win = XCreateWindow(RootWindow, 
			DisplayWidth() - mag_width - 4, 
			DisplayHeight() - mag_height - 4, 
			mag_width, mag_height, 2,
			BlackPixmap, WhitePixmap);

    cursor = XCreateCursor(arrow_width, arrow_height, arrow_bits,
			   arrow_mask_bits, 1, 1, BlackPixel, WhitePixel,
			   GXcopy);

    if (DisplayPlanes() < 2)
	B_AND_W = true;
    else
	B_AND_W = false;

    /* since we want to be able to treat this as an array, always do the
       largest size.  XY formats will be expanded. */
    data = malloc (BZPixmapSize (width, height));

    if (B_AND_W) {
	PixGetFunc = XPixmapGetXY;
	bitmapdata = malloc (BitmapSize (width, height));
    } else {
#ifdef cognition
	if (XQueryExtension ("X_PixmapGetZCompressed",
			     &majorid, &minorid))
	    PixGetFunc = XPixmapGetZCompressed;
	else
#endif
	    PixGetFunc = XPixmapGetZ;
	bitmapdata = NULL;
    }

  newloc:

/*
    (void)XGrabMouse(RootWindow, cursor, ButtonPressed);
    XNextEvent(&event);
    x = event.x;
    y = event.y;
    XUngrabMouse();
*/

    GetLoc(width, height, cursor, &x, &y);

    x -= width / 2;
    y -= height / 2;

    if (x < 0) x = 0;
    else if (x > (DisplayWidth() - width))
	x = DisplayWidth() - width;

    if (y < 0) y = 0;
    else if (y > (DisplayHeight() - height))
	y = DisplayHeight() - height;

    if (B_AND_W) {
	(*PixGetFunc)(RootWindow, x, y, width, height, bitmapdata);
	Explode (bitmapdata, data, width, height);
    } else {
	(*PixGetFunc)(RootWindow, x, y, width, height, data);
    }

    XMapWindow(win);
    XSelectInput(win, ButtonPressed|ExposeWindow|KeyPressed);
    XFlush ();

  display:
    {
	Register caddr_t mag_ptr;
	Register int xx, yy;
	unsigned u, lastu;
	int start;
	
	/* display using pixel fills */
	for (yy = 0, mag_ptr = data; yy < height; yy++, mag_ptr += width) {
	    for (xx = 0; xx < width; xx++) {
		u = mag_ptr [xx];
		if (xx == 0) {
		    lastu = u;
		    start = 0;
		} else if (u != lastu) {
		    if (lastu != background)
		        XPixSet (win, start * enlarge, yy * enlarge, 
			         (xx - start) * enlarge, enlarge, 
			         lastu);
		    lastu = u;
		    start = xx;
		}
	    }
	    if (lastu != background)
	        XPixSet (win, start * enlarge, yy * enlarge,
		         (width - start) * enlarge, enlarge, lastu);
	}
	XFlush ();
    }

    for (;;) {
	XNextEvent(&event);
	if (event.type == ExposeWindow)
	    goto display;
	if (event.type == ButtonPressed)
	    break;
	if (event.type == KeyPressed &&
 	    IsTypewriterKey((((XKeyEvent *)(&event))->detail
			     & (short)ValueMask)))
	{
	    XUnmapWindow(win);
	    goto newloc;
	}
    }
}

/*
 * Explode bitmap format into pixmap format
 */

static unsigned short mask[16] = { 1<<0, 1<<1, 1<<2, 1<<3,
				   1<<4, 1<<5, 1<<6, 1<<7,
				   1<<8, 1<<9, 1<<10, 1<<11,
				   1<<12, 1<<13, 1<<14, 1<<15 };

Explode (bitmapdata, data, width, height)
    Register unsigned short *bitmapdata;
    Register caddr_t data;
    int width, height;
{
    Register int i;
    Register unsigned short u;
    int savewidth;

    savewidth = width;
    for (; height > 0; height--) {
	width = savewidth;
	for (; width > 0; width -= (8*sizeof (short)), bitmapdata++) {
	    u = *bitmapdata;
	    for (i = 0; i < (8 * sizeof (short)) && i < width; i++) {
		*data++ = ((u & mask[i]) != 0);
	    }
	}
    }
}
	    

GetLoc(w, h, cursor, xp, yp)
  int w, h;
  Cursor cursor;
  int *xp, *yp;
{
    Vertex verts[5];
    register Vertex *vptr;
    boolean quit = false, ok = true;
    int newx = 0, newy = 0, x = 0, y = 0;
    Window subwin;
    XEvent event;

    XGrabServer();
    XGrabMouse(RootWindow, cursor, ButtonPressed);

    vptr = verts;
    (vptr++)->flags = 0;
    vptr->x = w;
    vptr->y = 0;
    (vptr++)->flags = VertexRelative;
    vptr->x = 0;
    vptr->y = h;
    (vptr++)->flags = VertexRelative;
    vptr->x = -w;
    vptr->y = 0;
    (vptr++)->flags = VertexRelative;
    vptr->x = 0;
    vptr->y = -h;
    vptr->flags = VertexRelative;

    while (quit == false) {

	if (QLength()) {
	    quit = true;
	    XNextEvent(&event);
	}

	vptr = verts;
	vptr->x = x - (w/2);
	vptr->y = y - (h/2);

	if (ok) XDraw(RootWindow, verts, 5, 1, 1, 1, GXxor, AllPlanes);

	XQueryMouse(RootWindow, &newx, &newy, &subwin);

 	if (newx == x && newy == y)
	    ok = false;
	else
	    ok = true;

	x = newx;
	y = newy;

	if (ok) XDraw(RootWindow, verts, 5, 1, 1, 1, GXxor, AllPlanes);
    }
    if (!ok) XDraw(RootWindow, verts, 5, 1, 1, 1, GXxor, AllPlanes);
    *xp = newx;
    *yp = newy;
    XUngrabMouse();
    XUngrabServer();
}

Usage()
{
    puts("usage:  xmag [-s size] [-e enlarge] [-h] [display:num]");
    puts("\t where:  size is width and height of magnification area in pixels");
    puts("\t        default size = 50");
    puts("Click in window to exit, type key in window to magnify again");
}


