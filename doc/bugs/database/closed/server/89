Return-Path: matt
Received: by expo.lcs.mit.edu; Fri, 3 Jun 88 14:01:04 EDT
From: matt@expo.lcs.mit.edu (Matt Pappas)
Message-Id: <8806031801.AA16660@EXPO.LCS.MIT.EDU>
To: bugs
Cc: drewry@decwrl.dec.com, todd@decwrl.dec.com, matt
Subject: Bug fixed in PixmapBytePad()
Date: Fri, 03 Jun 88 14:01:03 EDT

### bug number:   562
### area:         server
### severity:     medium high
### comments:     

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	All, but only fatal in Xqdss servers (4-bit vaxStar and 8-bit GPX).

DISPLAY:
	Fatal on Digital 4-plane vaxStar 2000 and Digital 8-plane QDSS (GPX)

AREA:
	server/dix, server/include

SYNOPSIS:
	Xlib clients' putimage requests are returned with length mismatch
	errors for ZFormat images on displays with (a non-bitmap) pixmap-
	format scanlinePad <> BITMAP_SCANLINE_PAD.

DESCRIPTION:
	The PixmapBytePad macro defined in servermd.h assumes that the
	log base 2 of the number of bytes per scanline pad is equal to
	the compiled constant, LOG2_BYTES_PER_SCANLINE_PAD.  This constant
	appears to be 2 in most servers, indicating 32-bit image
	scanline padding.  As long as the image padding is to be out
	to 32 bits, there is no problem.  If, as in the qdss server,
	padding is not 32, then a dispatch.c incorrectly computes the
	proper length of the image request using the PixmapBytePad
	macro.

	The attached fix uses the correct log 2 of the bytes per
	scanline for the appropriate depth by using a new field in the
	PixmapWidthPaddingInfo array.  This array is completely
	internal to dix, so this change should not affect existing
	servers.  The initialization of the PixmapWithPaddingInfo
	array was modified slightly to initialize the new field in
	dix/main.c.

REPEAT-BY:
	Run Xqdss server compiled with PixmapFormat[2].scanlinePad = 8
	(which it should be).  Then run 'xwd | xwud'.  It Fails;
	Error message:  length mismatch in _XPutImage request.

FILES:
	dix/main.c
	include/servermd.h

FIX:
--- main.c	Fri Jun  3 13:53:03 1988
***************
*** 187,194 ****
  	 */
  	j = indexForBitsPerPixel[ 1 ];
  	k = indexForScanlinePad[ BITMAP_SCANLINE_PAD ];
! 	PixmapWidthPaddingInfo[1].scanlinePad = BITMAP_SCANLINE_PAD-1;
! 	PixmapWidthPaddingInfo[1].bitmapPadLog2 = answer[j][k];
  
  	InitAtoms();
  	InitOutput(&screenInfo, argc, argv);
--- 187,196 ----
  	 */
  	j = indexForBitsPerPixel[ 1 ];
  	k = indexForScanlinePad[ BITMAP_SCANLINE_PAD ];
! 	PixmapWidthPaddingInfo[1].padRoundUp = BITMAP_SCANLINE_PAD-1;
! 	PixmapWidthPaddingInfo[1].padPixelsLog2 = answer[j][k];
!  	j = indexForBitsPerPixel[8]; /* bits per byte */
!  	PixmapWidthPaddingInfo[1].padBytesLog2 = answer[j][k];
  
  	InitAtoms();
  	InitOutput(&screenInfo, argc, argv);
***************
*** 299,305 ****
      {
  	format.depth = screenInfo.formats[i].depth;
  	format.bitsPerPixel = screenInfo.formats[i].bitsPerPixel;
! 	format.scanLinePad = screenInfo.formats[i].scanlinePad;;
  	bcopy((char *)&format, pBuf, sizeof(xPixmapFormat));
  	pBuf += sizeof(xPixmapFormat);
  	sizesofar += sizeof(xPixmapFormat);
--- 301,307 ----
      {
  	format.depth = screenInfo.formats[i].depth;
  	format.bitsPerPixel = screenInfo.formats[i].bitsPerPixel;
! 	format.scanLinePad = screenInfo.formats[i].scanlinePad;
  	bcopy((char *)&format, pBuf, sizeof(xPixmapFormat));
  	pBuf += sizeof(xPixmapFormat);
  	sizesofar += sizeof(xPixmapFormat);
***************
*** 420,428 ****
    	scanlinepad = screenInfo.formats[format].scanlinePad;
   	j = indexForBitsPerPixel[ bitsPerPixel ];
    	k = indexForScanlinePad[ scanlinepad ];
!  	PixmapWidthPaddingInfo[ depth ].bitmapPadLog2 = answer[j][k];
!  	PixmapWidthPaddingInfo[ depth ].scanlinePad =
   	    (scanlinepad/bitsPerPixel) - 1;
      }
    
      /* This is where screen specific stuff gets initialized.  Load the
--- 422,432 ----
    	scanlinepad = screenInfo.formats[format].scanlinePad;
   	j = indexForBitsPerPixel[ bitsPerPixel ];
    	k = indexForScanlinePad[ scanlinepad ];
!  	PixmapWidthPaddingInfo[ depth ].padPixelsLog2 = answer[j][k];
!  	PixmapWidthPaddingInfo[ depth ].padRoundUp =
   	    (scanlinepad/bitsPerPixel) - 1;
+  	j = indexForBitsPerPixel[ 8 ]; /* bits per byte */
+  	PixmapWidthPaddingInfo[ depth ].padBytesLog2 = answer[j][k];
      }
    
      /* This is where screen specific stuff gets initialized.  Load the
--- servermd.h	Fri Jun  3 11:49:50 1988
***************
*** 153,166 ****
   */
  
  typedef struct _PaddingInfo {
! 	int	scanlinePad;
! 	int	bitmapPadLog2;
  } PaddingInfo;
  extern PaddingInfo PixmapWidthPaddingInfo[];
  
  #define PixmapWidthInPadUnits(w, d) \
!     (((w) + PixmapWidthPaddingInfo[d].scanlinePad) >> \
! 	PixmapWidthPaddingInfo[d].bitmapPadLog2)
  
  /*
   *	Return the number of bytes to which a scanline of the given
--- 153,167 ----
   */
  
  typedef struct _PaddingInfo {
! 	int     padRoundUp;	/* pixels per pad unit - 1 */
! 	int	padPixelsLog2;	/* log 2 (pixels per pad unit) */
! 	int     padBytesLog2;	/* log 2 (bytes per pad unit) */
  } PaddingInfo;
  extern PaddingInfo PixmapWidthPaddingInfo[];
  
  #define PixmapWidthInPadUnits(w, d) \
!     (((w) + PixmapWidthPaddingInfo[d].padRoundUp) >> \
! 	PixmapWidthPaddingInfo[d].padPixelsLog2)
  
  /*
   *	Return the number of bytes to which a scanline of the given
***************
*** 167,172 ****
   * depth and width will be padded.
   */
  #define PixmapBytePad(w, d) \
!     (PixmapWidthInPadUnits(w, d) << LOG2_BYTES_PER_SCANLINE_PAD)
  
  #endif SERVERMD_H
--- 168,173 ----
   * depth and width will be padded.
   */
  #define PixmapBytePad(w, d) \
!     (PixmapWidthInPadUnits(w, d) << PixmapWidthPaddingInfo[d].padBytesLog2)
  
  #endif SERVERMD_H




