Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by EXPO.LCS.MIT.EDU; Sat, 14 May 88 11:29:47 EDT
Date: Sat, 14 May 88 11:28 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: server event dispatch during grabs does not obey spec
To: xbugs@expo.lcs.mit.edu
Message-Id: <19880514152845.2.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   493
### area:         server
### severity:     low
### comments:     

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	any

DISPLAY:
	all

AREA:
	server

SYNOPSIS:
	event dispatch during grabs does not obey spec

DESCRIPTION:
	Event propagation during a keyboard grab does not stop
	at the input focus and get redirected to the grab-window,
	but the spec says it should.

	Event propagation during a keyboard or pointer grab does
	not stop and get redirected to the grab-window if a window
	is reached for which a non-grabbing client has selected
	for the event, but the spec says it should.

	When a motion event distribution got inhibited by a Hint,
	it was treated as a failure to match the event, rather than
	being treated as a successful match, causing the event to
	be propagated further.

	The motion hint window could be set incorrectly during a
	grab, by failing to take propagation into account.

REPEAT-BY:
	eyeball the code in response to someone querying about
	the exact semantics of event generation during grabs,
	and realize the code doesn't match your idea of the spec.

FILES:
	server/dix/events.c

FIX:

*** /tmp/,RCSt1a07380	Sat May 14 11:08:08 1988
--- server/dix/events.c	Thu May  5 21:16:35 1988
***************
*** 23,29 ****
  ********************************************************/
  
  
! /* $Header: events.c,v 1.144 88/04/10 12:15:23 rws Exp $ */
  
  #include "X.h"
  #include "misc.h"
--- 23,29 ----
  ********************************************************/
  
  
! /* $Header: events.c,v 1.145 88/05/05 21:14:15 rws Exp $ */
  
  #include "X.h"
  #include "misc.h"
***************
*** 721,729 ****
  	"Event([%d, %d], mask=0x%x), client=%d",
  	pEvents->u.u.type, pEvents->u.u.detail, mask, client->index);
      if ((client) && (client != serverClient) && (!client->clientGone) &&
! 	((filter == CantBeFiltered) || (mask & filter)) &&
! 	((!grab) || (client == grab->client)))
      {
  	if (pEvents->u.u.type == MotionNotify)
  	{
  	    if (mask & PointerMotionHintMask)
--- 721,730 ----
  	"Event([%d, %d], mask=0x%x), client=%d",
  	pEvents->u.u.type, pEvents->u.u.detail, mask, client->index);
      if ((client) && (client != serverClient) && (!client->clientGone) &&
! 	((filter == CantBeFiltered) || (mask & filter)))
      {
+ 	if (grab && (client != grab->client))
+ 	    return -1; /* don't send, but notify caller */
  	if (pEvents->u.u.type == MotionNotify)
  	{
  	    if (mask & PointerMotionHintMask)
***************
*** 731,737 ****
  		if (WID(motionHintWindow) == pEvents->u.keyButtonPointer.event)
  		{
  		    if (debug_events) ErrorF("\n");
! 		    return 0;
  		}
  		pEvents->u.u.detail = NotifyHint;
  	    }
--- 732,738 ----
  		if (WID(motionHintWindow) == pEvents->u.keyButtonPointer.event)
  		{
  		    if (debug_events) ErrorF("\n");
! 		    return 1; /* don't send, but pretend we did */
  		}
  		pEvents->u.u.detail = NotifyHint;
  	    }
***************
*** 764,770 ****
      int count;
      Mask filter;
  {
!     int     deliveries = 0;
      OtherClients *other;
      ClientPtr client = NullClient;
      Mask deliveryMask; 	/* If a grab occurs due to a button press, then
--- 765,772 ----
      int count;
      Mask filter;
  {
!     int deliveries = 0, nondeliveries = 0;
!     int attempt;
      OtherClients *other;
      ClientPtr client = NullClient;
      Mask deliveryMask; 	/* If a grab occurs due to a button press, then
***************
*** 773,794 ****
  /* if nobody ever wants to see this event, skip some work */
      if ((filter != CantBeFiltered) && !(pWin->allEventMasks & filter))
  	return 0;
!     if (TryClientEvents(
  	pWin->client, pEvents, count, pWin->eventMask, filter, grab))
      {
! 	deliveries++;
! 	client = pWin->client;
! 	deliveryMask = pWin->eventMask;
      }
      if (filter != CantBeFiltered) /* CantBeFiltered means only window owner gets the event */
  	for (other = OTHERCLIENTS(pWin); other; other = other->next)
  	{
! 	    if (TryClientEvents(
  		  other->client, pEvents, count, other->mask, filter, grab))
  	    {
! 		deliveries++;
! 		client = other->client;
!                 deliveryMask = other->mask;
  	    }
  	}
      if ((pEvents->u.u.type == ButtonPress) && deliveries && (!grab))
--- 775,804 ----
  /* if nobody ever wants to see this event, skip some work */
      if ((filter != CantBeFiltered) && !(pWin->allEventMasks & filter))
  	return 0;
!     if (attempt = TryClientEvents(
  	pWin->client, pEvents, count, pWin->eventMask, filter, grab))
      {
! 	if (attempt > 0)
! 	{
! 	    deliveries++;
! 	    client = pWin->client;
! 	    deliveryMask = pWin->eventMask;
! 	} else
! 	    nondeliveries--;
      }
      if (filter != CantBeFiltered) /* CantBeFiltered means only window owner gets the event */
  	for (other = OTHERCLIENTS(pWin); other; other = other->next)
  	{
! 	    if (attempt = TryClientEvents(
  		  other->client, pEvents, count, other->mask, filter, grab))
  	    {
! 		if (attempt > 0)
! 		{
! 		    deliveries++;
! 		    client = other->client;
! 		    deliveryMask = other->mask;
! 		} else
! 		    nondeliveries--;
  	    }
  	}
      if ((pEvents->u.u.type == ButtonPress) && deliveries && (!grab))
***************
*** 808,814 ****
      }
      else if ((pEvents->u.u.type == MotionNotify) && deliveries)
  	motionHintWindow = pWin;
!     return deliveries;
  }
  
  /* If the event goes to dontDeliverToMe, don't send it and return 0.  if
--- 818,826 ----
      }
      else if ((pEvents->u.u.type == MotionNotify) && deliveries)
  	motionHintWindow = pWin;
!     if (deliveries)
! 	return deliveries;
!     return nondeliveries;
  }
  
  /* If the event goes to dontDeliverToMe, don't send it and return 0.  if
***************
*** 923,931 ****
      {
  	FixUpEventFromWindow(xE, pWin, child, FALSE);
  	deliveries = DeliverEventsToWindow(pWin, xE, 1, filter, grab);
! 	if ((deliveries > 0) || (filter & pWin->dontPropagateMask))
  	    return deliveries;
! 	if (pWin == stopAt)
  	    return 0;
  	child = pWin->wid;
  	pWin = pWin->parent;
--- 935,945 ----
      {
  	FixUpEventFromWindow(xE, pWin, child, FALSE);
  	deliveries = DeliverEventsToWindow(pWin, xE, 1, filter, grab);
! 	if (deliveries > 0)
  	    return deliveries;
! 	if ((deliveries < 0) ||
! 	    (pWin == stopAt) ||
! 	    (filter & pWin->dontPropagateMask))
  	    return 0;
  	child = pWin->wid;
  	pWin = pWin->parent;
***************
*** 1194,1201 ****
   
  	    FixUpEventFromWindow(xE, grab->window, None, TRUE);
  
! 	    TryClientEvents(grab->client, xE, 1, grab->eventMask, 
! 		filters[xE->u.u.type],  grab);
  
  	    if (device->sync.state == FROZEN_NO_EVENT)
  	    {
--- 1208,1215 ----
   
  	    FixUpEventFromWindow(xE, grab->window, None, TRUE);
  
! 	    (void) TryClientEvents(grab->client, xE, 1, grab->eventMask, 
! 				   filters[xE->u.u.type],  grab);
  
  	    if (device->sync.state == FROZEN_NO_EVENT)
  	    {
***************
*** 1284,1308 ****
  }
  
  static void
! DeliverGrabbedEvent(xE, thisDev, otherDev, deactivateGrab)
      register xEvent *xE;
      register DeviceIntPtr thisDev;
      DeviceIntPtr otherDev;
      Bool deactivateGrab;
  {
      register GrabPtr grab = thisDev->grab;
!     int deliveries;
  
!     if ((!grab->ownerEvents) ||
! 	(!(deliveries = DeliverDeviceEvents(sprite.win, xE, grab, NullWindow))))
      {
  	FixUpEventFromWindow(xE, grab->window, None, TRUE);
  	deliveries = TryClientEvents(grab->client, xE, 1, grab->eventMask,
  				     filters[xE->u.u.type], grab);
      }
!     if (deliveries && (xE->u.u.type == MotionNotify))
! 	motionHintWindow = grab->window;
!     else if (deliveries && !deactivateGrab)
  	switch (thisDev->sync.state)
  	{
  	   case FREEZE_BOTH_NEXT_EVENT:
--- 1298,1332 ----
  }
  
  static void
! DeliverGrabbedEvent(xE, thisDev, otherDev, deactivateGrab, isKeyboard)
      register xEvent *xE;
      register DeviceIntPtr thisDev;
      DeviceIntPtr otherDev;
      Bool deactivateGrab;
+     Bool isKeyboard;
  {
      register GrabPtr grab = thisDev->grab;
!     int deliveries = 0;
  
!     if (grab->ownerEvents)
      {
+ 	WindowPtr focus = isKeyboard ? thisDev->u.keybd.focus.win
+ 				     : PointerRootWin;
+ 
+ 	if (focus == PointerRootWin)
+ 	    deliveries = DeliverDeviceEvents(sprite.win, xE, grab, NullWindow);
+ 	else if (focus && (focus == sprite.win || IsParent(focus, sprite.win)))
+ 	    deliveries = DeliverDeviceEvents(sprite.win, xE, grab, focus);
+     }
+     if (!deliveries)
+     {
  	FixUpEventFromWindow(xE, grab->window, None, TRUE);
  	deliveries = TryClientEvents(grab->client, xE, 1, grab->eventMask,
  				     filters[xE->u.u.type], grab);
+ 	if (deliveries && (xE->u.u.type == MotionNotify))
+ 	    motionHintWindow = grab->window;
      }
!     if (deliveries && !deactivateGrab && (xE->u.u.type != MotionNotify))
  	switch (thisDev->sync.state)
  	{
  	   case FREEZE_BOTH_NEXT_EVENT:
***************
*** 1401,1407 ****
  	    FatalError("Impossible keyboard event");
      }
      if (grab)
! 	DeliverGrabbedEvent(xE, keybd, inputInfo.pointer, deactivateGrab);
      else
  	NormalKeyboardEvent(keybd, xE, sprite.win);
      if (deactivateGrab)
--- 1425,1432 ----
  	    FatalError("Impossible keyboard event");
      }
      if (grab)
! 	DeliverGrabbedEvent(xE, keybd, inputInfo.pointer, deactivateGrab,
! 			    TRUE);
      else
  	NormalKeyboardEvent(keybd, xE, sprite.win);
      if (deactivateGrab)
***************
*** 1486,1492 ****
  	    FatalError("bogus pointer event from ddx");
      }
      if (grab)
! 	DeliverGrabbedEvent(xE, mouse, inputInfo.keyboard, deactivateGrab);
      else
  	DeliverDeviceEvents(sprite.win, xE, NullGrab, NullWindow);
      if (deactivateGrab)
--- 1511,1518 ----
  	    FatalError("bogus pointer event from ddx");
      }
      if (grab)
! 	DeliverGrabbedEvent(xE, mouse, inputInfo.keyboard, deactivateGrab,
! 			    FALSE);
      else
  	DeliverDeviceEvents(sprite.win, xE, NullGrab, NullWindow);
      if (deactivateGrab)

