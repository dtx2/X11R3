Return-Path: dana@thumper.bellcore.com
Received: by expo.lcs.mit.edu; Tue, 14 Jun 88 09:29:17 EDT
Received: by thumper.bellcore.com (5.54/4.7)
	id AA18470; Tue, 14 Jun 88 09:25:30 EDT
Received: by dino.bellcore.com (4.12/4.7)
	id AA24185; Tue, 14 Jun 88 09:24:34 edt
Date: Tue, 14 Jun 88 09:24:34 edt
From: dana@thumper.bellcore.com (Dana A. Chee)
Message-Id: <8806141324.AA24185@dino.bellcore.com>
To: xbugs@expo.lcs.mit.edu
Cc: dana@thumper.bellcore.com, ludwig@thumper.bellcore.com
Subject: Bug(?) in Color sun tiling

### bug number:   602
### area:         server
### severity:     low
### comments:     


VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/160C

CLIENT OPERATING SYSTEM:
	SunOS 3.5

DISPLAY:
	Sun

SYNOPSIS:
	When tiling on a color sun, the tile doesn't start at 0,0

DESCRIPTION:
	When using a tile in a window, on a monochrome sun, it works
	correctly but on a color sun, the tile is offset as if the
	graphics context had ts_x_origin and ts_y_origin set to
	something other than 0,0.

FIX:
	Unknown

REPEAT-BY:
	Run the program below on both a monochrome and a color sun,
	on a monochrome sun, the Ace is complete starting at 0,0 in
	the window, but on the color sun, it begins somewhere inside
	the Ace.

#include	<X11/Xlib.h>
#include	<X11/StringDefs.h>
#include	<X11/IntrinsicP.h>

#define card_width 40
#define card_height 60
static char card_bits[] = {
/* Ace of Hearts */
    0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 
    0x00, 0x00, 0x80, 0x41, 0x00, 0x00, 0x00, 0x80, 0xa1, 0x00, 0x00, 0x00, 
    0x80, 0x11, 0x01, 0x00, 0x00, 0x80, 0x11, 0x01, 0x00, 0x00, 0x80, 0x11, 
    0x01, 0x00, 0x00, 0x80, 0xf1, 0x01, 0x00, 0x00, 0x80, 0x11, 0x01, 0x00, 
    0x00, 0x80, 0x19, 0x03, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x80, 0xb1, 0x01, 0x00, 0x00, 0x80, 0xf9, 0x03, 
    0x00, 0x00, 0x80, 0xf9, 0x03, 0x00, 0x00, 0x80, 0xf9, 0x03, 0x00, 0x00, 
    0x80, 0xf1, 0x01, 0x00, 0x00, 0x80, 0xe1, 0x00, 0x00, 0x00, 0x80, 0x41, 
    0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 
    0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0xc0, 0xe3, 0x01, 0x80, 0x01, 0xe0, 0xf7, 0x03, 0x80, 0x01, 0xf0, 
    0xff, 0x07, 0x80, 0x01, 0xf0, 0xff, 0x07, 0x80, 0x01, 0xf0, 0xff, 0x07, 
    0x80, 0x01, 0xf0, 0xff, 0x07, 0x80, 0x01, 0xe0, 0xff, 0x03, 0x80, 0x01, 
    0xc0, 0xff, 0x01, 0x80, 0x01, 0x80, 0xff, 0x00, 0x80, 0x01, 0x00, 0x7f, 
    0x00, 0x80, 0x01, 0x00, 0x3e, 0x00, 0x80, 0x01, 0x00, 0x1c, 0x00, 0x80, 
    0x01, 0x00, 0x08, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 
    0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x80, 
    0x8d, 0x01, 0x00, 0x00, 0xc0, 0x9f, 0x01, 0x00, 0x00, 0xc0, 0x9f, 0x01, 
    0x00, 0x00, 0xc0, 0x9f, 0x01, 0x00, 0x00, 0x80, 0x8f, 0x01, 0x00, 0x00, 
    0x00, 0x87, 0x01, 0x00, 0x00, 0x00, 0x82, 0x01, 0x00, 0x00, 0x00, 0x80, 
    0x01, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x82, 0x01, 0x00, 
    0x00, 0x00, 0x85, 0x01, 0x00, 0x00, 0x80, 0x88, 0x01, 0x00, 0x00, 0x80, 
    0x88, 0x01, 0x00, 0x00, 0x80, 0x88, 0x01, 0x00, 0x00, 0x80, 0x8f, 0x01, 
    0x00, 0x00, 0x80, 0x88, 0x01, 0x00, 0x00, 0xc0, 0x98, 0x01, 0x00, 0x00, 
    0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff
};

main()
{
	Display		*dpy;
	Window		win;
	int		screen, depth;
	XtGCMask	valuemask;
	XGCValues	xgcv;
	Pixmap		pp;
	GC		newgc;
	XEvent		ev;
	XSetWindowAttributes	attrs;

	dpy = XOpenDisplay(0);
	screen = DefaultScreen(dpy);
	depth = DefaultDepth(dpy, screen);

	win = XCreateSimpleWindow(dpy, DefaultRootWindow(dpy), 20, 20,
				  100, 100, 3, BlackPixel(dpy, screen),
				  WhitePixel(dpy, screen));

	attrs.event_mask = ExposureMask;
	XChangeWindowAttributes(dpy, win, CWEventMask, &attrs);
	
	pp = XCreatePixmapFromBitmapData(dpy, win, card_bits,
					 card_width, card_height,
					 BlackPixel(dpy, screen),
					 WhitePixel(dpy, screen), depth);
	
	valuemask = GCTile | GCFillStyle;
	
	xgcv.tile = pp;
	xgcv.fill_style = FillTiled;
	newgc = XCreateGC(dpy, win, valuemask, &xgcv);

	XMapWindow(dpy, win);
	XNextEvent(dpy, &ev);
	XFillRectangle(dpy, win, newgc, 0, 0, 100, 100);
	while(1)
	{
		XNextEvent(dpy, &ev);
		printf("Event is %x\n", ev.type);
	}
}

	



