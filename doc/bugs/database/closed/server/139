Return-Path: nathanm%hpcvlx@hplabs.hp.com
Received: by EXPO.LCS.MIT.EDU; Fri, 22 Jul 88 16:22:39 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA02242; Fri, 22 Jul 88 16:21:49 EDT
Received: from hp-pcd.HP.COM (hp-pcd) by hplabs.HP.COM with SMTP ; Fri, 22 Jul 88 10:23:22 PST
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA12782; Fri, 22 Jul 88 11:23:12 PDT
Received: by hpcvlx.HP.COM; Fri, 22 Jul 88 11:21:07 pdt
Date: Fri, 22 Jul 88 11:21:07 pdt
From: Nathan K. Meyers <nathanm%hpcvlx@hplabs.hp.com>
Message-Id: <8807221821.AA21702@hpcvlx.HP.COM>
To: xbugs%expo.lcs.mit.edu@athena.mit.edu
Subject: Bug report & fixes -- wide solid and dashed lines

### bug number:   768
### area:         server
### severity:     low
### comments:     

Please send just ONE bug report per mail message.  Reports should be sent to

                            xbugs@expo.lcs.mit.edu



VERSION:
	X11 release 2

CLIENT MACHINE:
	All

CLIENT OPERATING SYSTEM:
	All

DISPLAY:
	All servers using mi wide line and wide dash code.

SYNOPSIS:
	Wide lines are buggy

DESCRIPTION:
	The attached patches fix an assortment of problems with wide
	lines and wide dashed lines:
	  1) Crooked dashes (OnOffDash and DoubleDash).
	  2) Missing or incorrect caps/joins (DoubleDash).
	  3) Incorrect rendering of lines for tricky replacement rules
	     (DoubleDash).
	  4) Floating-point exceptions for degenerate cases (OnOffDash
	     and DoubleDash).
	  5) Losing corners of projecting caps when using tricky
	     replacement rules (Solid, OnOffDash, DoubleDash).

REPEAT-BY:
	Using wide lines

FIX:

The following shar script contains context diffs for all changes we've
performed to milines.c, midash.c, and miwidedash.c since R2.

There are now two known anomalies:

  1) To make joins work consistently for double-dashed lines, the
     midash.c code now introduces a 1-pixel phase slip at a vertex
     whenever a dash ends exactly at a non-terminal vertex.  That is,
     the (even or odd) dash is extended 1 pixel past the vertex where it
     should end.  The visual impact is minimal, and it was the least
     drastic solution to the problem.

  2) In the degenerate case where the "line" specified is 3 coincident
     points, results are different between the Solid case and the two
     dashed cases.

Nathan Meyers, Hewlett-Packard, nathanm@hp-pcd.hp.com


#---------------------------------- cut here ----------------------------------
# This is a shell archive.  Remove anything before this line,
# then unpack it by saving it in a file and typing "sh file".
#
# Wrapped by nathanm at hpcvlx on Fri Jul 22 11:15:02 1988
#
# This archive contains:
#	midash.diff	milines.diff	miwidedash.diff	
#
# Error checking via wc(1) will be performed.

LANG=""; export LANG

echo x - midash.diff
cat >midash.diff <<'@EOF'
*** Old/midash.c	Thu Jul 21 15:53:45 1988
--- New/midash.c	Fri Jul 22 11:01:50 1988
***************
*** 21,27
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: midash.c,v 1.8 88/02/02 18:20:06 rws Exp $ */
  #include "miscstruct.h"
  #include "mistruct.h"
  

--- 21,27 -----
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: midash.c,v 1.6 88/06/21 10:21:28 nathanm Exp $ */
  #include "miscstruct.h"
  #include "mistruct.h"
  #include "mifpoly.h"
***************
*** 24,29
  /* $Header: midash.c,v 1.8 88/02/02 18:20:06 rws Exp $ */
  #include "miscstruct.h"
  #include "mistruct.h"
  
  static miDashPtr CheckDashStorage();
  

--- 24,30 -----
  /* $Header: midash.c,v 1.6 88/06/21 10:21:28 nathanm Exp $ */
  #include "miscstruct.h"
  #include "mistruct.h"
+ #include "mifpoly.h"
  
  static miDashPtr CheckDashStorage();
  
***************
*** 72,78
  
      int x, y, len;
      int adx, ady, signdx, signdy;
!     int du, dv, e1, e2, e;
  
      lenCur = offset;
      which = EVEN_DASH;

--- 73,79 -----
  
      int x, y, len;
      int adx, ady, signdx, signdy;
!     int du, dv, e1, e2, e, base_e;
  
      lenCur = offset;
      which = EVEN_DASH;
***************
*** 124,130
  	pseg->pt = pt1;
  	pseg->e1 = e1;
  	pseg->e2 = e2;
! 	pseg->e = e;
  	pseg->which = which;
  	pseg->newLine = 1;
  

--- 125,131 -----
  	pseg->pt = pt1;
  	pseg->e1 = e1;
  	pseg->e2 = e2;
! 	base_e = pseg->e = e;
  	pseg->which = which;
  	pseg->newLine = 1;
  
***************
*** 164,170
  	    }
  
  	    lenCur++;
! 	    if (lenCur >= lenMax)
  	    {
  		nseg++;
  		pseg = CheckDashStorage(&psegBase, nseg, &nsegMax);

--- 165,171 -----
  	    }
  
  	    lenCur++;
! 	    if (lenCur >= lenMax && (len || npt <= 1))
  	    {
  		nseg++;
  		pseg = CheckDashStorage(&psegBase, nseg, &nsegMax);
***************
*** 187,195
  	} /* while len-- */
      } /* while --npt */
  
!     *pnseg = nseg;
!     pseg = CheckDashStorage(&psegBase, nseg+1, &nsegMax);
!     pseg->pt = pt2;
      return psegBase;
  } 
  

--- 188,204 -----
  	} /* while len-- */
      } /* while --npt */
  
!     /* Avoid duplication of last point... it confuses double-dashed caps. */
!     if (PtEqual(pseg->pt,pt2) && pseg->e == base_e)
!       *pnseg = nseg-1;
!     else {
!       *pnseg = nseg;
!       pseg = CheckDashStorage(&psegBase, nseg+1, &nsegMax);
!       pseg->pt = pt2;
!       pseg->e = base_e;
!       pseg->which = ~which;
!       pseg->newLine = 0;
!     }
      return psegBase;
  } 
  
@EOF
if test "`wc -lwc <midash.diff`" != '    121    336   2579'
then
	echo ERROR: wc results of midash.diff are `wc -lwc <midash.diff` should be     121    336   2579
fi

chmod 444 midash.diff

echo x - milines.diff
cat >milines.diff <<'@EOF'
*** Old/milines.c	Thu Jul 21 15:53:45 1988
--- New/milines.c	Fri Jul 22 11:01:49 1988
***************
*** 21,27
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: milines.c,v 1.51 88/02/02 18:20:15 rws Exp $ */
  
  /*
   *

--- 21,27 -----
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: milines.c,v 1.8 88/07/21 15:58:27 nathanm Exp $ */
  
  /*
   *
***************
*** 58,63
  		     (((a) <= 0) && ((b) <= 0)))
  
  static SppPointRec IntersectLines();
  
  /* MIWIDELINE - Public entry for PolyLine call
   * handles 1 segment wide lines specially.  Then it sets up the GC/Drawable

--- 58,64 -----
  		     (((a) <= 0) && ((b) <= 0)))
  
  static SppPointRec IntersectLines();
+ static int PtToAngle();
  
  /* MIWIDELINE - Public entry for PolyLine call
   * handles 1 segment wide lines specially.  Then it sets up the GC/Drawable
***************
*** 135,144
  	    yMin = min(yMin, pPts[i].y);
  	    yMax = max(yMax, pPts[i].y);
  	}
! 	xOrg = xMin - (width + 1)/2;
! 	yOrg = yMin - (width + 1)/2;
! 	dx = xMax - xMin + width + 1;
! 	dy = yMax - yMin + width + 1;
  	pDrawTo = (DrawablePtr) (*pDrawable->pScreen->CreatePixmap)
  	  (pDrawable->pScreen, dx, dy, 1, XYBitmap);
  	pGCTo = GetScratchGC(1, pDrawable->pScreen);

--- 136,145 -----
  	    yMin = min(yMin, pPts[i].y);
  	    yMax = max(yMax, pPts[i].y);
  	}
! 	if ((xOrg = xMin - width)<0) xOrg=0;
! 	if ((yOrg = yMin - width)<0) yOrg=0;
! 	dx = xMax - xOrg + width;
! 	dy = yMax - yOrg + width;
  	pDrawTo = (DrawablePtr) (*pDrawable->pScreen->CreatePixmap)
  	  (pDrawable->pScreen, dx, dy, 1);
  	pGCTo = GetScratchGC(1, pDrawable->pScreen);
***************
*** 140,146
  	dx = xMax - xMin + width + 1;
  	dy = yMax - yMin + width + 1;
  	pDrawTo = (DrawablePtr) (*pDrawable->pScreen->CreatePixmap)
! 	  (pDrawable->pScreen, dx, dy, 1, XYBitmap);
  	pGCTo = GetScratchGC(1, pDrawable->pScreen);
  	gcvals[GCVALSWIDTH] = width;
  	gcvals[GCVALSCAPSTYLE] = pGC->capStyle;

--- 141,147 -----
  	dx = xMax - xOrg + width;
  	dy = yMax - yOrg + width;
  	pDrawTo = (DrawablePtr) (*pDrawable->pScreen->CreatePixmap)
! 	  (pDrawable->pScreen, dx, dy, 1);
  	pGCTo = GetScratchGC(1, pDrawable->pScreen);
  	gcvals[GCVALSWIDTH] = width;
  	gcvals[GCVALSCAPSTYLE] = pGC->capStyle;
@EOF
if test "`wc -lwc <milines.diff`" != '     79    316   2345'
then
	echo ERROR: wc results of milines.diff are `wc -lwc <milines.diff` should be      79    316   2345
fi

chmod 444 milines.diff

echo x - miwidedash.diff
cat >miwidedash.diff <<'@EOF'
*** Old/miwidedash.c	Thu Jul 21 15:53:45 1988
--- New/miwidedash.c	Fri Jul 22 11:01:51 1988
***************
*** 21,27
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: miwidedash.c,v 1.16 88/02/06 11:55:53 rws Exp $ */
  /* Author: Todd "Mr. Wide Line" Newman */
  
  #include "X.h"

--- 21,27 -----
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: miwidedash.c,v 1.13 88/07/21 15:51:56 nathanm Exp $ */
  /* Author: Todd "Mr. Wide Line" Newman */
  
  #include "X.h"
***************
*** 39,44
  #define GCVALSBACK	2
  #define GCVALSWIDTH	3
  #define GCVALSCAPSTYLE	4
  #define GCVALSMASK	(GCFunction | GCForeground | GCBackground | \
  			 GCLineWidth | GCCapStyle)
  static int gcvals[] = {GXcopy, 1, 0, 0, 0};

--- 39,45 -----
  #define GCVALSBACK	2
  #define GCVALSWIDTH	3
  #define GCVALSCAPSTYLE	4
+ #define GCVALSJOINSTYLE	5
  #define GCVALSMASK	(GCFunction | GCForeground | GCBackground | \
  			 GCLineWidth | GCCapStyle | GCJoinStyle)
  static int gcvals[] = {GXcopy, 1, 0, 0, 0, 0};
***************
*** 40,47
  #define GCVALSWIDTH	3
  #define GCVALSCAPSTYLE	4
  #define GCVALSMASK	(GCFunction | GCForeground | GCBackground | \
! 			 GCLineWidth | GCCapStyle)
! static int gcvals[] = {GXcopy, 1, 0, 0, 0};
  
  /* Neither Fish nor Fowl, it's a Wide Dashed Line. */
  /* Actually, wide, dashed lines Are pretty foul. (You knew that was coming,

--- 41,48 -----
  #define GCVALSCAPSTYLE	4
  #define GCVALSJOINSTYLE	5
  #define GCVALSMASK	(GCFunction | GCForeground | GCBackground | \
! 			 GCLineWidth | GCCapStyle | GCJoinStyle)
! static int gcvals[] = {GXcopy, 1, 0, 0, 0, 0};
  
  /* Neither Fish nor Fowl, it's a Wide Dashed Line. */
  /* Actually, wide, dashed lines Are pretty foul. (You knew that was coming,
***************
*** 81,87
  		fXmajor;
      SppPointRec pt, PointStash[4], PolyPoints[4];
      DDXPointPtr pPtIn;
!     DrawablePtr	pDrawTo;
      GCPtr	pGCTo;
  
  

--- 82,88 -----
  		fXmajor;
      SppPointRec pt, PointStash[4], PolyPoints[4];
      DDXPointPtr pPtIn;
!     DrawablePtr	pDrawTo,pDrawToBG;
      GCPtr	pGCTo;
      int		initerr;
      int		edges_match;
***************
*** 83,88
      DDXPointPtr pPtIn;
      DrawablePtr	pDrawTo;
      GCPtr	pGCTo;
  
  
      m = EPSILON;

--- 84,91 -----
      DDXPointPtr pPtIn;
      DrawablePtr	pDrawTo,pDrawToBG;
      GCPtr	pGCTo;
+     int		initerr;
+     int		edges_match;
  
  
      m = EPSILON;
***************
*** 104,109
      width = (pGC->lineWidth ? pGC->lineWidth : 1);
      switch(pGC->alu)
      {
        case GXclear:		/* 0 */
        case GXcopy:		/* src */
        case GXcopyInverted:	/* NOT src */

--- 107,115 -----
      width = (pGC->lineWidth ? pGC->lineWidth : 1);
      switch(pGC->alu)
      {
+       case GXnoop:		/* dst */
+ 	return;
+ 	break;
        case GXclear:		/* 0 */
        case GXcopy:		/* src */
        case GXcopyInverted:	/* NOT src */
***************
*** 110,116
        case GXset:		/* 1 */
  	fTricky = FALSE;
          xOrg = yOrg = 0;
! 	pDrawTo = pDraw;
  	pGCTo = pGC;
  	break;
        case GXand:		/* src AND dst */

--- 116,122 -----
        case GXset:		/* 1 */
  	fTricky = FALSE;
          xOrg = yOrg = 0;
! 	pDrawToBG = pDrawTo = pDraw;
  	pGCTo = pGC;
  	break;
        case GXand:		/* src AND dst */
***************
*** 116,122
        case GXand:		/* src AND dst */
        case GXandReverse:	/* src AND NOT dst */
        case GXandInverted:	/* NOT src AND dst */
-       case GXnoop:		/* dst */
        case GXxor:		/* src XOR dst */
        case GXor	:		/* src OR dst */
        case GXnor:		/* NOT src AND NOT dst */

--- 122,127 -----
        case GXand:		/* src AND dst */
        case GXandReverse:	/* src AND NOT dst */
        case GXandInverted:	/* NOT src AND dst */
        case GXxor:		/* src XOR dst */
        case GXor	:		/* src OR dst */
        case GXnor:		/* NOT src AND NOT dst */
***************
*** 136,145
  	    yMin = min(yMin, pPtsIn[i].y);
  	    yMax = max(yMax, pPtsIn[i].y);
  	}
! 	xOrg = xMin - (width + 1)/2;
! 	yOrg = yMin - (width + 1)/2;
! 	dxi = xMax - xMin + width;
! 	dyi = yMax - yMin + width;
  	pDrawTo = (DrawablePtr) (*pDraw->pScreen->CreatePixmap)
  	  (pDraw->pScreen, dxi, dyi, 1, XYBitmap);
  	pGCTo =  GetScratchGC(1, pDraw->pScreen);

--- 141,150 -----
  	    yMin = min(yMin, pPtsIn[i].y);
  	    yMax = max(yMax, pPtsIn[i].y);
  	}
! 	if ((xOrg = xMin - width)<0) xOrg=0;
! 	if ((yOrg = yMin - width)<0) yOrg=0;
! 	dxi = xMax - xOrg + width;
! 	dyi = yMax - yOrg + width;
  	pDrawTo = (DrawablePtr) (*pDraw->pScreen->CreatePixmap)
  	  (pDraw->pScreen, dxi, dyi, 1);
  	if (IsDoubleDash)
***************
*** 141,147
  	dxi = xMax - xMin + width;
  	dyi = yMax - yMin + width;
  	pDrawTo = (DrawablePtr) (*pDraw->pScreen->CreatePixmap)
! 	  (pDraw->pScreen, dxi, dyi, 1, XYBitmap);
  	pGCTo =  GetScratchGC(1, pDraw->pScreen);
  	gcvals[GCVALSWIDTH] = width;
  	gcvals[GCVALSCAPSTYLE] = pGC->capStyle;

--- 146,155 -----
  	dxi = xMax - xOrg + width;
  	dyi = yMax - yOrg + width;
  	pDrawTo = (DrawablePtr) (*pDraw->pScreen->CreatePixmap)
! 	  (pDraw->pScreen, dxi, dyi, 1);
! 	if (IsDoubleDash)
! 	  pDrawToBG = (DrawablePtr) (*pDraw->pScreen->CreatePixmap)
! 	    (pDraw->pScreen, dxi, dyi, 1);
  	pGCTo =  GetScratchGC(1, pDraw->pScreen);
  	gcvals[GCVALSWIDTH] = width;
  	gcvals[GCVALSCAPSTYLE] = pGC->capStyle;
***************
*** 145,150
  	pGCTo =  GetScratchGC(1, pDraw->pScreen);
  	gcvals[GCVALSWIDTH] = width;
  	gcvals[GCVALSCAPSTYLE] = pGC->capStyle;
  	DoChangeGC(pGCTo, GCVALSMASK, gcvals, 0);
  	ValidateGC(pDrawTo, pGCTo);
  	miClearDrawable(pDrawTo, pGCTo);

--- 153,159 -----
  	pGCTo =  GetScratchGC(1, pDraw->pScreen);
  	gcvals[GCVALSWIDTH] = width;
  	gcvals[GCVALSCAPSTYLE] = pGC->capStyle;
+ 	gcvals[GCVALSJOINSTYLE] = pGC->joinStyle;
  	DoChangeGC(pGCTo, GCVALSMASK, gcvals, 0);
  	ValidateGC(pDrawTo, pGCTo);
  	miClearDrawable(pDrawTo, pGCTo);
***************
*** 148,153
  	DoChangeGC(pGCTo, GCVALSMASK, gcvals, 0);
  	ValidateGC(pDrawTo, pGCTo);
  	miClearDrawable(pDrawTo, pGCTo);
  
      }
  

--- 157,163 -----
  	DoChangeGC(pGCTo, GCVALSMASK, gcvals, 0);
  	ValidateGC(pDrawTo, pGCTo);
  	miClearDrawable(pDrawTo, pGCTo);
+ 	if (IsDoubleDash) miClearDrawable(pDrawToBG, pGCTo);
  
      }
  
***************
*** 156,162
      if(!(pPts = (SppPointPtr) Xalloc((nseg + 1) * sizeof(SppPointRec))))
      {
  	Xfree(dashes);
! 	if(fTricky)
  	    (*pDraw->pScreen->DestroyPixmap)(pDrawTo);
  	return;
      }

--- 166,172 -----
      if(!(pPts = (SppPointPtr) Xalloc((nseg + 1) * sizeof(SppPointRec))))
      {
  	Xfree(dashes);
! 	if(fTricky) {
  	    (*pDraw->pScreen->DestroyPixmap)(pDrawTo);
  	    if (IsDoubleDash) (*pDraw->pScreen->DestroyPixmap)(pDrawToBG);
              FreeScratchGC(pGCTo);
***************
*** 158,163
  	Xfree(dashes);
  	if(fTricky)
  	    (*pDraw->pScreen->DestroyPixmap)(pDrawTo);
  	return;
      }
      ppt = pPts;

--- 168,176 -----
  	Xfree(dashes);
  	if(fTricky) {
  	    (*pDraw->pScreen->DestroyPixmap)(pDrawTo);
+ 	    if (IsDoubleDash) (*pDraw->pScreen->DestroyPixmap)(pDrawToBG);
+             FreeScratchGC(pGCTo);
+ 	}
  	return;
      }
      ppt = pPts;
***************
*** 164,171
      pPtIn = pPtsIn;
      whichPrev = EVEN_DASH;
  
!     j = 0;
!     for(i = 0; i <= nseg; i++)
      {
  	if(dashes[i].newLine)
  	{

--- 177,185 -----
      pPtIn = pPtsIn;
      whichPrev = EVEN_DASH;
  
!     edges_match = npt>1 && nseg>=2 && PtEqual(pPtsIn[0], pPtsIn[npt-1]);
! 
!     if (nseg)
      {
        j = 0;
        for(i = 0; i <= nseg; i++)
***************
*** 167,172
      j = 0;
      for(i = 0; i <= nseg; i++)
      {
  	if(dashes[i].newLine)
  	{
  	    /* calculate slope of the line */

--- 181,189 -----
  
      if (nseg)
      {
+       j = 0;
+       for(i = 0; i <= nseg; i++)
+       {
  	if(dashes[i].newLine)
  	{
  	    /* calculate slope of the line */
***************
*** 170,177
  	if(dashes[i].newLine)
  	{
  	    /* calculate slope of the line */
! 	    dx = (double) ((pPtsIn + 1)->x - pPtIn->x);
! 	    dy = (double) ((pPtsIn + 1)->y - pPtIn->y);
  	    pPtIn++;
  	    /* use slope of line to figure out how to use error term */
  	    fXmajor = (fabs(dx) > fabs(dy));

--- 187,194 -----
  	if(dashes[i].newLine)
  	{
  	    /* calculate slope of the line */
! 	    dx = (double) ((pPtIn + 1)->x - pPtIn->x);
! 	    dy = (double) ((pPtIn + 1)->y - pPtIn->y);
  	    pPtIn++;
  	    /* calculate initial error term */
  	    initerr=dashes[i].e;
***************
*** 173,178
  	    dx = (double) ((pPtsIn + 1)->x - pPtIn->x);
  	    dy = (double) ((pPtsIn + 1)->y - pPtIn->y);
  	    pPtIn++;
  	    /* use slope of line to figure out how to use error term */
  	    fXmajor = (fabs(dx) > fabs(dy));
  	    if(fXmajor)

--- 190,197 -----
  	    dx = (double) ((pPtIn + 1)->x - pPtIn->x);
  	    dy = (double) ((pPtIn + 1)->y - pPtIn->y);
  	    pPtIn++;
+ 	    /* calculate initial error term */
+ 	    initerr=dashes[i].e;
  	    /* use slope of line to figure out how to use error term */
  	    fXmajor = (fabs(dx) > fabs(dy));
  	    if(fXmajor)
***************
*** 176,182
  	    /* use slope of line to figure out how to use error term */
  	    fXmajor = (fabs(dx) > fabs(dy));
  	    if(fXmajor)
! 		m = !ISZERO(dx) ? (dy/dx) : EPSILON;
  	    else
  		m = !ISZERO(dy) ? (dx/dy) : EPSILON;
  	}

--- 195,201 -----
  	    /* use slope of line to figure out how to use error term */
  	    fXmajor = (fabs(dx) > fabs(dy));
  	    if(fXmajor)
! 		m = sign(dy)/(!ISZERO(dx) ? 2.0*fabs(dx) : EPSILON);
  	    else
  		m = sign(dx)/(!ISZERO(dy) ? 2.0*fabs(dy) : EPSILON);
  	}
***************
*** 178,184
  	    if(fXmajor)
  		m = !ISZERO(dx) ? (dy/dx) : EPSILON;
  	    else
! 		m = !ISZERO(dy) ? (dx/dy) : EPSILON;
  	}
  	/* Add this point to our list, adjusting the error term as needed */
  	ppt->x = (double) dashes[i].pt.x;

--- 197,203 -----
  	    if(fXmajor)
  		m = sign(dy)/(!ISZERO(dx) ? 2.0*fabs(dx) : EPSILON);
  	    else
! 		m = sign(dx)/(!ISZERO(dy) ? 2.0*fabs(dy) : EPSILON);
  	}
  	/* Add this point to our list, adjusting the error term as needed */
  	ppt->x = (double) dashes[i].pt.x +
***************
*** 181,188
  		m = !ISZERO(dy) ? (dx/dy) : EPSILON;
  	}
  	/* Add this point to our list, adjusting the error term as needed */
! 	ppt->x = (double) dashes[i].pt.x;
! 	ppt->y = (double) dashes[i].pt.y;
  
  	if(i < 2 || i > nseg - 2)
  	{

--- 200,209 -----
  		m = sign(dx)/(!ISZERO(dy) ? 2.0*fabs(dy) : EPSILON);
  	}
  	/* Add this point to our list, adjusting the error term as needed */
! 	ppt->x = (double) dashes[i].pt.x +
! 	    	    (fXmajor ? 0.0 : (double)(dashes[i].e-initerr)*m);
! 	ppt->y = (double) dashes[i].pt.y +
! 	    	    (fXmajor ? (double)(dashes[i].e-initerr)*m : 0.0);
  
  	if(i < 2 || i > nseg - 2)
  	{
***************
*** 204,209
  	    whichPrev = which;
  	}
  
      }
      if(IsDoubleDash)
      {

--- 225,231 -----
  	    whichPrev = which;
  	}
  
+       }
      }
      else if (!IsDoubleDash)
      {
***************
*** 205,210
  	}
  
      }
      if(IsDoubleDash)
      {
          ppt = pPts;

--- 227,239 -----
  
        }
      }
+     else if (!IsDoubleDash)
+     {
+ 	pPts->x = pPtsIn->x;
+ 	pPts->y = pPtsIn->y;
+ 	(*pGC->LineHelper)(pDrawTo, pGCTo, TRUE, 1, pPts, xOrg, yOrg);
+     }
+ 
      if(IsDoubleDash)
      {
  	/* Handle possible pathological cases */
***************
*** 207,212
      }
      if(IsDoubleDash)
      {
          ppt = pPts;
          pPtIn = pPtsIn;
  	whichPrev = EVEN_DASH;

--- 236,249 -----
  
      if(IsDoubleDash)
      {
+ 	/* Handle possible pathological cases */
+ 	if (nseg==0) {
+ 	  PointStash[0].x = pPtsIn[0].x;
+ 	  PointStash[0].y = pPtsIn[0].y;
+ 	  j = 1;
+ 	}
+ 	for (; j<4 ; j++) PointStash[j] = PointStash[j-1];
+ 
          ppt = pPts;
          pPtIn = pPtsIn;
  	whichPrev = EVEN_DASH;
***************
*** 211,218
          pPtIn = pPtsIn;
  	whichPrev = EVEN_DASH;
  
! 	/* cap the first (and maybe the last) line segment(s)  appropriately */
! 	if(pGC->capStyle == CapProjecting)
  	{
  	    pt = miExtendSegment(PointStash[0], PointStash[1], width/2);
  	    miGetPts(pt, PointStash[0],

--- 248,254 -----
          pPtIn = pPtsIn;
  	whichPrev = EVEN_DASH;
  
! 	if (edges_match)
  	{
  	/* Join the first and last line segment by drawing last dash and
  	   first dash.  If last dash is odd, it will later be overwritten */
***************
*** 214,220
  	/* cap the first (and maybe the last) line segment(s)  appropriately */
  	if(pGC->capStyle == CapProjecting)
  	{
! 	    pt = miExtendSegment(PointStash[0], PointStash[1], width/2);
  	    miGetPts(pt, PointStash[0],
  	        &PolyPoints[0], &PolyPoints[1], &PolyPoints[2], &PolyPoints[3],
  	        width);

--- 250,278 -----
  
  	if (edges_match)
  	{
! 	/* Join the first and last line segment by drawing last dash and
! 	   first dash.  If last dash is odd, it will later be overwritten */
! 	  SppPointRec joinPts[3];
! 	  joinPts[0].x = PointStash[2].x;
! 	  joinPts[0].y = PointStash[2].y;
! 	  joinPts[1].x = PointStash[0].x;
! 	  joinPts[1].y = PointStash[0].y;
! 	  joinPts[2].x = PointStash[1].x;
! 	  joinPts[2].y = PointStash[1].y;
! 	  (*pGC->LineHelper)(pDrawTo, pGCTo, FALSE, 3, joinPts, xOrg, yOrg);
! 	}
! 	else
! 	{
! 	/* cap the first (and maybe the last) line segment(s)  appropriately */
! 	  if(pGC->capStyle == CapProjecting)
! 	  {
! 	    if (PtEqual(PointStash[0], PointStash[1]))
! 	    {
! 	      pt.x = PointStash[0].x;
! 	      pt.y = PointStash[0].y - width/2.0;
! 	    }
! 	    else
! 	      pt = miExtendSegment(PointStash[0], PointStash[1], width/2);
  	    miGetPts(pt, PointStash[0],
  	        &PolyPoints[0], &PolyPoints[1], &PolyPoints[2], &PolyPoints[3],
  	        width);
***************
*** 218,224
  	    miGetPts(pt, PointStash[0],
  	        &PolyPoints[0], &PolyPoints[1], &PolyPoints[2], &PolyPoints[3],
  	        width);
! 	    miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, xOrg, yOrg);
  	    if(dashes[nseg].which == EVEN_DASH)
  	    {
  	        pt = miExtendSegment(PointStash[3], PointStash[2], width/2);

--- 276,282 -----
  	    miGetPts(pt, PointStash[0],
  	        &PolyPoints[0], &PolyPoints[1], &PolyPoints[2], &PolyPoints[3],
  	        width);
! 	    miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, -xOrg, -yOrg);
  	    if(dashes[nseg].which == EVEN_DASH)
  	    {
  	        if (PtEqual(PointStash[2], PointStash[3]))
***************
*** 221,227
  	    miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, xOrg, yOrg);
  	    if(dashes[nseg].which == EVEN_DASH)
  	    {
! 	        pt = miExtendSegment(PointStash[3], PointStash[2], width/2);
  	        miGetPts(pt, PointStash[3],
  	            &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);

--- 279,291 -----
  	    miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, -xOrg, -yOrg);
  	    if(dashes[nseg].which == EVEN_DASH)
  	    {
! 	        if (PtEqual(PointStash[2], PointStash[3]))
! 	        {
! 	          pt.x = PointStash[3].x;
! 	          pt.y = PointStash[3].y + width/2.0;
! 	        }
! 	        else
! 	          pt = miExtendSegment(PointStash[3], PointStash[2], width/2);
  	        miGetPts(pt, PointStash[3],
  	            &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);
***************
*** 225,231
  	        miGetPts(pt, PointStash[3],
  	            &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);
! 	        miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, xOrg, yOrg);
  	    }
  	 
  	}

--- 289,295 -----
  	        miGetPts(pt, PointStash[3],
  	            &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);
! 	        miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, -xOrg, -yOrg);
  	    }
  	 
  	  }
***************
*** 228,236
  	        miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, xOrg, yOrg);
  	    }
  	 
! 	}
! 	else if (pGC->capStyle == CapRound)
! 	{
  	    miGetPts(PointStash[0], PointStash[1],
  	        &PolyPoints[0], &PolyPoints[1], &PolyPoints[2], &PolyPoints[3],
  	        width);

--- 292,300 -----
  	        miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, -xOrg, -yOrg);
  	    }
  	 
! 	  }
! 	  else if (pGC->capStyle == CapRound)
! 	  {
  	    miGetPts(PointStash[0], PointStash[1],
  	        &PolyPoints[0], &PolyPoints[1], &PolyPoints[2], &PolyPoints[3],
  	        width);
***************
*** 244,249
  	        miRoundCap(pDrawTo, pGCTo, PointStash[3], PointStash[2],
  	                 PolyPoints[3], PolyPoints[0], SecondEnd, xOrg, yOrg);
  	    }
  	}
  	oldfore = pGC->fgPixel;
  	newfore = pGC->bgPixel;

--- 308,314 -----
  	        miRoundCap(pDrawTo, pGCTo, PointStash[3], PointStash[2],
  	                 PolyPoints[3], PolyPoints[0], SecondEnd, xOrg, yOrg);
  	    }
+ 	  }
  	}
  	if (!fTricky) {
  	    oldfore = pGC->fgPixel;
***************
*** 245,254
  	                 PolyPoints[3], PolyPoints[0], SecondEnd, xOrg, yOrg);
  	    }
  	}
! 	oldfore = pGC->fgPixel;
! 	newfore = pGC->bgPixel;
! 	DoChangeGC(pGCTo, GCForeground, &newfore, 0);
! 	ValidateGC(pDrawTo, pGCTo);
  
  	for(i = 0; i <= nseg; i++)
  	{

--- 310,321 -----
  	    }
  	  }
  	}
! 	if (!fTricky) {
! 	    oldfore = pGC->fgPixel;
! 	    newfore = pGC->bgPixel;
! 	    DoChangeGC(pGCTo, GCForeground, &newfore, 0);
! 	}
! 	ValidateGC(pDrawToBG, pGCTo);
  
  	for(i = 0; i <= nseg; i++)
  	{
***************
*** 257,262
  		/* calculate slope of the line */
  		dx = (double) ((pPtIn + 1)->x - pPtIn->x);
  		dy = (double) ((pPtIn + 1)->y - pPtIn->y);
  		/* use slope of line to figure out how to use error term */
  		fXmajor = (fabs(dx) > fabs(dy));
  		if(fXmajor)

--- 324,332 -----
  		/* calculate slope of the line */
  		dx = (double) ((pPtIn + 1)->x - pPtIn->x);
  		dy = (double) ((pPtIn + 1)->y - pPtIn->y);
+ 		pPtIn++;
+ 	        /* calculate initial error term */
+ 	        initerr=dashes[i].e;
  		/* use slope of line to figure out how to use error term */
  		fXmajor = (fabs(dx) > fabs(dy));
  	        if(fXmajor)
***************
*** 259,269
  		dy = (double) ((pPtIn + 1)->y - pPtIn->y);
  		/* use slope of line to figure out how to use error term */
  		fXmajor = (fabs(dx) > fabs(dy));
! 		if(fXmajor)
! 		    m = ISZERO(dx) ? (dy/dx) : EPSILON;
! 		else
! 		    m = ISZERO(dy) ? (dx/dy) : EPSILON;
! 		pPtIn++;
  	    }
  	    /* Add this point to our list */
  	    ppt->x = (double) dashes[i].pt.x +

--- 329,338 -----
  	        initerr=dashes[i].e;
  		/* use slope of line to figure out how to use error term */
  		fXmajor = (fabs(dx) > fabs(dy));
! 	        if(fXmajor)
! 		    m = sign(dy)/(!ISZERO(dx) ? 2.0*fabs(dx) : EPSILON);
! 	        else
! 		    m = sign(dx)/(!ISZERO(dy) ? 2.0*fabs(dy) : EPSILON);
  	    }
  	    /* Add this point to our list */
  	    ppt->x = (double) dashes[i].pt.x +
***************
*** 267,273
  	    }
  	    /* Add this point to our list */
  	    ppt->x = (double) dashes[i].pt.x +
! 	    		(fXmajor ? 0.0 : dashes[i].e*m);
  	    ppt->y = (double) dashes[i].pt.y +
  	    		(fXmajor ? dashes[i].e*m : 0.0);
  	    ppt++;

--- 336,342 -----
  	    }
  	    /* Add this point to our list */
  	    ppt->x = (double) dashes[i].pt.x +
! 	    	        (fXmajor ? 0.0 : (double)(dashes[i].e-initerr)*m);
  	    ppt->y = (double) dashes[i].pt.y +
  	    	        (fXmajor ? (double)(dashes[i].e-initerr)*m : 0.0);
  	    ppt++;
***************
*** 269,275
  	    ppt->x = (double) dashes[i].pt.x +
  	    		(fXmajor ? 0.0 : dashes[i].e*m);
  	    ppt->y = (double) dashes[i].pt.y +
! 	    		(fXmajor ? dashes[i].e*m : 0.0);
  	    ppt++;
  	    which = dashes[i].which;
  	    if((which != whichPrev) || (i == nseg))

--- 338,344 -----
  	    ppt->x = (double) dashes[i].pt.x +
  	    	        (fXmajor ? 0.0 : (double)(dashes[i].e-initerr)*m);
  	    ppt->y = (double) dashes[i].pt.y +
! 	    	        (fXmajor ? (double)(dashes[i].e-initerr)*m : 0.0);
  	    ppt++;
  	    which = dashes[i].which;
  	    if((which != whichPrev) || (i == nseg))
***************
*** 277,283
  		if(whichPrev == ODD_DASH)
  		{
  		    /* Display the collected line */
! 		    (*pGC->LineHelper)(pDrawTo, pGCTo, FALSE,
  				       ppt - pPts, pPts, xOrg, yOrg);
  		}
  		/* Reset the line  and start a new dash */

--- 346,352 -----
  		if(whichPrev == ODD_DASH)
  		{
  		    /* Display the collected line */
! 		    (*pGC->LineHelper)(pDrawToBG, pGCTo, FALSE,
  				       ppt - pPts, pPts, xOrg, yOrg);
  		}
  		/* Reset the line  and start a new dash */
***************
*** 289,296
  	}
  
  	/* cap the last line segments appropriately */
! 	if(dashes[nseg].which == ODD_DASH)
! 	{
  	    if(pGC->capStyle == CapProjecting)
  	    {
  		pt = miExtendSegment(PointStash[3], PointStash[2], width/2);

--- 358,366 -----
  	}
  
  	/* cap the last line segments appropriately */
! 	if (!edges_match) {
! 	  if(dashes[nseg].which == ODD_DASH)
! 	  {
  	    if(pGC->capStyle == CapProjecting)
  	    {
  	        if (PtEqual(PointStash[2], PointStash[3]))
***************
*** 293,299
  	{
  	    if(pGC->capStyle == CapProjecting)
  	    {
! 		pt = miExtendSegment(PointStash[3], PointStash[2], width/2);
  		miGetPts(pt, PointStash[3],
  		    &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);

--- 363,375 -----
  	  {
  	    if(pGC->capStyle == CapProjecting)
  	    {
! 	        if (PtEqual(PointStash[2], PointStash[3]))
! 	        {
! 	          pt.x = PointStash[3].x;
! 	          pt.y = PointStash[3].y + width/2.0;
! 	        }
! 	        else
! 	          pt = miExtendSegment(PointStash[3], PointStash[2], width/2);
  		miGetPts(pt, PointStash[3],
  		    &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);
***************
*** 297,303
  		miGetPts(pt, PointStash[3],
  		    &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);
! 		miFillSppPoly(pDrawTo, pGCTo, 4, PolyPoints, xOrg, yOrg);
  	     
  	    }
  	    else if (pGC->capStyle == CapRound)

--- 373,379 -----
  		miGetPts(pt, PointStash[3],
  		    &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);
! 		miFillSppPoly(pDrawToBG, pGCTo, 4, PolyPoints, -xOrg, -yOrg);
  	     
  	    }
  	    else if (pGC->capStyle == CapRound)
***************
*** 305,311
  		miGetPts(PointStash[3], PointStash[2],
  		    &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);
! 		miRoundCap(pDrawTo, pGCTo, PointStash[3], PointStash[2],
  			 PolyPoints[3], PolyPoints[0], SecondEnd, xOrg, yOrg);
  	    }
  	}

--- 381,387 -----
  		miGetPts(PointStash[3], PointStash[2],
  		    &PolyPoints[0], &PolyPoints[1], &PolyPoints[2],
  		    &PolyPoints[3], width);
! 		miRoundCap(pDrawToBG, pGCTo, PointStash[3], PointStash[2],
  			 PolyPoints[3], PolyPoints[0], SecondEnd, xOrg, yOrg);
  	    }
  	  }
***************
*** 308,313
  		miRoundCap(pDrawTo, pGCTo, PointStash[3], PointStash[2],
  			 PolyPoints[3], PolyPoints[0], SecondEnd, xOrg, yOrg);
  	    }
  	}
  	DoChangeGC(pGCTo, GCForeground, &oldfore, 0);
      }

--- 384,390 -----
  		miRoundCap(pDrawToBG, pGCTo, PointStash[3], PointStash[2],
  			 PolyPoints[3], PolyPoints[0], SecondEnd, xOrg, yOrg);
  	    }
+ 	  }
  	}
  	if (!fTricky) DoChangeGC(pGCTo, GCForeground, &oldfore, 0);
      }
***************
*** 309,315
  			 PolyPoints[3], PolyPoints[0], SecondEnd, xOrg, yOrg);
  	    }
  	}
! 	DoChangeGC(pGCTo, GCForeground, &oldfore, 0);
      }
      ValidateGC(pDrawTo, pGCTo);
      if(fTricky)

--- 386,392 -----
  	    }
  	  }
  	}
! 	if (!fTricky) DoChangeGC(pGCTo, GCForeground, &oldfore, 0);
      }
      ValidateGC(pDrawTo, pGCTo);
      if(fTricky)
***************
*** 314,319
      ValidateGC(pDrawTo, pGCTo);
      if(fTricky)
      {
  	if (pGC->miTranslate && (pDraw->type == DRAWABLE_WINDOW) )
  	{
  	    xOrg += ((WindowPtr)pDraw)->absCorner.x;

--- 391,398 -----
      ValidateGC(pDrawTo, pGCTo);
      if(fTricky)
      {
+ 	unsigned long alu=GXandInverted;
+ 
  	if (pGC->miTranslate && (pDraw->type == DRAWABLE_WINDOW) )
  	{
  	    xOrg += ((WindowPtr)pDraw)->absCorner.x;
***************
*** 320,325
  	    yOrg += ((WindowPtr)pDraw)->absCorner.y;
  	}
  
  	(*pGC->PushPixels)(pGC, pDrawTo, pDraw, dxi, dyi, xOrg, yOrg);
  	(*pDraw->pScreen->DestroyPixmap)(pDrawTo);
          FreeScratchGC(pGCTo);

--- 399,410 -----
  	    yOrg += ((WindowPtr)pDraw)->absCorner.y;
  	}
  
+ 	if (IsDoubleDash) {
+ 	    DoChangeGC(pGCTo, GCFunction, &alu, 0);
+             ValidateGC(pDrawTo, pGCTo);
+ 	    (*pGCTo->PushPixels)(pGCTo, pDrawToBG, pDrawTo, dxi, dyi, 0, 0);
+ 	}
+ 
  	(*pGC->PushPixels)(pGC, pDrawTo, pDraw, dxi, dyi, xOrg, yOrg);
  
  	if (IsDoubleDash) {
***************
*** 321,326
  	}
  
  	(*pGC->PushPixels)(pGC, pDrawTo, pDraw, dxi, dyi, xOrg, yOrg);
  	(*pDraw->pScreen->DestroyPixmap)(pDrawTo);
          FreeScratchGC(pGCTo);
      }

--- 406,422 -----
  	}
  
  	(*pGC->PushPixels)(pGC, pDrawTo, pDraw, dxi, dyi, xOrg, yOrg);
+ 
+ 	if (IsDoubleDash) {
+ 	  oldfore = pGC->fgPixel;
+ 	  newfore = pGC->bgPixel;
+ 	  DoChangeGC(pGC, GCForeground, &newfore, 0);
+ 	  ValidateGC(pDraw, pGC);
+ 	  (*pGC->PushPixels)(pGC, pDrawToBG, pDraw, dxi, dyi, xOrg, yOrg);
+ 	  DoChangeGC(pGC, GCForeground, &oldfore, 0);
+ 	  ValidateGC(pDraw, pGC);
+ 	}
+ 
  	(*pDraw->pScreen->DestroyPixmap)(pDrawTo);
  	if (IsDoubleDash) (*pDraw->pScreen->DestroyPixmap)(pDrawToBG);
          FreeScratchGC(pGCTo);
***************
*** 322,327
  
  	(*pGC->PushPixels)(pGC, pDrawTo, pDraw, dxi, dyi, xOrg, yOrg);
  	(*pDraw->pScreen->DestroyPixmap)(pDrawTo);
          FreeScratchGC(pGCTo);
      }
      Xfree(dashes);

--- 418,424 -----
  	}
  
  	(*pDraw->pScreen->DestroyPixmap)(pDrawTo);
+ 	if (IsDoubleDash) (*pDraw->pScreen->DestroyPixmap)(pDrawToBG);
          FreeScratchGC(pGCTo);
      }
      Xfree(dashes);
@EOF
if test "`wc -lwc <miwidedash.diff`" != '    945   3050  25926'
then
	echo ERROR: wc results of miwidedash.diff are `wc -lwc <miwidedash.diff` should be     945   3050  25926
fi

chmod 444 miwidedash.diff

exit 0

