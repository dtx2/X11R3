Return-Path: deboor%nutmeg.Berkeley.EDU@ginger.berkeley.edu
Received: from nutmeg.Berkeley.EDU by expo.lcs.mit.edu; Mon, 11 Apr 88 07:37:02 EDT
Received: by nutmeg.Berkeley.EDU (5.57/1.25)
	id AA06037; Sat, 9 Apr 88 21:40:32 PDT
Date: Sat, 9 Apr 88 21:40:32 PDT
From: deboor%nutmeg.Berkeley.EDU@ginger.berkeley.edu (Adam R de Boor)
Message-Id: <8804100440.AA06037@nutmeg.Berkeley.EDU>
To: x11%brie@sun.com, xbugs@expo.lcs.mit.edu
Subject: problems with the Text widget

### bug number:   345
### area:         Xt
### severity:     
### assigned to:  swick
### status:       closed
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/160C or 3/75M

CLIENT OPERATING SYSTEM:
	SunOS 3.2 or Sprite (Berkeley experimental)

DISPLAY:
	cg2 or bw2

SYNOPSIS:
	 Text widget does many, many extraneous XClear's, doesn't set
	 firstPos correctly in its XtTextBlocks at all times and doesn't
	 handle wordBreak on the final line correctly.

DESCRIPTION:
	When Text updates text (most noticeably when performing an InsertChar),
	it clears the entire screen below the insertion point one line at
	a time, which is painfully slow. The reason it does the excess clears
	is it refuses to stop looping unless pos2 isn't text.lastPos. I
	could find no reason for this condition, especially since the only
	insertions in an append-mode window are at the end.

	When word-wrap comes into effect in InsertChar on the final line of
	the Text widget, only the final character of the wrapped word is
	displayed on the newly-visible line when the window scrolls because
	the update range goes only to the new end-of-line and misses the
	wrapped word since i only goes to ctx->text.lt.lines - 1.

	Various places in Text don't set firstPos to 0 in the XtTextBlocks
	they pass to (* ctx->source.Replace). This didn't matter before
	since neither the Disk nor the String sources pays any attention
	to the firstPos in the passed block. This is another bug to be
	reported later, when it annoys me enough, unless you feel like
	fixing it before then...
REPEAT-BY:
	Try and use it to create a tty-like widget, which I'll send you
	folks if you're interested...

FIX:
*** /tmp/,RCSt1a06011	Sat Apr  9 20:29:22 1988
--- Text.c	Sat Apr  9 20:30:08 1988
***************
*** 778,783
  	    }
  	    if (startPos > ctx->text.lastPos)
  		ctx->text.lt.info[i + 1].endX = ctx->text.leftmargin;
  	    ctx->text.lt.info[i + 1].position = startPos;
  	    x = ctx->text.lt.info[i + 1].x;
  	}

--- 778,791 -----
  	    }
  	    if (startPos > ctx->text.lastPos)
  		ctx->text.lt.info[i + 1].endX = ctx->text.leftmargin;
+ 	    /*
+ 	     * To account for word-wrap on the final line, we set endPos
+ 	     * to be the previous position of the next line. In the normal
+ 	     * course of events, this assignment won't change anything,
+ 	     * since we will have broken out of the loop with the two
+ 	     * being the same.
+ 	     */
+ 	    endPos = ctx->text.lt.info[i+1].position;
  	    ctx->text.lt.info[i + 1].position = startPos;
  	    x = ctx->text.lt.info[i + 1].x;
  	}
***************
*** 819,825
      height = ctx->text.lt.info[1].y - ctx->text.lt.info[0].y;
      for (i = line; i < ctx->text.lt.lines; i++) {
  	endPos = ctx->text.lt.info[i + 1].position;
! 	if (endPos > pos2)
  	    endPos = pos2;
  	if (endPos > startPos) {
  	    if (x == ctx->text.leftmargin)

--- 827,837 -----
      height = ctx->text.lt.info[1].y - ctx->text.lt.info[0].y;
      for (i = line; i < ctx->text.lt.lines; i++) {
  	endPos = ctx->text.lt.info[i + 1].position;
! 	height = ctx->text.lt.info[i + 1].y - ctx->text.lt.info[i].y;
! 	if (endPos > pos2) {
! 	    /*
! 	     * Handle partial line updates
! 	     */
  	    endPos = pos2;
  	}
  	if (endPos > startPos) {
***************
*** 821,826
  	endPos = ctx->text.lt.info[i + 1].position;
  	if (endPos > pos2)
  	    endPos = pos2;
  	if (endPos > startPos) {
  	    if (x == ctx->text.leftmargin)
                  (*ctx->text.sink->ClearToBackground)

--- 833,839 -----
  	     * Handle partial line updates
  	     */
  	    endPos = pos2;
+ 	}
  	if (endPos > startPos) {
  	    if (x == ctx->text.leftmargin)
                  (*ctx->text.sink->ClearToBackground)
***************
*** 837,842
  			min(endPos, ctx->text.s.right));
  		DisplayText(ctx, ctx->text.s.right, endPos);
  	    }
  	}
  	startPos = endPos;
  	height = ctx->text.lt.info[i + 1].y - ctx->text.lt.info[i].y;

--- 850,865 -----
  			min(endPos, ctx->text.s.right));
  		DisplayText(ctx, ctx->text.s.right, endPos);
  	    }
+ 	    if (endPos == ctx->text.lt.info[i+1].position) {
+ 		/*
+ 		 * If updated entire line, clear out space to its right.
+ 		 */
+ 		(*ctx->text.sink->ClearToBackground)(ctx,
+ 						     ctx->text.lt.info[i].endX,
+ 						     y,
+ 						     ctx->core.width,
+ 						     height);
+ 	    }
  	}
  	startPos = endPos;
  	x = ctx->text.leftmargin;
***************
*** 839,847
  	    }
  	}
  	startPos = endPos;
- 	height = ctx->text.lt.info[i + 1].y - ctx->text.lt.info[i].y;
-         (*ctx->text.sink->ClearToBackground)(ctx,
- 	    ctx->text.lt.info[i].endX, y, 999, height);
  	x = ctx->text.leftmargin;
  	y = ctx->text.lt.info[i + 1].y;
  	if ((endPos == pos2) && (endPos != ctx->text.lastPos))

--- 862,867 -----
  	    }
  	}
  	startPos = endPos;
  	x = ctx->text.leftmargin;
  	y = ctx->text.lt.info[i + 1].y;
  	if (endPos == pos2) {
***************
*** 844,850
  	    ctx->text.lt.info[i].endX, y, 999, height);
  	x = ctx->text.leftmargin;
  	y = ctx->text.lt.info[i + 1].y;
! 	if ((endPos == pos2) && (endPos != ctx->text.lastPos))
  	    break;
      }
  }

--- 864,874 -----
  	startPos = endPos;
  	x = ctx->text.leftmargin;
  	y = ctx->text.lt.info[i + 1].y;
! 	if (endPos == pos2) {
! 	    /*
! 	     * Used to be if ((endPos == pos2) && (endPos != ctx.text.lastPos)).
! 	     * What depends on this clear-to-end-of-screen feature?
! 	     */
  	    break;
  	}
      }
***************
*** 846,851
  	y = ctx->text.lt.info[i + 1].y;
  	if ((endPos == pos2) && (endPos != ctx->text.lastPos))
  	    break;
      }
  }
  

--- 870,876 -----
  	     * What depends on this clear-to-end-of-screen feature?
  	     */
  	    break;
+ 	}
      }
  }
  
***************
*** 1666,1671
      extern char *XFetchBuffer();
      XtTextBlock text;
      text.ptr = XFetchBuffer(XtDisplay(ctx), &(text.length), buffer);
      if (ReplaceText(ctx, ctx->text.insertPos, ctx->text.insertPos, &text)) {
  	XBell(XtDisplay(ctx), 50);
  	return;

--- 1691,1697 -----
      extern char *XFetchBuffer();
      XtTextBlock text;
      text.ptr = XFetchBuffer(XtDisplay(ctx), &(text.length), buffer);
+     text.firstPos = 0;
      if (ReplaceText(ctx, ctx->text.insertPos, ctx->text.insertPos, &text)) {
  	XBell(XtDisplay(ctx), 50);
  	return;
***************
*** 2144,2149
      	XtsdRight, 1, TRUE);
      text.ptr = _XtTextGetText(ctx, pos1, pos2);
      text.length = strlen(text.ptr);
      if (InsertNewLine(ctx, event)) return;
      if (ReplaceText(ctx, ctx->text.insertPos, ctx->text.insertPos, &text)) {
  	XBell(XtDisplay(ctx), 50);

--- 2170,2176 -----
      	XtsdRight, 1, TRUE);
      text.ptr = _XtTextGetText(ctx, pos1, pos2);
      text.length = strlen(text.ptr);
+     text.firstPos = 0;
      if (InsertNewLine(ctx, event)) return;
      if (ReplaceText(ctx, ctx->text.insertPos, ctx->text.insertPos, &text)) {
  	XBell(XtDisplay(ctx), 50);
***************
*** 2297,2302
      position = ctx->text.insertPos;
      while ((text.length = read(fid, buf, 512)) > 0) {
  	text.ptr = buf;
  	(void) ReplaceText(ctx, position, position, &text);
  	position = (*ctx->text.source->Scan)(ctx->text.source, position, 
  		XtstPositions, XtsdRight, text.length, TRUE);

--- 2324,2330 -----
      position = ctx->text.insertPos;
      while ((text.length = read(fid, buf, 512)) > 0) {
  	text.ptr = buf;
+ 	text.firstPos = 0;
  	(void) ReplaceText(ctx, position, position, &text);
  	position = (*ctx->text.source->Scan)(ctx->text.source, position, 
  		XtstPositions, XtsdRight, text.length, TRUE);

