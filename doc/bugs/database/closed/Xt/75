Return-Path: deboor%nutmeg.Berkeley.EDU@ginger.berkeley.edu
Received: by expo.lcs.mit.edu; Wed, 1 Jun 88 13:19:59 EDT
Received: by nutmeg.Berkeley.EDU (5.57/1.25)
	id AA18492; Sun, 29 May 88 20:30:00 PDT
Date: Sun, 29 May 88 20:30:00 PDT
From: deboor%nutmeg.Berkeley.EDU@ginger.berkeley.edu (Adam R de Boor)
Message-Id: <8805300330.AA18492@nutmeg.Berkeley.EDU>
To: xbugs@expo.lcs.mit.edu
Subject: bogus handling of select events in Xt

### bug number:   554
### area:         Xt
### severity:     low
### comments:     this bug still exists; in DoOtherSources()
                  see also 572
### status:       closed
                  because the recursive calls will drain the queue.

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/160C or 3/75M

CLIENT OPERATING SYSTEM:
	SunOS 3.2 or Sprite (Berkeley experimental)

DISPLAY:
	cg2 or bw2

SYNOPSIS:
	 Because of the way the loop was written, only a single input-source
	 event will be handled per XtNextEvent. In addition, the input-source
	 event handler cannot call XtNextEvent without being called again.

DESCRIPTION:
	 In NextEvent.c, there is a loop that (1) fails to advance the
	 outstanding_queue pointer before calling the handler, thus causing the
	 handler to be called again erroneously should it, or one of the
	 functions it calls, call XtNextEvent (or XtPending), and (2)
	 sets the next (ie_oq) pointer of the current input-source event to
	 null before pointing ie_ptr or outstanding_queue at the next element
	 in the list, thus truncating the pass over the list to the first
	 element only.

REPEAT-BY:
	Try to call XtPending from within an input-source handler.

FIX:
*** /tmp/,RCSt1a18482	Sun May 29 20:26:03 1988
--- NextEvent.c	Sun May 29 20:32:06 1988
***************
*** 449,458
  		XNextEvent (toplevelDisplay, event);
  		return;
  	}
! 	for (ie_ptr = outstanding_queue ; ie_ptr != NULL;
! 	     outstanding_queue = ie_ptr = ie_ptr->ie_oq ) {
! 		ie_ptr ->ie_oq = NULL;
! 		IeCallProc(ie_ptr);
  	}
  	(void) gettimeofday (&cur_time, &cur_timezone);
  	if (TimerQueue!= NULL) {	/* check timeout queue */

--- 449,465 -----
  		XNextEvent (toplevelDisplay, event);
  		return;
  	}
! 	ie_ptr = outstanding_queue;
! 	while (ie_ptr != NULL) {
! 	    /*
! 	     * Advance outstanding_queue before calling the handler
! 	     */
! 	    InputEvent *next = ie_ptr->ie_oq;
! 
! 	    outstanding_queue = next;
! 	    ie_ptr ->ie_oq = NULL;
! 	    IeCallProc(ie_ptr);
! 	    ie_ptr = next;
  	}
  	(void) gettimeofday (&cur_time, &cur_timezone);
  	if (TimerQueue!= NULL) {	/* check timeout queue */

