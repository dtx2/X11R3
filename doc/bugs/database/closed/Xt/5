Return-Path: Richard.Draves@rpd.camelot.cs.cmu.edu
Received: from ATHENA (ATHENA.MIT.EDU) by EXPO.LCS.MIT.EDU; Sun, 20 Mar 88 22:21:06 EST
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA17005; Sun, 20 Mar 88 22:20:13 EST
Message-Id: <8803210320.AA17005@ATHENA.MIT.EDU>
Date: Sun, 20 Mar 88 22:06:14 EST
From: Richard.Draves@rpd.camelot.cs.cmu.edu
To: xbugs@athena.mit.edu
Subject: bug in Xt

### bug number:   184
### area:         Xt
### severity:     
### assigned to:  
### status:       closed
### comments:     

There are two changes here.  I changed _XtwaitForSomething to work around a bug
in cc on RTs; you may not want to pick this up.  While finding that I
noticed that _XtAddInput wasn't initializing the InputEvent
structure properly.

Rich

*** lib/Xt/NextEvent.c	Fri Feb 26 12:43:31 1988
--- /afs/cs.cmu.edu/os/source/usr/misc/.X11tra/src/X.V11R2/lib/Xt/NextEvent.c	Mon Mar 14 10:26:18 1988
***************
*** 193,199 ****
  			wmaskfd = composite.wmask;
  			emaskfd = composite.emask;
  		} else {
! 			rmaskfd = wmaskfd = emaskfd = zero;
  			XFD_SET (ConnectionNumber (toplevelDisplay), &rmaskfd);
  		}
  		if ((nfound = select (composite.nfds,
--- 193,201 ----
  			wmaskfd = composite.wmask;
  			emaskfd = composite.emask;
  		} else {
! 			rmaskfd = zero;
! 			wmaskfd = zero;
! 			emaskfd = zero;
  			XFD_SET (ConnectionNumber (toplevelDisplay), &rmaskfd);
  		}
  		if ((nfound = select (composite.nfds,
***************
*** 340,363 ****
  	struct InputEvent *sptr;
  	XtInputMask condition = (XtInputMask) Condition;
  	
  	if(condition == XtInputReadMask){
- 	    sptr = (struct InputEvent *)XtMalloc((unsigned) sizeof (*sptr));
  	    sptr->ie_next = Select_rqueue[source];
- 	    sptr->ie_source = source;
  	    Select_rqueue[source] = sptr;
  	    XFD_SET(source, &composite.rmask);
  	} else if(condition == XtInputWriteMask) {
- 	    sptr = (struct InputEvent *) XtMalloc((unsigned) sizeof (*sptr));
  	    sptr->ie_next = Select_wqueue[source];
  	    Select_wqueue[source] = sptr;
  	    XFD_SET(source, &composite.wmask);
  	} else if(condition == XtInputExceptMask) {
- 	    sptr = (struct InputEvent *) XtMalloc((unsigned) sizeof (*sptr));
  	    sptr->ie_next = Select_equeue[source];
  	    Select_equeue[source] = sptr;
  	    XFD_SET(source, &composite.emask);
  	} else
  	  XtError("invalid condition passed to XtAddInput");
  	sptr->ie_proc = proc;
  	sptr->ie_closure =closure;
  
--- 342,364 ----
  	struct InputEvent *sptr;
  	XtInputMask condition = (XtInputMask) Condition;
  	
+ 	sptr = (struct InputEvent *)XtMalloc((unsigned) sizeof (*sptr));
  	if(condition == XtInputReadMask){
  	    sptr->ie_next = Select_rqueue[source];
  	    Select_rqueue[source] = sptr;
  	    XFD_SET(source, &composite.rmask);
  	} else if(condition == XtInputWriteMask) {
  	    sptr->ie_next = Select_wqueue[source];
  	    Select_wqueue[source] = sptr;
  	    XFD_SET(source, &composite.wmask);
  	} else if(condition == XtInputExceptMask) {
  	    sptr->ie_next = Select_equeue[source];
  	    Select_equeue[source] = sptr;
  	    XFD_SET(source, &composite.emask);
  	} else
  	  XtError("invalid condition passed to XtAddInput");
+ 	sptr->ie_oq = NULL;
+ 	sptr->ie_source = source;
  	sptr->ie_proc = proc;
  	sptr->ie_closure =closure;
  

