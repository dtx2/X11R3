Return-Path: @rdlvax.RDL.COM:salzman@bytor.rdl.com
Received: by expo.lcs.mit.edu; Thu, 28 Apr 88 15:32:56 EDT
Received: from bytor.RDL.COM by rdlvax.RDL.COM (5.54++/IDA1.3/IJS)
	id AA26694; Thu, 28 Apr 88 12:26:08 PDT
Received: by bytor.RDL.COM (3.2/SMI-3.2)
	id AA11328; Thu, 28 Apr 88 12:30:07 PDT
Message-Id: <8804281930.AA11328@bytor.RDL.COM>
To: xbugs@expo.lcs.mit.edu
Cc: jim@expo.lcs.mit.edu, jkh@violet.berkeley.edu, jef@LBL-RTSG.ARPA,
        salzman@rdlvax.rdl.com, swick@athena.mit.edu
Subject: Suggestion for X Toolkit enhancement
Date: Thu, 28 Apr 88 12:30:04 PDT
From: Gumby <salzman@bytor.rdl.com>

### bug number:   465
### area:         Xt
### severity:     enhancement
### comments:     


[this is somewhat of a follow on to a discussion between myself and 
 Jim Fulton, and another discussion between myself and Jordan Hubbard]


The following is a suggestion for an enhancement to the X11 toolkit for
handling of icons.

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/60-C (and all others)

CLIENT OPERATING SYSTEM:
	SunOS 3.5 (and all others)

DISPLAY:
	CG4 (and all others)

SYNOPSIS:
	A more flexible mechanism is needed by clients to provide hints
	to the window manager for specifiying information about icons.
	Specifically, icon pixmap, icon title, icon geometry. These
	facilities exist, though they are not readily accessable via
	the resource manager or from the clients command line. Window
	managers may use these hints or completely ignore them providing
	their own icons.


DESCRIPTION:

	Currently the only way to specify a hint for an Icon Pixmap
	is to hard code it into the client. The code would look
	something like this:

	    toplev = XtInitialize("main","Class", NULL, 0, &argc, argv);

	    XtSetArg(args, XtNiconPixmap, XCreateBitmapFromData(...));
	    XtSetValues(toplev, args, XtNumber(args);

	The problem is that the user has no way of overriding this,
	or providing a pixmap if the client doesn't supply one at all.
	What's left is whatever the window manager wants to use as
	a default for the client.

	The desired mechanism would be to provide a "StringToPixmap"
	converter as part of the toolkit so a user can specify a
	pixmap via the resource manager: "xterm.iconPixmap: bitmap_file".
	This will give the user the flexibility of specifying all the
	information about icons that could be passed to the window
	manager in the form of hints. Simply stated, all window manager
	hints about icons should be able to be specified by a user
	for a client via the resource manager. The following resources
	would be queried and supplied to the window manager via hints
	when a client is initialized via XtInitialize:

	    resource      example         description

	    iconImageName:  ./xterm.bm	  file name of an icon bitmap,
					  to be converted and stored
					  as a pixmap.

            iconGeometry: 32x32+1+1	  Icon geometry, same form
					  as window geometry, convert
					  to coordinate and size hints
					  of icon.

            iconName:     zippy		  name of icon.


        The iconName resource allready exists. Icon geometry can be
	specified via iconX and iconY, so maybe this is a bad idea,
	especially since the size should be whatever the size of
	the icon pixmap is. The iconImageName would be like iconPixmap
	but would result in setting iconPixmap after converting the
	file given as an argument to a pixmap (which would also result
	in setting the window manager hints for the pixmap,etc.).

REPEAT-BY:
	N/A

FIX:
	The following changes would implement the desired actions.
	I'm just giving suggestions as to what would be changed,
	not actual changes. I will be glad to go ahead and provide
	actual changes if the feeling is that this is a good idea.

	In lib/libXt/Converters.c, add a StringToPixmap converter
	so a pixmap can be specified via a file name and converted
	to a pixmap. The patches that Jef Poskanzer (sybase!jef) posted
	to comp.windows.x would definitely do the trick. In addition
	it checks for a resource called bitmapFilePath (or iconImagePath?)
	to specify where to look for these bitmaps. I'm not totally sure
	that this is needed if a new resource (iconImageName) is added????

	In lib/libXt/Initialize.c, add to the table of standard
	command line arguments the following:

/* excuse my ignorance, but I'm not all that familiar with the proper
   way to specifiy resources, so I'm just using what looks consistent
   with what's there (do I use .iconPixmap or *iconPixmap??)...

*/

{"-iconbitmap",".TopLevelShell.iconImageName", XrmoptionSepArg,(caddr_t) NULL},
{"-iconname",  ".TopLevelShell.iconName, XtrmoptionSepArg, (caddr_t) NULL},
{"-icongeometry",".TopLevelShell.iconGeometry,XtrmoptionSepArg,(caddr_t) NULL},

        These are likely to change for each instance of a client
	(especially when people xterms running on a bunch of hosts, 
	like me :-).

	In lib/libXt/Shell.c, code to properly set up all the window 
	manager hints given all this information.

	A name other than iconPixmap could be used instead (like,
	as Jim Fulton suggested: iconImageName) so as to not conflict
	with iconPixmap. This is fuzzy though. Would they suggest
	the same thing (would both result in having a pixmap supplied
	to the window manager as a hint?). Which would overried which?
	I suppose that one could be used to set the other (iconImageName
	could be used to set iconPixmap?).

	Jim also suggested:

          iconImageClip           Boolean       clip icon to make smaller
          iconImageGravity        Gravity       for making icon bigger
          iconImageTile           Boolean       if making icon bigger
          iconImagePath           String        to locate files, when necessary

        to deal with the fact that the window manager may impose
	constraints on sizing and such.


	Now I'm confused about the difference between iconImageName
	and iconPixmap. The client needs to eventually provide some
	hint as to what to use as a pixmap for the icon. Will supplying
	iconImageName, with some other info, result in iconPixmap
	being set properly (and therefore the window manager hint)?
	I guess that would make sense....

	To the user and the applications developer, this is what you
	end up with:

	- user:

	command:	
	  # start an xterm supplying, as a hint to the window manager,
	  # a pixmap created from the bitmap file ~/icons/xterm.icon,
	  # and the name of the icon (the hostname the client is being
	  # started on).

	  xterm -iconbitmap ~/icons/xterm.icon -iconname `hostname`

	resources:

	  # supply default icons for various applications that don't
	  # have default icons.

	  xmh*iconImageName:   ~/icons/xmh.icon
	  xedit*iconImageName: ~/icons/xedit.icon


        - applications developer:

	  /* install the default bitmap for this application in
	     either /usr/include/X11/bitmaps, or /usr/lib/X11/app-defaults,
	     or /usr/lib/X11/[application-specific-directory], or
	     /usr/lib/X11/bitmaps. Set up some default args before
	     initializing application, including this bitmap.

	  */

	  Arg args[] = {
	      { XtNiconImagePath, (XtArgVal) "/usr/lib/X11/bitmaps"},
	      { XtNiconImageName, (XtArgVal) "xterm.bm"},
	  }

	  topl = XtInitialize(argv[0], "XTerm", args, XtNumber(args), &argc,
				argv);

          /* this default is overridden if the resource is specified
	     by the user on the command line or via the resource
	     manager
          */


	  The problem with this is that if an application hardwires
	  the pixmap via XtSetArg & XtSetValues (example above),
	  after it's been initialized, the user supplied values
	  get overridden. In that case the application should check
	  first if a user supplied value is present, otherwise
	  supply the default:

	  Arg args[1] = { {XtNiconPixmap, NULL}, };

	  XtGetValues(topl, args, 1);

	  if (!args[0].value)
	     {
	       .... /* if not set, provide a default by supplying
	               an iconImageName or iconPixmap of your own */
	     }


	  ----

	  This assumes some mechanism where supplying iconImageName
	  sets iconPixmap, which in turn sets the window manager hints.
	  I hope this is not too confusing. I've been changing this
	  as I get e-mail with more suggestions!
	  ----

	  Well, I think that covers it for now. Comments, criticisms,
	  etc., would be greatly appreciated. Thanks!!!

				 -Isaac.

--
* Isaac Salzman - Sr. Systems Analyst                         ----     
* Research & Development Labs (RDL)                          /o o/  /  
* 5721 W. Slauson Ave., Culver City, CA. 90230-6509          | v |  |  
* AT&T: +1 213 410 1244, x118                               _|   |_/   
* ARPA: salzman@rdlvax.RDL.COM                             / |   |
* UUCP: ...!{psivax,csun,sdcrdcf,ttidca}!rdlvax!salzman    | |   |     

