Return-Path: fred%hpcvxft@hplabs.hp.com
Received: by expo.lcs.mit.edu; Thu, 21 Apr 88 14:06:51 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA19070; Thu, 21 Apr 88 13:05:45 EST
Received: from hp-pcd.HP.COM (hp-pcd) by hplabs.HP.COM with SMTP ; Thu, 21 Apr 88 10:05:16 PST
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA26098; Thu, 21 Apr 88 10:05:52 PST
Received: from hpcvxft by hpcvxft.HP.COM; Thu, 21 Apr 88 11:05:55 pdt
Message-Id: <8804211805.AA13518@hpcvxft.HP.COM>
To: xbugs%expo.lcs.mit.edu@athena.mit.edu
Cc: haynes@decwrl.dec.com
Subject: Bug in XtGetValues()
X-Mailer: mh6.5
Date: Thu, 21 Apr 88 11:05:45 PDT
From: fred%hpcvxft@hplabs.hp.com

### bug number:   402
### area:         Xt
### severity:     medium
### comments:     


VERSION:
	Xtk release 2

SYNOPSIS:
	XtGetValues() returns bogus information on 68000 architecture
        machines, if the application queries a short or char value, and
        it also specifies within the arglist  a pointer to a short or char 
        variable, into which the result is to be placed.

DESCRIPTION:
   Several months ago, I reported a discrepancy in how XtGetValues() worked,
   versus how it was documented.  I received a message that the problem was
   being fixed, yet I notice that it is still present in the R2 toolkit,
   to a degree anyways.  According to the documentation, when you issue a 
   GetValue request, you pass in an arglist composed of an argument 
   name/address pair; the address indicates where the return value should be 
   placed.  If I don't supply a pointer (i.e. I pass in a NULL address),
   when I query a Boolean value, the value is always returned in the arglist;
   I noticed that CopyToArg() specifically tested for this case; I can live
   with this, since it allows old clients to continue to run.  However, if
   I do pass in an address, then the returned boolean value was always 0
   (FALSE).  

   After further investigation, I believe the problem lies in the following
   line of code which had been added to CopyToArg() to fix the original
   problem:

        if (*dst != NULL)
           dst = *(XtArgVal **)dst;

   The above statement treats everything as a pointer to a long variable;
   XtArgVal is typedef'ed to a long.  In the days where the values were
   always returned in the arglist, treating the destination as a long was 
   fine since the value field really was a long.  However, since the
   value now pointed to by dst can be a char, a short, a long, etc, this
   assumption is no longer valid.  For instance, assume the following:

     dst ----> arglist value entry ----> a boolean variable

        ("---->" denotes 'pointing to')

   When the buggy statement shown above is executed, the picture now
   looks like the following:

     dst ----> a boolean variable

   Since the argument being queried is a char, the following is used to
   copy the value into the specified destinatioin:

     *dst = (XtArgVal) *((char *) src);

   Since the value pointed to by dst is assumed to be a long, the following
   four bytes are copied into the location we specified:

      0x00, 0x00, 0x00, 0x01

   Unfortunately, at least for those of us using 68000 architecture, the
   first 0x00 is copied into our destination, instead of the 0x01.



REPEAT-BY:
   Boolean flag;
   Arg     arg[1];

   XtSetArg (arg[0], XtNsensitive, &flag);
   XtGetValues (w, arg, XtNumber(arg));

FIX:
   There is an easy way to fix this, I believe.  If (*dst == NULL) then
   use the copy statements, as they currently are defined.  If, however,
   *dst really points to a valid address, then use a different set of
   copy statements, which don't assume that dst always points to a long;
   i.e.  

       else if (size == sizeof(char))
          (char *)*dst = *((char *) src);

Received: by E40-PO.MIT.EDU (5.45/4.7) id AA13305; Wed, 1 Jun 88 13:25:48 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA21857; Wed, 1 Jun 88 12:25:38 EST
Received: by expo.lcs.mit.edu; Wed, 1 Jun 88 13:26:37 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA21839; Wed, 1 Jun 88 12:25:07 EST
Received: from hp-pcd.HP.COM (hp-pcd) by hplabs.HP.COM with SMTP ; Wed, 1 Jun 88 09:24:32 PST
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA10979; Wed, 1 Jun 88 10:24:36 PDT
Received: from hpcvxrm by hpcvxrm.HP.COM; Wed, 1 Jun 88 10:24:30 pdt
Message-Id: <8806011724.AA27039@hpcvxrm.HP.COM>
To: swick%expo.lcs.mit.edu@athena.mit.edu
Subject: XtGetValues() fix
X-Mailer: mh6.5
Date: Wed, 01 Jun 88 10:24:27 PDT
From: Fred Taft <fred%hpcvxrm@hplabs.hp.com>


Ralph,

Here's the fix to CopyToArg(), which allows it to work in an architectural
independant fashion.


Fred


====================


static void CopyToArg(src, dst, size)
    XtArgVal src, *dst;
    register unsigned int size;
{
    Boolean addrGiven = False;

    /* ||| Old semantics are yucky, but keep as long as NULL value */
    if (*dst != NULL) 
    {
	dst = *(XtArgVal **)dst;
        addrGiven = True;
    }

    if (size == sizeof(XtArgVal))
	*dst = *(XtArgVal *)src;
    else if (size == sizeof(short)) 
    {
        if (addrGiven)
	   *((short *)dst) = (short)*((short *) src);
        else
	   *dst = (XtArgVal) *((short *) src);
    }
    else if (size == sizeof(char))
    {
        if (addrGiven)
           *((char *)dst) = (char)*((char *) src);
        else
           *dst = (XtArgVal) *((char *) src);
    }
    else if (size < sizeof(XtArgVal))
	bcopy((char *) src, (char *) dst, (int) size);
    else
	bcopy((char *) src, (char *) *dst, (int) size);

}

[sent 28-Jun-88 -ralph]
To: intrinsics
Subject: XtGetValues
--------
The specification for XtGetValues says that the arglist must contain
a pointer to the destination for the resource value.  In the R2
implementation, this was true for resources whose size was less than
or equal to sizeof(XtArgVal), modulo byte-order bugs, but if
sizeof(Resource) > sizeof(XtArgVal), the arglist value was treated
as a pointer to a pointer to the destination.

This seems like a bug to me, and is probably a hold-over from earlier
days when the resource value was stored directly into the arglist.
I would like to change the implementation to be consistent with other
resources; i.e. remove the extra indirection for big resources.  This
will not affect any application that uses only the supplied resource
types and converters (all large resources were always specified as
pointers to structures), but may affect other applications that have
defined new resource types.

If the bug reports are a reliable indicator, no-one has yet defined
a resource bigger than XtArgVal and tried to perform XtGetValue.

Unless somebody objects soon, I plan to change the implementation to
be consistent with the specification.