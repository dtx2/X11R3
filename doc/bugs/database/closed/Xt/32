Return-Path: vix@hadar.tdd.fai.com
Received: by expo.lcs.mit.edu; Fri, 29 Apr 88 07:36:18 EDT
Received: by rutgers.edu (5.54/1.15) with UUCP 
	id AA20462; Fri, 29 Apr 88 05:18:54 EDT
Received: from UCBVAX.Berkeley.EDU by spool.cs.wisc.edu; Fri, 29 Apr 88 03:37:23 CDT
Received: by ucbvax.Berkeley.EDU (5.59/1.28)
	id AA01056; Thu, 28 Apr 88 12:21:27 PDT
Received: by unisoft.UniSoft (5.51/4.7)
	id AA14705 for ucbvax!uwvax!rutgers!mit-eddie!expo.lcs.mit.edu!xbugs; Thu, 28 Apr 88 11:44:29 PDT
Received: by cerebus.fai.com; id AA28636; Thu, 28 Apr 88 11:38:41-193:
Received: by tdd.fai.com; id AA00879; Thu, 28 Apr 88 11:41:42 PDT
Date: Thu, 28 Apr 88 11:41:42 PDT
From: unisoft!hadar.tdd.fai!vix@ucbvax.berkeley.edu (Paul Vixie)
Message-Id: <8804281841.AA00879@tdd.fai.com>
To: xbugs@expo.lcs.mit.edu
Subject: second phase of XtDestroyWidget has to be forcable

### bug number:   437
### area:         Xt
### severity:     low
### comments:     
### status:       closed

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/60

CLIENT OPERATING SYSTEM:
	SunOS 3.4

DISPLAY:
	CG4

SYNOPSIS:
	There is no way to get the second phase of XtDestroyWidget() to
	happen on demand without possibly blocking in XtNextEvent().

DESCRIPTION:
	In my application, I often need to destroy several widgets and
	create several others.  (Think of it as a tree of menus that likes
	to prune upper-level branches as new lower-level branches are
	selected.)

	Given the current implementation of XtDestroyWidget(), the removal
	of a widget is delayed until the next call to XtNextEvent().  What
	happens, therefore, when you do:

		XtDestroyWidget(old_widget);
		new_widget = XtCreateManagedWidget(... same parent);

	... is that new_widget is created (and allocated screen real estate)
	before old_widget is actually destroyed.  If, as in my application,
	there is not enough room in the parent for both old_widget and
	new_widget, the parent grows to make room for both children.  This
	is not acceptable, and unneccessary since both children are not
	actually going to hang around.

	Changing the code to read:

		XtDestroyWidget(old_widget);
	/*new*/	XtNextEvent(&an_x_event); XtDispatchEvent(&an_x_event);
		new_widget = XtCreateManagedWidget(... same parent);

	... fixes things half-way.  That is, old_widget disappears before
	new_widget is created.  However, XtNextEvent() will block until an
	event is available, which means that the whole application stops
	dead until the mouse enters or leaves or clicks or whatever.

REPEAT-BY:
	I can send you a test program but it would be huge.  Let me know if
	you want it and I'll stick something together and mail it in.

FIX:
	My fix will certainly differ from your fix.  My solution was to add
	a function called XtFinishDestruction() in lib/Xt/NextEvent.c, into
	which I moved the relevant four lines of code from XtNextEvent(),
	replacing those lines in XtNextEvent() with a call to the new
	function (XtFinishDestruction()).  XtFinishDestruction is not
	declared static, thus I can call it from my application.

	Like I said, you will certainly fix this in a different way -- my
	solution is inelegant (to put it politely).  However, the diffs are
	included below in case you want to see what I'm talking about.

*** lib/Xt/NextEvent.c.orig	Fri Feb 26 09:43:31 1988
--- lib/Xt/NextEvent.c	Tue Apr 26 11:58:15 1988
***************
*** 424,433 ****
--- 424,449 ----
  	XtWarning("XtRemoveInput: Input handler not found");
  }
  
       
  /*
+  * XtFinishDestruction()
+  *	call all the XtPhase2Destroy() callbacks to make destruction of
+  *	widgets complete.  Sometimes the application needs to be able to
+  *	make this happen without blocking in XtNextEvent().
+  *			Paul Vixie, 26-April-1988
+  */
+ 
+ void XtFinishDestruction()
+ {
+     if (DestroyList != NULL) {
+ 	_XtCallCallbacks (&DestroyList, (caddr_t) NULL);
+ 	_XtRemoveAllCallbacks (&DestroyList);
+     }
+ }
+ 
+ /*
   * XtNextEvent()
   * return next event;
   */
  
  void XtNextEvent(event)
***************
*** 437,450 ****
      register TimerEventRec *te_ptr;
      struct timeval  cur_time;
      struct timezone cur_timezone;
      register Boolean     Claims_X_is_pending = FALSE;
  
!     if (DestroyList != NULL) {
! 	_XtCallCallbacks (&DestroyList, (caddr_t) NULL);
! 	_XtRemoveAllCallbacks (&DestroyList);
!     }
  
      for (;;) {
  	if (Claims_X_is_pending || XPending (toplevelDisplay) ) {
  		XNextEvent (toplevelDisplay, event);
  		return;
--- 453,463 ----
      register TimerEventRec *te_ptr;
      struct timeval  cur_time;
      struct timezone cur_timezone;
      register Boolean     Claims_X_is_pending = FALSE;
  
!     XtFinishDestruction();
  
      for (;;) {
  	if (Claims_X_is_pending || XPending (toplevelDisplay) ) {
  		XNextEvent (toplevelDisplay, event);
  		return;

