Return-Path: lori%hpcvxlc@hplabs.hp.com
Received: from ATHENA (ATHENA.MIT.EDU) by EXPO.LCS.MIT.EDU; Thu, 24 Mar 88 12:13:47 EST
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA06940; Thu, 24 Mar 88 12:12:49 EST
Received: from hp-pcd.HP.COM (hp-pcd) by hplabs.HP.COM with SMTP ; Thu, 24 Mar 88 09:11:04 PST
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA15767; Thu, 24 Mar 88 09:14:59 PST
Received: from hpcvxlc by hpcvxlc.HP.COM; Thu, 24 Mar 88 09:15:23 pst
Message-Id: <8803241715.AA05646@hpcvxlc.HP.COM>
To: xbugs@athena.mit.edu
Subject: unfriendly bitmap color options
X-Mailer: mh6.5
Date: Thu, 24 Mar 88 09:15:17 PST
From: Lori Cook <lori%hpcvxlc@hplabs.hp.com>

### bug number:   205
### area:         bitmap
### severity:     low
### assigned to:  
### status:       closed
### comments:     

VERSION:
	X11 release 2
SYNOPSIS:
	For 'bitmap', the -fg and -bg options do not work unless both are
	specified and valid.

	The -hl option does not work unless both -fg and -bg are used.
DESCRIPTION:
	The way the current test is constructed, if either the foreground or
	background colors are not specified or are illegal, neither of the
	colors are allocated and stored.

	For the highlight option, it depends on the foreground and background
	colors being specified and legal, otherwise the rest of the test
	is skipped and highlight remains the default.
REPEAT-BY:
	bitmap junk -fg blue
	bitmap junk -bg yellow
	bitmap junk -hl red
FIX:
*** bitmap.c.old	Wed Mar 23 10:21:05 1988
--- bitmap.c	Wed Mar 23 10:20:09 1988
***************
*** 558,567
      char *mous_color = attributes[bm_attr_mouse].value;
      XColor fdef, bdef, hdef, mdef;
      unsigned long masks[2];
!     if (fore_color && XParseColor(d, cmap, fore_color, &fdef) &&
!       back_color && XParseColor(d, cmap, back_color, &bdef) &&
!       (high_color == NULL || XParseColor(d, cmap, high_color, &hdef)) &&
!       XAllocColorCells(d, cmap, FALSE, masks, high_color ? 2 : 1,
  	 &background, 1)) {
        bdef.pixel = background;
        XStoreColor(d, cmap, &bdef);

--- 558,582 -----
      char *mous_color = attributes[bm_attr_mouse].value;
      XColor fdef, bdef, hdef, mdef;
      unsigned long masks[2];
!     int result = 0;
! 
!     if (!(result = (fore_color && XParseColor(d, cmap, fore_color, &fdef)))) {
! 	fdef.pixel = foreground;
! 	XQueryColor(d, cmap, &fdef);
!     }
!     if (back_color && XParseColor(d, cmap, back_color, &bdef)) {
! 	result = 1;
!     } else {
! 	bdef.pixel = background;
! 	XQueryColor(d, cmap, &bdef);
!     }
!     if (high_color && XParseColor(d, cmap, high_color, &hdef)) {
! 	result = 1;
!     } else {
! 	highlightplane = invertplane;
!     }
!     /* if background or foreground or highlight is found */
!     if (result && XAllocColorCells(d, cmap, FALSE, masks, high_color ? 2 : 1,
  	 &background, 1)) {
        bdef.pixel = background;
        XStoreColor(d, cmap, &bdef);

