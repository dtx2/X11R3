Return-Path: lori%hpcvxlc@hplabs.hp.com
Received: by expo.lcs.mit.edu; Mon, 13 Jun 88 12:54:34 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA06955; Mon, 13 Jun 88 12:53:05 EDT
Received: from hp-pcd.HP.COM (hp-pcd) by hplabs.HP.COM with SMTP ; Mon, 13 Jun 88 08:53:03 PST
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA25854; Mon, 13 Jun 88 09:51:58 PDT
Received: from hpcvxlc by hpcvxlc.HP.COM; Mon, 13 Jun 88 09:53:53 pdt
Message-Id: <8806131653.AA02787@hpcvxlc.HP.COM>
To: xbugs@athena.mit.edu
Subject: bitmap bad colors
X-Mailer: mh6.5
Date: Mon, 13 Jun 88 09:53:49 PDT
From: Lori Cook <lori%hpcvxlc@hplabs.hp.com>

### bug number:   596
### area:         bitmap
### severity:     low
### comments:     

VERSION:
	X11 release 2
SYNOPSIS:
	No error or warning when colors invalid or colormap full.
DESCRIPTION:
	Currently when a color specified is invalid or the colormap
	cannot allocate colors, the user simply receives the default
	colors and receives no indication of the problem.
REPEAT-BY:
	'bitmap junk2 -fg(bg,ms,hl) UnicornBlue'
		or
	'bitmap junk2 -fg(bg,ms,hl) Blue' with a full colormap.

SUGGESTED FIX:
	I went with warning, because 'bitmap' can operate quite nicely
	with just black and white.
*** clients/bitmap/bitmap.c.old	Thu Jun  9 21:19:54 1988
--- clients/bitmap/bitmap.c	Sun Jun 12 16:51:56 1988
***************
*** 605,610
      XColor fdef, bdef, hdef, mdef;
      unsigned long masks[2];
      int result = 0;
  
      if (!(result = (fore_color && XParseColor(d, cmap, fore_color, &fdef)))) {
  	fdef.pixel = foreground;

--- 605,611 -----
      XColor fdef, bdef, hdef, mdef;
      unsigned long masks[2];
      int result = 0;
+     int warn = FALSE;
  
      if (!(result = (fore_color && XParseColor(d, cmap, fore_color, &fdef)))) {
  	if (fore_color)
***************
*** 607,612
      int result = 0;
  
      if (!(result = (fore_color && XParseColor(d, cmap, fore_color, &fdef)))) {
  	fdef.pixel = foreground;
  	XQueryColor(d, cmap, &fdef);
      }

--- 608,616 -----
      int warn = FALSE;
  
      if (!(result = (fore_color && XParseColor(d, cmap, fore_color, &fdef)))) {
+ 	if (fore_color)
+ 	   fprintf(stderr, "%s : warning - invalid color format '%s'\n",
+ 				progname, fore_color);
  	fdef.pixel = foreground;
  	XQueryColor(d, cmap, &fdef);
      }
***************
*** 613,618
      if (back_color && XParseColor(d, cmap, back_color, &bdef)) {
  	result = 1;
      } else {
  	bdef.pixel = background;
  	XQueryColor(d, cmap, &bdef);
      }

--- 617,625 -----
      if (back_color && XParseColor(d, cmap, back_color, &bdef)) {
  	result = 1;
      } else {
+ 	if (back_color)
+ 	   fprintf(stderr, "%s : warning - invalid color format '%s'\n",
+ 				progname, back_color);
  	bdef.pixel = background;
  	XQueryColor(d, cmap, &bdef);
      }
***************
*** 619,624
      if (high_color && XParseColor(d, cmap, high_color, &hdef)) {
  	result = 1;
      } else {
  	highlightplane = invertplane;
      }
      /* if background or foreground or highlight is found */

--- 626,634 -----
      if (high_color && XParseColor(d, cmap, high_color, &hdef)) {
  	result = 1;
      } else {
+ 	if (high_color)
+ 	   fprintf(stderr, "%s : warning - invalid color format '%s'\n",
+ 				progname, high_color);
  	highlightplane = invertplane;
      }
      /* if background or foreground or highlight is found */
***************
*** 622,642
  	highlightplane = invertplane;
      }
      /* if background or foreground or highlight is found */
!     if (result && XAllocColorCells(d, cmap, FALSE, masks, high_color ? 2 : 1,
! 	 &background, 1)) {
!       bdef.pixel = background;
!       XStoreColor(d, cmap, &bdef);
!       invertplane = masks[0];
!       if (high_color) {
! 	highlightplane = masks[1];
! 	hdef.pixel = background | highlightplane;
! 	XStoreColor(d, cmap, &hdef);
! 	hdef.pixel |= invertplane;
! 	XStoreColor(d, cmap, &hdef);
!       } else
! 	highlightplane = invertplane;
!       fdef.pixel = foreground = background | invertplane;
!       XStoreColor(d, cmap, &fdef);
      }
      if (brdr_color && XParseColor(d, cmap, brdr_color, &bdef) &&
  	XAllocColor(d, cmap, &bdef))

--- 632,659 -----
  	highlightplane = invertplane;
      }
      /* if background or foreground or highlight is found */
!     if (result) {
! 	if (XAllocColorCells(d, cmap, FALSE, masks, high_color ? 2 : 1,
! 	 	&background, 1)) {
!             bdef.pixel = background;
!             XStoreColor(d, cmap, &bdef);
!             invertplane = masks[0];
!             if (high_color) {
! 	      highlightplane = masks[1];
! 	      hdef.pixel = background | highlightplane;
! 	      XStoreColor(d, cmap, &hdef);
! 	      hdef.pixel |= invertplane;
! 	      XStoreColor(d, cmap, &hdef);
!             } else
! 	      highlightplane = invertplane;
!             fdef.pixel = foreground = background | invertplane;
!             XStoreColor(d, cmap, &fdef);
! 	}
! 	else {
! 	    warn = TRUE;
! 	    fprintf(stderr, "%s : warning - unable to allocate colors\n",
! 				progname);
! 	}
      }
      if (brdr_color) {
  	if (XParseColor(d, cmap, brdr_color, &bdef)) {
***************
*** 638,646
        fdef.pixel = foreground = background | invertplane;
        XStoreColor(d, cmap, &fdef);
      }
!     if (brdr_color && XParseColor(d, cmap, brdr_color, &bdef) &&
! 	XAllocColor(d, cmap, &bdef))
!       border = bdef.pixel;
      /* recoloring cursors is not done well */
      if (mous_color && XParseColor (d, cmap, mous_color, &mdef)) {
  	XColor whitecolor;

--- 655,676 -----
  				progname);
  	}
      }
!     if (brdr_color) {
! 	if (XParseColor(d, cmap, brdr_color, &bdef)) {
! 	   if (XAllocColor(d, cmap, &bdef))
! 	      border = bdef.pixel;
! 	   else {
! 	      if (!warn)
! 		 fprintf(stderr,
! 			   "%s : warning - unable to allocate color '%s'\n",
! 				progname, brdr_color);
! 	   }
! 	}
! 	else {
! 	   fprintf(stderr, "%s : warning - invalid color format '%s'\n",
! 				progname, brdr_color);
! 	}
!     }
      /* recoloring cursors is not done well */
      if (mous_color) {
  	if (XParseColor (d, cmap, mous_color, &mdef)) {
***************
*** 642,649
  	XAllocColor(d, cmap, &bdef))
        border = bdef.pixel;
      /* recoloring cursors is not done well */
!     if (mous_color && XParseColor (d, cmap, mous_color, &mdef)) {
! 	XColor whitecolor;
  
  	whitecolor.red = whitecolor.green = whitecolor.blue = ~0;
  	XRecolorCursor (d, cross, &mdef, &whitecolor);

--- 672,680 -----
  	}
      }
      /* recoloring cursors is not done well */
!     if (mous_color) {
! 	if (XParseColor (d, cmap, mous_color, &mdef)) {
! 	   XColor whitecolor;
  
  	   whitecolor.red = whitecolor.green = whitecolor.blue = ~0;
  	   XRecolorCursor (d, cross, &mdef, &whitecolor);
***************
*** 645,653
      if (mous_color && XParseColor (d, cmap, mous_color, &mdef)) {
  	XColor whitecolor;
  
! 	whitecolor.red = whitecolor.green = whitecolor.blue = ~0;
! 	XRecolorCursor (d, cross, &mdef, &whitecolor);
! 	XRecolorCursor (d, dot, &mdef, &whitecolor);
      }
    }    
  

--- 676,689 -----
  	if (XParseColor (d, cmap, mous_color, &mdef)) {
  	   XColor whitecolor;
  
! 	   whitecolor.red = whitecolor.green = whitecolor.blue = ~0;
! 	   XRecolorCursor (d, cross, &mdef, &whitecolor);
! 	   XRecolorCursor (d, dot, &mdef, &whitecolor);
! 	}
! 	else {
! 	   fprintf(stderr, "%s : warning - invalid color format '%s'\n",
! 				progname, mous_color);
! 	}
      }
    }    
  

