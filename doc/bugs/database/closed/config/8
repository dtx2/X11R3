Return-Path: bilbo.geoff@seas.ucla.edu
Received: by expo.lcs.mit.edu; Tue, 17 May 88 20:53:23 EDT
Message-Id: <8805180053.AA02497@EXPO.LCS.MIT.EDU>
Date:           Tue, 17 May 88 17:31:34 PDT
From: Geoff Kuenning <bilbo.geoff@seas.ucla.edu>
Received:       from BILBO (193.255.1.3) by FRODO
                id smtp.15763; Tue, 17 May 88 17:30:11 PDT
To: xbugs@expo.lcs.mit.edu
Subject:        makedepend fails on #if directives unless you have cpp sources

### bug number:   511
### area:         config
### severity:     low
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	Bell Technologies 386/AT

CLIENT OPERATING SYSTEM:
	SVR3

DISPLAY:
	Video 7 VEGA (IBM EGA clone)

SYNOPSIS:
	makedepend fails on #if directives unless you have cpp sources

DESCRIPTION:
	If you don't have cpp sources, the routine "zerovalue" in parse.c
	of makedepend punts rather than attempting to actually evaluate
	the expression.  This is a serious failure if you are using the
	ANSI C expression "#if defined(foo)", as is done in serveral
	places in the server.

	While it is nice to have "make depend" be a fast operation, we'd
	rather have it be correct.  I can write an extremely fast "make depend"
	if it doesn't have to be correct:

	    main () { return 0; }

REPEAT-BY:
	Compile makedepend without cpp sources.  Try it on the following
	program:

	    #if 0
	    #include "foo.h"
	    #endif
	    #if 1
	    #include <stdio.h>
	    #else
	    #include "foo.h"
	    #endif

	Note that makedepend complains that it can't find the include file
	"foo.h", even though that branch shouldn't be compiled.

FIX:
	The following patch modifies the Imakefile for makedepend to allow
	a third option:  UseCProgram.  If UseCProgram is defined, the
	Imakefile will operate as before.  If it is left undefined (the
	default;  as I said, I'm a big fan of correctness over speed) a
	new shell script, "mdepend.sh", will be used to create the makedepend
	program.  That script is also included in this patch.

Index: util/makedepend/Imakefile

*** Imakefile.old	Tue May 17 17:08:07 1988
--- Imakefile	Tue May 17 17:08:36 1988
***************
*** 1,6
  /*
   *	%W%	%G% %U%
   */
  #
  # If you have source for cpp...
  #

--- 1,12 -----
  /*
   *	%W%	%G% %U%
   */
+ 
+ /*
+  * If you trust MIT's partial implementation of preprocessing, or perhaps
+  * if you have cpp sources, or if you prefer speed over correctness...
+  */
+ #ifdef UseProgram
  #
  # If you have source for cpp...
  #
***************
*** 51,53
  	$(RM) cpp.c cpy.? yylex.c
  
  DependTarget()

--- 57,82 -----
  	$(RM) cpp.c cpy.? yylex.c
  
  DependTarget()
+ 
+ #else /* UseProgram */
+ 
+ /*
+  * But if you don't trust the MIT code, and prefer correctness over a
+  * minor improvement in speed (how often do you run make depend, anyway?)...
+  */
+ SRCS	=
+ 
+ all:	makedepend
+ 
+ makedepend:	mdepend.sh
+ 	rm -f makedepend
+ 	cp mdepend.sh makedepend
+ 	chmod +x makedepend
+ 
+ clean::
+ 	rm -f makedepend
+ 
+ depend::
+ 	echo "You don't need to make depend on a shell script"
+ 
+ #endif /* UseProgram */

Index: util/makedepend/mdepend.sh

0a1,182
> : Use /bin/sh
> #
> #	@(#)mdepend.sh	1.3	5/11/88 19:44:36
> #
> #	Do the equivalent of the 'makedepend' program, but do it right.
> #
> #	Usage:
> #
> #	makedepend [cpp-flags] [-w width] [-s magic-string] [-f makefile]
> #	  [-o object-suffix]
> #
> #	Notes:
> #
> #	The C compiler used can be overridden with the environment
> #	variable "CC".
> #
> #	The "-v" switch of the "makedepend" program is not supported.
> #
> #
> #	This script should
> #	work on both USG and BSD systems.  However, when System V.4 comes out,
> #	USG users will probably have to change "silent" to "-s" instead of
> #	"-" (at least, that's what the documentation implies).
> #
> CC=${CC:-cc}
> 
> silent='-'
> 
> TMP=${TMPDIR:-/tmp}/mdep$$
> CPPCMD=${TMP}a
> DEPENDLINES=${TMP}b
> TMPMAKEFILE=${TMP}c
> MAGICLINE=${TMP}d
> 
> trap "rm -f ${TMP}*; exit 1" 1 2 15
> trap "rm -f ${TMP}*; exit 0" 1 2 13
> 
> echo " \c" > $CPPCMD
> if [ `wc -c < $CPPCMD` -eq 1 ]
> then
>     c="\c"
>     n=
> else
>     c=
>     n="-n"
> fi
> 
> echo $n "exec $CC -E$c" > $CPPCMD
> chmod +x $CPPCMD
> 
> files=
> makefile=
> magic_string='# DO NOT DELETE'
> objsuffix='.o'
> width=78
> while [ $# != 0 ]
> do
>     case "$1" in
> 	-D*|-I*)
> 	    echo $n " '$1'$c" >> $CPPCMD
> 	    ;;
> 	-w)
> 	    width="$2"
> 	    shift
> 	    ;;
> 	-s)
> 	    magic_string="$2"
> 	    shift
> 	    ;;
> 	-f)
> 	    makefile="$2"
> 	    shift
> 	    ;;
> 	-o)
> 	    objsuffix="$2"
> 	    shift
> 	    ;;
> 	-*)
> 	    echo "Unknown option '$1' ignored" 1>&2
> 	    ;;
> 	*)
> 	    files="$files $1"
> 	    ;;
>     esac
>     shift
> done
> echo ' $*' >> $CPPCMD
> 
> case "$makefile" in
>     '')
> 	if [ -r makefile ]
> 	then
> 	    makefile=makefile
> 	elif [ -r Makefile ]
> 	then
> 	    makefile=Makefile
> 	else
> 	    echo 'no makefile or Makefile found' 1>&2
> 	    exit 1
> 	fi
> 	;;
>     -)
> 	makefile=$TMPMAKEFILE
> 	;;
> esac
> 
> echo '' > $DEPENDLINES
> for i in $files
> do
>     $CPPCMD $i \
>       | sed -n "/^#/s;^;$i ;p"
> done \
>   | sed -e 's|/[^/.][^/]*/\.\.||g' -e 's|/\.[^.][^/]*/\.\.||g' \
>     -e 's|"||g' -e 's| \./| |' \
>   | awk '{
> 	if ($1 != $4  &&  $2 != "#ident")
> 	    {
> 	    ofile = substr ($1, 1, length ($1) - 2) "'"$objsuffix"'"
> 	    print ofile, $4
> 	    }
> 	}' \
>   | sort -u \
>   | awk '
> 	    {
> 	    newrec = rec " " $2
> 	    if ($1 != old1)
> 		{
> 		old1 = $1
> 		if (rec != "")
> 		    print rec
> 		rec = $1 ": " $2
> 		}
> 	    else if (length (newrec) > '"$width"')
> 		{
> 		print rec
> 		rec = $1 ": " $2
> 		}
> 	    else
> 		rec = newrec
> 	    }
> 	END \
> 	    {
> 	    if (rec != "")
> 		print rec
> 	    }' \
>       >> $DEPENDLINES
> 
> trap "" 1 2 13 15	# Now we are committed
> case "$makefile" in
>     $TMPMAKEFILE)
> 	;;
>     *)
> 	rm -f Makefile.bak
> 	cp Makefile Makefile.bak
> 	;;
> esac
> 
> #
> #	Before we go edit the Makefile, we must make sure that magic_string
> #	exists, and that it's not the last line.  Otherwise, dear old ed
> #	will exit prematurely.  What a pain.
> #
> cat >> $makefile <<- END_OF_APPEND
> 	$magic_string
> 
> END_OF_APPEND
> ed $silent $makefile <<- END_OF_ED_SCRIPT
> 	/^$magic_string/w $MAGICLINE
> 	/^$magic_string/,\$d
> 	\$r $MAGICLINE
> 	\$r $DEPENDLINES
> 	w
> 	q
> END_OF_ED_SCRIPT
> 
> case "$makefile" in
>     $TMPMAKEFILE)
> 	cat $TMPMAKEFILE
> 	;;
> esac
> 
> rm -f ${TMP}*

	Geoff Kuenning	geoff@lcc.ucla.edu	geoff@ITcorp.com

