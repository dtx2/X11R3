Return-Path: @MCC.COM:peterson%sw.MCC.COM@mcc.com
Received: by expo.lcs.mit.edu; Tue, 9 Aug 88 10:49:27 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA00828; Tue, 9 Aug 88 10:49:38 EDT
Received: from milano.sw.mcc.com by MCC.COM with TCP/SMTP; Tue 9 Aug 88 09:49:24-CDT
Received: from cleo.sw.mcc.com by milano.sw.mcc.com (5.51/STP1.56) 
	id AA13899; Tue, 9 Aug 88 09:49:16 CDT
Date: Tue, 9 Aug 88 09:49:14 CDT
From: James Peterson <peterson%sw.MCC.COM@mcc.com>
Message-Id: <8808091449.AA06371@cleo.sw.mcc.com>
Received: by cleo.sw.mcc.com (3.2/STP1.14) 
	id AA06371; Tue, 9 Aug 88 09:49:14 CDT
To: xbugs@athena.mit.edu
Subject: Bug in xterm/main.c

### bug number:   838
### area:         xterm
### severity:     low
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/280

CLIENT OPERATING SYSTEM:
	SunOS 3.5

DISPLAY:
	CG4

SYNOPSIS:
	 xterm dies silently when xinit is run; leaves a core file behind.

DESCRIPTION:
	 In main.c, xterm looks down a list for a terminal entry for one
	 of the terminals it can emulate, to set TermName. If no termcap
	 entry is found, TermName is left NULL, which causes a core dump
	 when it is used in Setenv later.

	 TermName can be left NULL if (1) no termcap file can be found, or
	 (2) no termcap entry can be found for one of the desired terminal
	 types.  Both of these can happen when a user has his own termcap
	 file, but then starts up xterm on a machine which does not have
	 access to this file (or even if it does, but his termcap file has
	 only a few special entries).
	

REPEAT-BY:
	setenv TERMCAP ~HOME/non-file   # set termcap env variable to non-file
	<now start xinit or xterm>


FIX:
	diffs of xterm/main.c:

1074,1075c1072,1079
< 	while(*envnew) {
< 		if(tgetent(ptr, *envnew) == 1) {
---
> 	while(*envnew != NULL) {
> 		i = tgetent(ptr, *envnew);
> 		if (i < 0)
> 		  {
> 		    fprintf(stderr, "Cannot a termcap file\n");
> 		    exit(-1);
> 		  }
> 		if(i == 1) {
1082a1087,1091
> 	if (TermName == NULL)
> 	  {
> 	    fprintf(stderr, "Cannot find a termcap entry\n");
> 	    exit(-1);
> 	  }
1084d1092

This still is probably insufficient.  By the time this code is executed,
it is in the spawned subprocess, and by then stderr seems to have been
screwed around with so that you cannot write error messages.



