Return-Path: vesper%3d.DEC@decwrl.dec.com
Received: by expo.lcs.mit.edu; Tue, 3 May 88 11:14:38 EDT
Received: by decwrl.dec.com (5.54.4/4.7.34)
	id AA07910; Tue, 3 May 88 08:13:31 PDT
Message-Id: <8805031513.AA07910@decwrl.dec.com>
From: vesper%3d.DEC@decwrl.dec.com (This is not a mail personal name)
Date: 3 May 88 11:14
To: xbugs@expo.lcs.mit.edu, ORGOVAN%STAR.DEC@decwrl.dec.com,
        VESPER%3d.DEC@decwrl.dec.com
Subject: XK_aCURRENTgrave is not properly shifted

### bug number:   446
### area:         Xlib
### severity:     low
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	All

CLIENT OPERATING SYSTEM:
	All

DISPLAY:
	All

SYNOPSIS:
	 XLookupString will not change non-ascii alphabetic characters
	 to the upper case equivalent when a Caps Lock is on.

DESCRIPTION:
	 The code that checks for caps lock compares the keysym to
	 the range XK_A to XK_Z.  There are two more ranges to be
	 tested for ISO Latin-1. (Since XLookupString only handles
	 ISO Latin-1 this should be acceptable.)

REPEAT-BY:
	1. Create a keyboard map with accented characters (and a Caps Lock)
	2. Install this with xmodmap.
	3. Turn on Caps Lock
	4. Type the accented character.

	You should get the upper-case symbol, but you get the lower-case
	symbol instead.

FIX:
	Modify XKeyBind.c:

************
File AFV:[XV11R2.LIB.X]XKEYBIND.C;13
   27   #define IS_ALPHABETIC(c) ( ((c) >= XK_A && (c) <= XK_Z)	\
   28       || ( (c) >= XK_Agrave && (c) <= XK_Odiaeresis) \
   29       || ( (c) >= XK_Ooblique && (c) <= XK_Thorn) )
   30   
******
File AFV:[XV11R2.LIB.X]XKEYBIND.C;1
   16   
************
************
File AFV:[XV11R2.LIB.X]XKEYBIND.C;13
  219        register int	    lock_alphabetics_only;
  220   
******
File AFV:[XV11R2.LIB.X]XKEYBIND.C;1
  190   
************
************
File AFV:[XV11R2.LIB.X]XKEYBIND.C;13
  248   	lock_alphabetics_only = 0;
  249   
  250   	for (i = m->max_keypermod; i < 2*m->max_keypermod; i++) {
  251   	    /*
  252   	     *	Run through all the keys setting LOCK and,  if
  253   	     *  ANY of them are CAPS_LOCK,  do Caps Lock.
  254   	     *  This is kind of bogus,  but what else to do?
  255   	     *  Supposing we have CAPS_LOCK,  but on the shifted
  256   	     *  part of the key?
  257   	     ** the proper way to do this is to have a flag in the
  258   	     ** display structure corresponding to 
  259   	     ** lock_alphabetics_only, but ... (AFV)
  260   	     */
  261   	    if (XKeycodeToKeysym(event->display, m->modifiermap[i], 0)
  262   		    == XK_Caps_Lock) {
  263   		lock_alphabetics_only = 1;
  264   		break;
  265   		}
  266   	    if (XKeycodeToKeysym(event->display, m->modifiermap[i], 1)
  267   		    == XK_Caps_Lock) {
  268   		lock_alphabetics_only = 1;
  269   		break;
  270   		}
  271   	    }
  272   
  273   	if (usymbol != NoSymbol &&
  274   	    ( lock_alphabetics_only == 0
  275   		|| IS_ALPHABETIC (usymbol) ) )
  276   	    symbol = usymbol;	    /* assume SHIFT_LOCK */
  277       }
******
File AFV:[XV11R2.LIB.X]XKEYBIND.C;1
  196	     /*
  197	      * we have to find out what kind of lock we are dealing with, if any.
  198	      * if caps lock, only shift caps.
  199	      */
  200	     symbol = lsymbol;
  201	     if (event->state & LockMask) {
  202		XModifierKeymap *m = event->display->modifiermap;
  203		int i;
  204	
  205   	if (usymbol != NoSymbol)
  206   	    symbol = usymbol;
  207   	for (i = m->max_keypermod; i < 2*m->max_keypermod; i++) {
  208   	    /*
  209   	     *	Run through all the keys setting LOCK and,  if
  210   	     *  ANY of them are CAPS_LOCK,  do Caps Lock.
  211   	     *  This is kind of bogus,  but what else to do?
  212   	     *  Supposing we have CAPS_LOCK,  but on the shifted
  213   	     *  part of the key?
  214   	     */
  215   	    if (XKeycodeToKeysym(event->display, m->modifiermap[i], 0)
  216   		    == XK_Caps_Lock) {
  217   			if (usymbol >= XK_A && usymbol <= XK_Z)
  218   			    symbol = usymbol;
  219   			else
  220   			    symbol = lsymbol;
  221   			break;
  222   		    }
  223   	}
  224      }
************

