Return-Path: jim
Received: by EXPO.LCS.MIT.EDU; Mon, 14 Mar 88 15:09:54 EST
From: jim@expo.lcs.mit.edu (Jim Fulton)
Message-Id: <8803142009.AA15633@EXPO.LCS.MIT.EDU>
To: xbugs
Subject: keysym -> artibrary string translation support needed
Date: Mon, 14 Mar 88 15:09:53 EST

### bug number:   110
### area:         Xlib
### severity:     medium
### assigned to:  jim
### comments:     this is a duplicate of 730; the right thing to do is to 
###               parse a toolkit-like resource


VERSION:
	X11 release 2

CLIENT MACHINE:
	all

CLIENT OPERATING SYSTEM:
	all

DISPLAY:
	all

SYNOPSIS:
	There needs to be a generic way to bind arbitrary strings to keysyms.

DESCRIPTION:
	The X10 .Xkeymap functionality is missing and a lot of people are
	complaining.  There needs to be some sort of way of specifying bindings
	for arbitrary strings to keysyms.  

REPEAT-BY:
	look at code and documentation

FIX:
	The following message describes two possible, but not necessarily
	correct, solutions to the problem.  Briefly, the are:

	    1.  Use a property on the root window to store the 
		<keysym,string> pairs.  Read this property and merge it
		in on the first call to XLookupString.

	    2.  Use a property on the root window to store the 
		<keycode,modifierbits,string> tuples.  Read this property and
		merge it in on the first call to XLookupString.  Provide a 
		nice interface that perhaps does keysym -> keycode
		translation.

	    3.  Use the Resource Manager to somehow store the bindings so that
		you can do inheritance (ideally including classing as well).
		This is somewhat tricky since you need to encode to the 
		various modifier bits.  You could probably do this by having
		convention that said that a keystring would be named by 
		mixing in the modifier names in some particular order.  Then
		you could name things as follows:

			c		keyBinding.c
			^c		keyBinding.Control-c
			F2		keyBinding.F2
			C-M-X		keyBinding.Control-Meta-X
			C-M-S-F1	keyBinding.Control-Meta-Shift-F1
			Mod1--		keyBinding.Mod1-minus

		Ideally, you'd like to have support for querying the 
		resource manager for all defined resources and caching
		this information in some sort of KeyBindingDescriptor.
		The problem is, doing all of these lookup gets to be quite
		expensive.  However, since keycodes are 8 bits and there are
		3 bits of modifiers, you might be able to get away with having
		a 256 by 8 array that is filled in after each lookup.  
		MappingNotify events could be handled by flushing this array
		from XRefreshKeyboardMapping.  

		In using the resource manager, it would be nice to have
		searches deal appropriately with instance and class names.
		By default, the names would be blank, however, additional
		calls to get and set the default name could be provided.

		This raises the issue of whether or not you have to maintain 
		the cache if the application change the default name.  For
		performance of keyboard-intensive applications, it is 
		important that every key press not require building a 
		resource string and doing a query.  It might be argued that
		truly sophisticated key table management should be provided
		by a toolkit.

	This will require a modest amount of time to design and implement
	correctly.

------- Forwarded Message

To: bzs%bu-cs.bu.edu@bu-it.bu.edu (Barry Shein)
cc: xpert@athena.mit.edu
Subject: Re: Key Maps...one more time... 
In-reply-to: Your message of Thu, 10 Mar 88 17:05:56 EST.
             <8803102205.AA29473@bu-cs.bu.edu> 
Date: Mon, 14 Mar 88 14:52:04 EST
From: jim


> Ok, I admit I'm a little slow, but can someone explain one more time
> what replaced the X10 notion of an Xkeymap, from the point of view of
> someone like me trying to get everyone here to go over to X11 and this
> is the first thing they notice and ask about.

As of R2, there currently isn't a replacement.  The problem is that this
information has to be stored in the server where all of the clients can get
at it, and you need a way of getting that information into the client.  The
question is, how should the client use this information?

A simple, but not necessarily sufficient, approach might be to use a property
on the root window (as is done by xrdb and the X Defaults routines) that gets
merged in the first time XLookupString is called.  This has the benefit of
not requiring code changes while providing basically the same functionality
available under X10.  But, is this really what people want in the long run?

Ideally, the routines that translate keysyms to strings should use the Resource
Manager so that you can specify different bindings for different types of
applications/widgets/etc., using the full inheritance and class/instance
mechanisms.  It would also mean that there is only one place where this sort of
information is stored.  The problem is, doing this in a way that doesn't break
things requires more time than we've had lately. 

> 7. Xmodmap serves this function perfectly well, it just doesn't happen
> to do anything you want.

Nope.  The R2 version of xmodmap never was intended to do this.  Unlike X10,
X11 provides a two-level translation from keyboard button code to arbitrary
text string:

	keycode		magic cookie for actual keyboard button pressed (this
	   |		is specific to a given keyboard)
	   V
	keysym		represents the symbol that the user pressed (may be
	   |		bound to any physical key with xmodmap) and is generic
	   V 
	string		arbitrary textual translation of the symbol (there
			aren't any tools yet for doing this automatically)


At the moment, xmodmap may only be used to affect the first level of
translation.  It would be useful to add the second level here as well, although
you absolutely have to have the first so that you can "rearrange" the keyboard.
Swapping the control and shift keys (to name a trivial, but portable example)
is actually a very popular thing to do. 

We haven't forgotten about binding arbitrary strings to keys.  There is clearly
a lot of demand for it, but we simply haven't had time yet.  So, the answer to
your original question is probably "4". 


					Jim Fulton
					X Consortium
					MIT Laboratory for Computer Science 
					(617) 253-1428
					jim@EXPO.LCS.MIT.EDU



------- End of Forwarded Message


