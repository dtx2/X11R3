Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: by expo.lcs.mit.edu; Wed, 8 Jun 88 09:19:40 EDT
Date: Wed, 8 Jun 88 09:18 EDT
From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Subject: sequence numbering enhancment in Xlib
To: xbugs@expo.lcs.mit.edu
Message-Id: <19880608131858.4.RWS@KILLINGTON.LCS.MIT.EDU>

### bug number:   574
### area:         Xlib
### severity:     enhancement
### comments:     

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	any

DISPLAY:
	any

AREA:
	Xlib

SYNOPSIS:
	be kind to bozos

DESCRIPTION:
	The Xlib manual explicitly states that the function given to
	XSetErrorHandler cannot generate additional requests.  Fine.
	However, it is simple to avoid at least some problems caused by
	this, and so we might as well be nice (just in the
	implementation, I'm not suggesting we change the spec).

	While we're at it, make a small change that will begin to
	support Xlib routines that stream multiple requests (for which
	there are replies), so that we don't assume the reply sequence
	number matches the most recent outstanding request.

REPEAT-BY:
	Run the version of twm that destroys windows in its error handler,
	iconify from a menu from a title bar, and see the "sequence lost"
	message.

FILES:
	lib/X/XlibInt.c

FIX:

*** /tmp/,RCSt1a00938	Wed Jun  8 09:10:30 1988
--- lib/X/XlibInt.c	Wed Jun  8 08:34:28 1988
***************
*** 2,8 ****
  /* Copyright    Massachusetts Institute of Technology    1985, 1986, 1987 */
  
  #ifndef lint
! static char rcsid[] = "$Header: XlibInt.c,v 11.67 88/06/07 18:51:25 rws Exp $";
  #endif
  
  /*
--- 2,8 ----
  /* Copyright    Massachusetts Institute of Technology    1985, 1986, 1987 */
  
  #ifndef lint
! static char rcsid[] = "$Header: XlibInt.c,v 11.68 88/06/08 08:33:08 rws Exp $";
  #endif
  
  /*
***************
*** 388,393 ****
--- 388,398 ----
      int extra;		/* number of 32-bit words expected after the reply */
      Bool discard;	/* should I discard data followind "extra" words? */
  {
+     /* Pull out the serial number now, so that (currently illegal) requests
+      * generated by an error handler don't confuse us.
+      */
+     unsigned long cur_request = dpy->request;
+ 
      _XFlush(dpy);
      while (1) {
  	_XRead(dpy, (char *)rep, (long)sizeof(xReply));
***************
*** 394,401 ****
  	switch ((int)rep->generic.type) {
  
  	    case X_Reply:
! 	        /* Reply recieved. */
! 		dpy->last_request_read = dpy->request;
  		if (extra == 0) {
  		    if (discard && (rep->generic.length > 0))
  		       /* unexpectedly long reply! */
--- 399,411 ----
  	switch ((int)rep->generic.type) {
  
  	    case X_Reply:
! 	        /* Reply received.  Fast update for synchronous replies,
! 		 * but deal with multiple outstanding replies.
! 		 */
! 	        if (rep->generic.sequenceNumber == (cur_request & 0xffff))
! 		    dpy->last_request_read = cur_request;
! 		else
! 		    (void) _SetLastRequestRead(dpy, &rep->generic);
  		if (extra == 0) {
  		    if (discard && (rep->generic.length > 0))
  		       /* unexpectedly long reply! */
***************
*** 435,441 ****
  		unsigned long serial;
  
  		serial = _SetLastRequestRead(dpy, (xGenericReply *)rep);
! 		if (serial == dpy->request)
  			/* do not die on "no such font", "can't allocate",
  			   "can't grab" failures */
  			switch ((int)err->errorCode) {
--- 445,451 ----
  		unsigned long serial;
  
  		serial = _SetLastRequestRead(dpy, (xGenericReply *)rep);
! 		if (serial == cur_request)
  			/* do not die on "no such font", "can't allocate",
  			   "can't grab" failures */
  			switch ((int)err->errorCode) {
***************
*** 470,476 ****
  			    break;
  			}
  		_XError(dpy, err);
! 		if (serial == dpy->request)
  		    return(0);
  		}
  		break;
--- 480,486 ----
  			    break;
  			}
  		_XError(dpy, err);
! 		if (serial == cur_request)
  		    return(0);
  		}
  		break;

