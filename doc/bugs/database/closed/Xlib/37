Return-Path: toddb
Received: by expo.lcs.mit.edu; Tue, 26 Jul 88 22:16:08 EDT
Message-Id: <8807270216.AA14004@EXPO.LCS.MIT.EDU>
To: xbugs@expo.lcs.mit.edu
Subject: X10 drawfilled slices and dices polygons
Date: Tue, 26 Jul 88 22:16:07 EDT
From: Todd Brunhoff <toddb@EXPO.LCS.MIT.EDU>

### bug number:   785
### area:         Xlib
### severity:     low
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	All

CLIENT OPERATING SYSTEM:
	All

DISPLAY:
	All

SYNOPSIS:
	
	XDrawFilled slices up its request when it sees a point marked with
	VertexDontDraw.

DESCRIPTION:
	XDrawFilled is supposed to be called with a full set of points for a
	polygon.  This code was splitting up the request if it encountered
	a VertexDontDraw, but the X11 FillPolygon request is guarenteed
	not to draw any points twice, so this is (a) unnecessary and (b)
	incorrect because polygons are sliced up.

REPEAT-BY:
	Run the following program under the protocol converter.  Under X10 servers
	it draws a diamond shaped doughnut with the doughnut colored white and
	the hole and the rest of the background painted black.  X11 paints it
	as an outline only.
#include <X/Xlib.h>

/*
:! cc -g % -lX
:! a.out
*/

Vertex vlist[] =		/* small closed diamond inside larger one */
    {
	{100, 150, 2},
	{150, 200, 0},
	{200, 150, 0},
	{150, 100, 0},
	{100, 150, 0},

	{050, 150, 2},
	{150, 050, 0},
	{250, 150, 0},
	{150, 250, 0},
	{050, 150, 0}
    };

main()
{
    Display * d;
    Window w;

    d = XOpenDisplay (0);
    w = XCreateWindow(RootWindow,10,10, 300, 300, 3, WhitePixmap, BlackPixmap);
    XMapWindow (w);
    XFlush();
sleep(3);
    XDrawFilled (w, vlist, 10, 1, GXcopy, ~0);
    XFlush();
    pause();
}



FIX:

*** /tmp/,RCSt1a13985	Tue Jul 26 22:13:53 1988
--- XDraw.c	Tue Jul 26 22:05:17 1988
***************
*** 1,4 ****
! /* $Header: XDraw.c,v 1.3 87/12/09 19:08:55 rws Exp $ */
  #include "copyright.h"
  
  /* Copyright    Massachusetts Institute of Technology    1987	*/
--- 1,4 ----
! /* $Header: XDraw.c,v 1.6 88/07/26 22:03:37 toddb Exp $ */
  #include "copyright.h"
  
  /* Copyright    Massachusetts Institute of Technology    1987	*/
***************
*** 182,187 ****
--- 182,188 ----
    int	flag;	    	    /* flag word of current end-point in p.list  */
    int successor_x = 0;	    /* X coordinate of curve's successor point   */
    int successor_y = 0;	    /* Y coordinate of curve's successor point   */
+   int little_endian;	    /* stupid bntable is little-endian */
    WORD increment;	    /* bntable-ptr-increment value       */
    WORD diffx, diffy;	    /* absolute values of x, y end-point diffs   */
    WORD lmajoraxis;	    /* "length" of seg projected onto major axis */
***************
*** 202,207 ****
--- 203,218 ----
    int       count;
    int	    curve_flag;	    /* 0 = no curves in path; 1 = curves in path */
    
+   /*
+    * The following is necessary because of the pseudo-floating point
+    * calculations done down below.
+    */
+   i = 1;
+   if (*(char *) &i)
+     little_endian = 1;
+   else
+     little_endian = 0;
+ 
    {
      register Vertex *poldpath;/* pointer for traversing original path list */
      register Vertex *p_coord_path; /* ptr to path list with coordinates    */
***************
*** 457,464 ****
  		    yye.lword = yye.lword << 1;	/* ...bn accts for it*/
  		    xxe.lword += 0x8000; /* round off the accum value */
  		    yye.lword += 0x8000;
! 		    pnewpath->x = xxe.sword.high;/* the X coordinate  */
! 		    pnewpath->y = yye.sword.high;/* the Y coordinate  */
  		    (pnewpath++)->flags = 0;	/* the flag word     */
      	    	    newpathcount++;/* increment segment end-point countr*/
  		  }	    	   /* end sub-segment end-point compute loop*/
--- 468,480 ----
  		    yye.lword = yye.lword << 1;	/* ...bn accts for it*/
  		    xxe.lword += 0x8000; /* round off the accum value */
  		    yye.lword += 0x8000;
! 		    if (little_endian) {
! 			pnewpath->x = xxe.sword.high;/* the X coordinate  */
! 			pnewpath->y = yye.sword.high;/* the Y coordinate  */
! 		    } else {
! 			pnewpath->x = xxe.sword.low;/* the X coordinate  */
! 			pnewpath->y = yye.sword.low;/* the Y coordinate  */
! 		    }
  		    (pnewpath++)->flags = 0;	/* the flag word     */
      	    	    newpathcount++;/* increment segment end-point countr*/
  		  }	    	   /* end sub-segment end-point compute loop*/
***************
*** 593,599 ****
    int newvcount;
    XPoint *p;
    int pcount;
-   int closed;
  
    /* If less than 2 vertices, we don't have to do anything (no lines) */
    if (vcount<2)
--- 609,614 ----
***************
*** 621,627 ****
    while (newvcount>0) {
      p = XDraw_points;               /* Put points in buffer */
      pcount = 0;
-     closed = newvlist->flags & VertexStartClosed;
      p->x = newvlist->x;             /* Copy first point */
      (p++)->y = (newvlist++)->y;
      newvcount--; pcount++;
--- 636,641 ----
***************
*** 635,642 ****
       * must be the first vertex in its XDrawLines call to get joining
       * to work correctly.
       */
!     while (newvcount > 0 && !(newvlist->flags & (VertexDontDraw |
! 						 VertexStartClosed |
  						 VertexEndClosed))) {
        p->x = newvlist->x;
        (p++)->y = (newvlist++)->y;
--- 649,655 ----
       * must be the first vertex in its XDrawLines call to get joining
       * to work correctly.
       */
!     while (newvcount > 0 && !(newvlist->flags & (VertexStartClosed |
  						 VertexEndClosed))) {
        p->x = newvlist->x;
        (p++)->y = (newvlist++)->y;
***************
*** 647,653 ****
       * If stopped only because of need to start a new XDrawLines, copy
       * next point but don't advance pointer so two XdrawLines act like one.
       */
!     if ( newvcount > 0 && !(newvlist->flags & VertexDontDraw) ) {
        p->x = newvlist->x;
        (p++)->y = newvlist->y;
        pcount++;
--- 660,666 ----
       * If stopped only because of need to start a new XDrawLines, copy
       * next point but don't advance pointer so two XdrawLines act like one.
       */
!     if ( newvcount > 0 ) {
        p->x = newvlist->x;
        (p++)->y = newvlist->y;
        pcount++;
***************
*** 655,665 ****
  
      /* Do the XDrawLines if there are any lines to draw */
      if (pcount>1) {
- 	if (closed)
  	  XFillPolygon(dpy, d, gc, XDraw_points, pcount, Complex,
  		       CoordModeOrigin);
- 	else
- 	  XDrawLines(dpy, d, gc, XDraw_points, pcount, CoordModeOrigin);
      }
    }
  
--- 668,675 ----

