Return-Path: karynk@spray.calcomp.com
Received: by expo.lcs.mit.edu; Tue, 19 Apr 88 13:18:00 EDT
Received: by EDDIE.MIT.EDU with sendmail-5.45/4.7 id <AA01293@EDDIE.MIT.EDU>; Tue, 19 Apr 88 13:14:47 EDT
Received: by harvard.harvard.edu; Tue, 19 Apr 88 09:55:09 EST
Received: from spray.CalComp.COM (spray.ARPA) 
	by elrond.CalComp.COM (1.2/smail2.5/01-15-88)
	id AA05095; Tue, 19 Apr 88 10:04:11 edt
Received: by spray.CalComp.COM (5.52/UUCP-Proj/rel1.0/14-Jan-87)
	id AA01541; Tue, 19 Apr 88 10:08:04 EDT
Date: Tue, 19 Apr 88 10:08:04 EDT
From: karynk@spray.calcomp.com (Karyn M. Kachinski)
Message-Id: <8804191408.AA01541@spray.CalComp.COM>
To: xbugs@expo.lcs.mit.edu
Subject: bug on negative line widths
Cc: karynk@spray.calcomp.com

### bug number:   388
### area:         Xlib
### severity:     
### assigned to:  
### status:       closed
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/160

CLIENT OPERATING SYSTEM:
	SunOS 3.4

DISPLAY:
	CG4

SYNOPSIS:
	Setting a line width of -1 in a program results in the server using
a 65535 for a line width.  (any negative number will do this, this is just
one case.)

DESCRIPTION:
	For the bindings, and the server the linewidth type in the GC is 
declared to be an int.  In the file dix/gc.c, before the linewidth is set, it
casts it to be a CARD16 type (unsigned). (Edit it and search for lineWidth to
find the line.)

REPEAT-BY:

This test program displays dashed lines.  The mouse buttons are used to change
the line width (Left button changes width to 0, middle button increments width
by 1, right button decrements width by 1).  The DISPLAY environment variable
should be set to the desired display to use.
++++++++++++++++++++++++++++++++++ cut here +++++++++++++++++++++++++++++++++
#include <stdio.h>
#include <math.h>
#include <strings.h>
#include <signal.h>
#include <X11/Xlib.h>
#include <X11/Xatom.h>
#include <X11/Xutil.h>
#include <sys/time.h>

extern char *getenv();


/* objects */
Display	 *dpy;
Window   theWindow,theInputWindow;
Window   theNextWindow;

#define WIDTH  512
#define HEIGHT 512
#define BORDER 1

XEvent			event;
XSetWindowAttributes	xswa;
XGCValues		xgcv;
GContext		gc;
Visual			visual;

Colormap 	colors;
XColor	xcsd, xced;

/**************/
main(argc, argv)      
    int   argc;
    char *argv[];
/**************/
{

int	x,y;
int	height,width,border;
int	offset;
int ForeColor,BackColor,Color;
char *display = NULL;

char *p;			/* get environment variable */

/*****************************************************/

    /* Open up the display. */

    if ((dpy = XOpenDisplay(display)) == NULL) {
        fprintf(stderr, "%s: Can't open display '%s'\n",argv[0], display);
        exit(1);
    }

    /* Open the main window output. */
    x = 0;
    y = 0;
    width = WIDTH;
    height = HEIGHT;
    border = BORDER;

    xswa.background_pixel = BlackPixel(dpy, DefaultScreen(dpy)); /* */
    xswa.border_pixel = WhitePixel(dpy, DefaultScreen(dpy));
    xswa.event_mask = ExposureMask | ButtonPressMask; /* see what you get */
    visual.visualid = CopyFromParent;
    theWindow = XCreateWindow(dpy, RootWindow(dpy, DefaultScreen(dpy)),
		x, y, width, height, border,
		CopyFromParent, InputOutput, &visual, 
		CWEventMask | CWBackPixel | CWBorderPixel,
		&xswa );

    xgcv.function = GXcopy;
    xgcv.foreground = WhitePixel(dpy, DefaultScreen(dpy));
    xgcv.line_width = 0;
    xgcv.line_style = LineDoubleDash;
    xgcv.cap_style = CapButt;
    xgcv.join_style = JoinMiter;
    gc = (GContext)XCreateGC(dpy, theWindow, GCFunction|GCLineStyle|GCLineWidth|GCCapStyle|GCJoinStyle|GCForeground, &xgcv);

    XMapWindow(dpy, theWindow);

    /**************** Main loop *****************/

    while (1) {

        XNextEvent(dpy, &event);

        switch (event.type) {
	case ButtonPress:
	    printf(" button %d \n",event.xbutton.button);
	    switch( event.xbutton.button ) {
		case Button1:
		    xgcv.line_width = 0;
		    printf(" line_width %d \n",xgcv.line_width);
		    XChangeGC(dpy, gc, GCLineWidth, &xgcv);
	            break;
		case Button2:
		    xgcv.line_width++;
		    printf(" line_width %d \n",xgcv.line_width);
		    XChangeGC(dpy, gc, GCLineWidth, &xgcv);
	            break;
		case Button3:
		    xgcv.line_width--;
		    printf(" line_width %d \n",xgcv.line_width);
		    XChangeGC(dpy, gc, GCLineWidth, &xgcv);
	            break;
	    }
	    XClearWindow( dpy, theWindow );
	    XDrawLine( dpy, theWindow, gc, x, y, width, height );
	    XDrawLine( dpy, theWindow, gc, x, height, width, y );
	    XDrawLine( dpy, theWindow, gc, x, height/2, width, height/2 );
	    XDrawLine( dpy, theWindow, gc, width/2, y, width/2, height );
            break;
	case Expose:
	    XDrawLine( dpy, theWindow, gc, x, y, width, height );
	    XDrawLine( dpy, theWindow, gc, x, height, width, y );
	    XDrawLine( dpy, theWindow, gc, x, height/2, width, height/2 );
	    XDrawLine( dpy, theWindow, gc, width/2, y, width/2, height );
            break;
        default:
	    break;
        }  /* end of switch */
    }  /* end while loop */
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

FIX:
	Have the Xlib level check for negative linewidths and return an
error??

	Have the gc.c file check for a negative value before the cast and
either return an error, or use a default value???

