Return-Path: @XX.LCS.MIT.EDU,@relay.cs.net:glennw@shark.gwd.tek.com
Received: by expo.lcs.mit.edu; Wed, 27 Apr 88 12:38:50 EDT
Received: from RELAY.CS.NET by XX.LCS.MIT.EDU with TCP/SMTP; Wed 27 Apr 88 12:26:44-EDT
Received: from relay2.cs.net by RELAY.CS.NET id ak05539; 26 Apr 88 16:17 EDT
Received: from tektronix.tek.com by RELAY.CS.NET id am01449; 26 Apr 88 15:56 EDT
Received: from shark.GWD.TEK.COM by tektronix.TEK.COM (5.51/6.24)
	id AA10316; Tue, 26 Apr 88 08:51:45 PDT
Received: by shark.GWD.TEK.COM (5.16/6.24)
	id AA16709; Tue, 26 Apr 88 08:51:40 PDT
From: Glenn Widener <glennw@shark.gwd.tek.com>
Message-Id: <8804261551.AA16709@shark.GWD.TEK.COM>
Date: Tue, 26 Apr 88 08:51:37 PDT
To: xbugs@expo.lcs.mit.edu
Cc: alt@shark.gwd.tek.com
Fcc: buglog
Subject: X11 R2 bug report: X*Event flushing too soon

### bug number:   426
### area:         Xlib
### severity:     low
### comments:     


Glenn Widener
M.S. 61-277
Tektronix, Inc.
P.O. Box 1000
Wilsonville, OR
	 97070-1000

(503) 685-2494
glennw@shark.GWD.TEK.COM

--------------------
VERSION:
	X11 release 2

CLIENT MACHINE:
	any

CLIENT OPERATING SYSTEM:
	any 

DISPLAY:
	any

SYNOPSIS:
	X*Event flushing too soon

DESCRIPTION:
	Area: xlib
	Files: lib/X/XlibInt.c, lib/X/XChk*.c, doc/Xlib/ch08

	Event reading routines should not flush until after reading events
	from the connection.  This is a performance issue, and an issue
	of consistency with the Xlib manual.

FIX:
	In Check routines, use XEventQueued(QueuedAfterReading) instead of 
	XEventQueued(QueuedAfterFlush), then XFlush before
	returning False. In XReadEvents, (XlibInt.c),  
	don't flush until it blocks the first time.
	In xlib manual chapter 8, change text on blocking routines to
	match.

*** /tmp/,RCSt1021645	Tue Apr 26 08:12:57 1988
--- ch08	Wed Apr 13 15:35:16 1988
***************
*** 3545,3550
  Obtain events that match the event type you specify.
  .IP \(bu 5
  Put an event back on the head of the queue.
  .NH 3
  Returning the Next Event
  .XS

--- 3545,3556 -----
  Obtain events that match the event type you specify.
  .IP \(bu 5
  Put an event back on the head of the queue.
+ .LP
+ All routines that return events automatically flush the output buffer at
+ appropriate times.
+ If a routine is about to block indefinitely waiting for input, then
+ it will flush the output buffer.  If a routine returns without
+ finding an event, then the output buffer will have been flushed.
  .NH 3
  Returning the Next Event
  .XS
***************
*** 3563,3569
  .so ./Xsrc/event2.a
  .LP
  .so ./Xdescrip/XNextEvent.d
! If the event queue is empty, 
  .PN XNextEvent
  flushes the output buffer and blocks until an event is received.
  For example, if a

--- 3569,3575 -----
  .so ./Xsrc/event2.a
  .LP
  .so ./Xdescrip/XNextEvent.d
! If no events are available,
  .PN XNextEvent
  flushes the output buffer and blocks until an event is received.
  For example, if a
***************
*** 3588,3594
  .so ./Xsrc/event2.a
  .LP
  .so ./Xdescrip/XPeekEvent.d
! If the queue is empty, 
  .PN XPeekEvent
  flushes the output buffer and blocks until an event is received.
  It then copies the event into the client-supplied

--- 3594,3600 -----
  .so ./Xsrc/event2.a
  .LP
  .so ./Xdescrip/XPeekEvent.d
! If no events are available,
  .PN XPeekEvent
  flushes the output buffer and blocks until an event is received.
  It then copies the event into the client-supplied
***************
*** 3694,3702
  structure, removes the event from the queue, and returns
  .PN True .
  The other events stored in the queue are not discarded.
- Before looking for events on the server connection, 
- .PN XCheckIfEvent
- flushes the output buffer.
  If the predicate procedure finds no match,
  .PN XCheckIfEvent
  returns

--- 3700,3705 -----
  structure, removes the event from the queue, and returns
  .PN True .
  The other events stored in the queue are not discarded.
  If the predicate procedure finds no match,
  .PN XCheckIfEvent
  returns
***************
*** 3700,3706
  If the predicate procedure finds no match,
  .PN XCheckIfEvent
  returns
! .PN False .
  .LP
  .sp
  To wait for the next occurance of the specified event,

--- 3703,3710 -----
  If the predicate procedure finds no match,
  .PN XCheckIfEvent
  returns
! .PN False 
! and flushes the output buffer.
  .LP
  .sp
  To wait for the next occurance of the specified event,
***************
*** 3754,3760
  .LP
  .so ./Xdescrip/XWindowEvent.d
  The other events stored in the queue are not discarded.
! If the event you requested is not in the queue,
  .PN XWindowEvent
  flushes the output buffer and blocks until one is received.
  .LP

--- 3758,3764 -----
  .LP
  .so ./Xdescrip/XWindowEvent.d
  The other events stored in the queue are not discarded.
! If the event you requested is not already available,
  .PN XWindowEvent
  flushes the output buffer and blocks until one is received.
  .LP
***************
*** 3780,3788
  .LP
  .so ./Xdescrip/XChkWinEvnt.d
  The other events stored in the queue are not discarded.
- Before looking for events on the server connection, 
- .PN XCheckWindowEvent
- flushes the output buffer.
  If the event you requested is not available,
  .PN XCheckWindowEvent
  returns

--- 3784,3789 -----
  .LP
  .so ./Xdescrip/XChkWinEvnt.d
  The other events stored in the queue are not discarded.
  If the event you requested is not available,
  .PN XCheckWindowEvent
  returns
***************
*** 3786,3792
  If the event you requested is not available,
  .PN XCheckWindowEvent
  returns
! .PN False .
  .LP
  .sp
  To wait for the next event that matches an event mask, use

--- 3787,3794 -----
  If the event you requested is not available,
  .PN XCheckWindowEvent
  returns
! .PN False 
! and flushes the output buffer.
  .LP
  .sp
  To wait for the next event that matches an event mask, use
***************
*** 3802,3808
  .LP
  .so ./Xdescrip/XMaskEvent.d
  The other events stored in the queue are not discarded.
! If the event you requested is not in the queue,
  .PN XMaskEvent
  flushes the output buffer and blocks until one is received.
  .LP

--- 3804,3810 -----
  .LP
  .so ./Xdescrip/XMaskEvent.d
  The other events stored in the queue are not discarded.
! If the event you requested is not already available,
  .PN XMaskEvent
  flushes the output buffer and blocks until one is received.
  .LP
***************
*** 3826,3834
  .LP
  .so ./Xdescrip/XChkMskEvnt.d
  The other events stored in the queue are not discarded.
- Before looking for events on the server connection, 
- .PN XCheckMaskEvent
- flushes the output buffer.
  If the event you requested is not available,
  .PN XCheckMaskEvent
  returns 

--- 3828,3833 -----
  .LP
  .so ./Xdescrip/XChkMskEvnt.d
  The other events stored in the queue are not discarded.
  If the event you requested is not available,
  .PN XCheckMaskEvent
  returns 
***************
*** 3832,3838
  If the event you requested is not available,
  .PN XCheckMaskEvent
  returns 
! .PN False .
  .NH 4
  Selecting Events Using a Window or Event Type
  .XS

--- 3831,3838 -----
  If the event you requested is not available,
  .PN XCheckMaskEvent
  returns 
! .PN False 
! and flushes the output buffer.
  .NH 4
  Selecting Events Using a Window or Event Type
  .XS
***************
*** 3858,3866
  .LP
  .so ./Xdescrip/XChkTypEvnt.d
  The other events in the queue are not discarded.
- Before looking for events on the server connection, 
- .PN XCheckTypedEvent
- flushes the output buffer.
  If the event is not available, 
  .PN XCheckTypedEvent
  returns

--- 3858,3863 -----
  .LP
  .so ./Xdescrip/XChkTypEvnt.d
  The other events in the queue are not discarded.
  If the event is not available, 
  .PN XCheckTypedEvent
  returns
***************
*** 3864,3870
  If the event is not available, 
  .PN XCheckTypedEvent
  returns
! .PN False .
  .LP
  .sp
  To return the next event already available, if any,

--- 3861,3868 -----
  If the event is not available, 
  .PN XCheckTypedEvent
  returns
! .PN False 
! and flushes the output buffer.
  .LP
  .sp
  To return the next event already available, if any,


*** /tmp/,RCSt1021607	Tue Apr 26 07:52:49 1988
--- XlibInt.c	Tue Apr 12 10:49:01 1988
***************
*** 126,131
  	long pend_not_register; /* because can't "&" a register variable */
  	register long pend;
  	register xEvent *ev;
  
  	_XFlush (dpy);
  	do {

--- 126,132 -----
  	long pend_not_register; /* because can't "&" a register variable */
  	register long pend;
  	register xEvent *ev;
+ 	Bool not_yet_flushed = True;
  
  	do {
  	    /* find out how much data can be read */
***************
*** 127,133
  	register long pend;
  	register xEvent *ev;
  
- 	_XFlush (dpy);
  	do {
  	    /* find out how much data can be read */
  	    if (BytesReadable(dpy->fd, (char *) &pend_not_register) < 0)

--- 128,133 -----
  	register xEvent *ev;
  	Bool not_yet_flushed = True;
  
  	do {
  	    /* find out how much data can be read */
  	    if (BytesReadable(dpy->fd, (char *) &pend_not_register) < 0)
***************
*** 135,142
  	    pend = pend_not_register;
  
  	    /* must read at least one xEvent; if none is pending, then
! 	       we'll just block waiting for it */
! 	    if (pend < sizeof(xEvent))
  	    	pend = sizeof (xEvent);
  		
  	    /* but we won't read more than the max buffer size */

--- 135,142 -----
  	    pend = pend_not_register;
  
  	    /* must read at least one xEvent; if none is pending, then
! 	       we'll just block waiting for it (and flush the first time we do) */
! 	    if (pend < sizeof(xEvent)) {
  	    	pend = sizeof (xEvent);
  			/* don't flush until we block the first time */
  			if(not_yet_flushed) {
***************
*** 138,144
  	       we'll just block waiting for it */
  	    if (pend < sizeof(xEvent))
  	    	pend = sizeof (xEvent);
! 		
  	    /* but we won't read more than the max buffer size */
  	    if (pend > BUFSIZE)
  	    	pend = BUFSIZE;

--- 138,150 -----
  	       we'll just block waiting for it (and flush the first time we do) */
  	    if (pend < sizeof(xEvent)) {
  	    	pend = sizeof (xEvent);
! 			/* don't flush until we block the first time */
! 			if(not_yet_flushed) {
! 				_XFlush (dpy);
! 				not_yet_flushed = False;
! 			}
! 		}
! 
  	    /* but we won't read more than the max buffer size */
  	    if (pend > BUFSIZE)
  	    	pend = BUFSIZE;
*** /tmp/,RCSt1021607	Tue Apr 26 07:52:53 1988
--- XChkIfEv.c	Mon Apr 11 17:16:50 1988
***************
*** 44,50
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;

--- 44,50 -----
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
  	_XFlush(dpy);
  	UnlockDisplay(dpy);
***************
*** 46,51
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;
  }

--- 46,52 -----
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
+ 	_XFlush(dpy);
  	UnlockDisplay(dpy);
  	return False;
  }
*** /tmp/,RCSt1021607	Tue Apr 26 07:52:56 1988
--- XChkMaskEv.c	Mon Apr 11 17:17:47 1988
***************
*** 50,56
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;

--- 50,56 -----
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
  	_XFlush(dpy);
  	UnlockDisplay(dpy);
***************
*** 52,57
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;
  }

--- 52,58 -----
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
+ 	_XFlush(dpy);
  	UnlockDisplay(dpy);
  	return False;
  }
*** /tmp/,RCSt1021607	Tue Apr 26 07:53:39 1988
--- XChkTypEv.c	Mon Apr 11 17:18:05 1988
***************
*** 42,48
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;

--- 42,48 -----
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
  	_XFlush(dpy);
  	UnlockDisplay(dpy);
***************
*** 44,49
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;
  }

--- 44,50 -----
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
+ 	_XFlush(dpy);
  	UnlockDisplay(dpy);
  	return False;
  }
*** /tmp/,RCSt1021607	Tue Apr 26 07:53:41 1988
--- XChkTypWEv.c	Mon Apr 11 17:18:18 1988
***************
*** 44,50
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;

--- 44,50 -----
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
  	_XFlush(dpy);
  	UnlockDisplay(dpy);
***************
*** 46,51
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;
  }

--- 46,52 -----
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
+ 	_XFlush(dpy);
  	UnlockDisplay(dpy);
  	return False;
  }
*** /tmp/,RCSt1021607	Tue Apr 26 07:53:44 1988
--- XChkWinEv.c	Mon Apr 11 17:18:32 1988
***************
*** 52,58
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;

--- 52,58 -----
  		    return True;
  		}
  	    }
! 	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
  	_XFlush(dpy);
  	UnlockDisplay(dpy);
***************
*** 54,59
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterFlush);
  	}
  	UnlockDisplay(dpy);
  	return False;
  }

--- 54,60 -----
  	    }
  	    if (n) _XEventsQueued(dpy, QueuedAfterReading);
  	}
+ 	_XFlush(dpy);
  	UnlockDisplay(dpy);
  	return False;
  }

