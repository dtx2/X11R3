Return-Path: elsie!ado@ncifcrf.gov
Received: by expo.lcs.mit.edu; Wed, 29 Jun 88 21:20:40 EDT
Received: by fcs280s.ncifcrf.gov (4.0/NCIFCRF-1.0)
	id AA25511; Wed, 29 Jun 88 21:11:22 EDT
Received: by elsie.UUCP (5.51/4.7)
	id AA18572; Wed, 29 Jun 88 19:57:49 EDT
Date: Wed, 29 Jun 88 19:57:49 EDT
From: elsie!ado@ncifcrf.gov (Arthur David Olson)
Subject: PutImage calls with large amounts of data fail.
Message-Id: <8806292357.AA18572@elsie.UUCP>
Apparently-To: xbugs@expo.lcs.mit.edu

### bug number:   670
### area:         Xlib
### severity:     low
### comments:     

-------------------------------------------------------------------------------
VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/160

CLIENT OPERATING SYSTEM:
	SunOS 3.5

DISPLAY:
	Sun B&W

SYNOPSIS:
	PutImage calls with large amounts of data fail.

DESCRIPTION:
	It happens when EMSGSIZE errors occur.

REPEAT-BY:
	Hop on a Sun and try this program out:

#include "stdio.h"
#include "X11/Xlib.h"

#define NROWS	901
#define NCOLS	1117

long		cooked[NROWS][NCOLS / 32 + 1];

main()
{
	Display *	display;
	Window		window;
	GC		wgc;
	register int	fid, x, y;
	static XImage	image;

	display = XOpenDisplay((char *) NULL);
	XSynchronize(display, 1);
	window = XCreateSimpleWindow(display, RootWindow(display, 0),
		0, 0, NCOLS, NROWS, 5, 1, 0);
	wgc = DefaultGC(display, 0);

	image.width = NCOLS;
	image.height = NROWS;
	image.format = XYBitmap;
	image.data = (char *) cooked;
	image.byte_order = MSBFirst;
	image.bitmap_unit = 32;
	image.bitmap_bit_order = MSBFirst;
	image.bitmap_pad = 32;
	image.depth = 1;
	image.bytes_per_line = sizeof cooked[0];
	image.bits_per_pixel = 1;

	(void) XPutImage(display, window, wgc, &image,
		0, 0, 0, 0, NCOLS, NROWS);

}

FIX:
	The problem occurs because of a miscoded loop in XlibInt.c.
	Some variables are initialized in block declarations, meaning
	that they only get initialized the first time through the loop.
	They need to be initialized each time through the loop.

*** 1.1/XlibInt.c	Wed Jun 29 19:54:11 1988
--- 1.2/XlibInt.c	Wed Jun 29 19:54:14 1988
***************
*** 272,282 ****
--- 272,291 ----
  	long todo = total;
  
  	while (total) {
+ #ifdef ASWAS
  	    long before = skip;
  	    long remain = todo;
  	    int i = 0;
  	    long len;
+ #else /* !defined ASWAS */
+ 	    register long	before, remain, len;
+ 	    register int	i;
  
+ 	    before = skip;
+ 	    remain = todo;
+ 	    i = 0;
+ #endif /* !defined ASWAS */
+ 
  	/* You could be very general here and have "in" and "out" iovecs
  	 * and write a loop without using a macro, but what the heck
  	 */
***************
*** 291,297 ****
  		iov[i].iov_len = len; \
  		iov[i].iov_base = (pointer) + before; \
  		i++; \
! 		remain -= len; \
  		before = 0; \
  	    }
  
--- 300,306 ----
  		iov[i].iov_len = len; \
  		iov[i].iov_base = (pointer) + before; \
  		i++; \
! 		remain - len; \
  		before = 0; \
  	    }
  
-- 
	ado@ncifcrf.gov			ADO is a trademark of Ampex.

