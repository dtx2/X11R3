Return-Path: dmm@apollo.com
Received: by expo.lcs.mit.edu; Mon, 17 Oct 88 11:50:29 EDT
Received: from apollo.UUCP by apollo.com id AA02688; Mon, 17 Oct 88 11:43:42 EDT    
Received: by apollo.UUCP id AA19660; Mon, 17 Oct 88 11:14:23 EDT
Message-Id: <8810171514.AA19660@apollo.UUCP>
From: apollo!dmm
Date: Mon, 17 Oct 88 10:56:29 EDT 
Subject: GetLoadPoint for apollo sr9.7
To: xbugs@expo.lcs.mit.edu

### bug number:   1078
### area:         Xaw
### severity:     low
### comments:     


VERSION:
    R3beta & R2


CLIENT MACHINE and OPERATING SYSTEM:
    Apollo SR9.7

DISPLAY:
    Any.


WINDOW MANAGER:
    Any.


AREA:
    lib/Xaw.


SYNOPSIS:
     Apollo must compute its own load point, since it does not
     have a /dev/kmem file.


DESCRIPTION:
     Apollo provides its own GetLoadPoint routine to compute
     load points.  Any clients which use the non-Apollo version
     of this routine in libXaw.a will not obtain correct values.
     

REPEAT BY:
     Executing the Xload client.  The load display will indicate
     total usage continuously.

FIX (to R3beta):

*** server/lib/Xaw/Load.c    Mon Oct 16 13:10:23 1988

B30       #include "/sys/ins/base.ins.c"
B31       #include "/sys/ins/time.ins.c"
B32       #include "proc1.h"
inserted before
A30       #define LOADSTUB


A371      #ifdef LOADSTUB
A372      
A373      /* ARGSUSED */
changed to
B374      #ifdef apollo
B375      


B381          static Bool    firstTime = TRUE;
B382          static int     lastNullCpu;
B383          static int     lastClock;
B384          time_$clock_t  timeNow;
B385          double         temp;
B386          proc1_$info_t  info;
B387          status_$t      st;
B388      
B389          proc1_$get_info( (short) 2, info, st );
B390          time_$clock( timeNow );
B391      
B392          if (firstTime)
B393          {
B394          	*(double *)call_data = 1.0;
B395              firstTime = FALSE;
B396          }
B397          else {
B398              temp = info.cpu_total.low32 - lastNullCpu;
B399          	*(double *)call_data = 1.0 - temp / (timeNow.low32 - lastClock);
B400          }
B401      
B402          lastClock = timeNow.low32;
B403          lastNullCpu = info.cpu_total.low32;
B404      }
B405      
B406      #else  /* not apollo */
B407      #ifdef LOADSTUB
B408      
B409      
B410      /* ARGSUSED */
B411      static void GetLoadPoint( w, closure, call_data )
B412           Widget	w;		/* unused */
B413           caddr_t	closure;	/* unused */
B414           caddr_t	call_data;	/* pointer to (double) return value */
B415      {
inserted before
A379      	*(double *)call_data = 1.0;


A382      #else /* LOADSTUB */
changed to
B419      #else /* not LOADSTUB */


B476      #endif /* apollo */
inserted before
A439

*** server/lib/Xaw/proc1.h (new file)    Mon Oct 16 13:10:23 1988

/* proc1.h -- special for sr9.7 X Load Widget */

typedef struct {
	short		proc2_$state_t;	/* ready, waiting, etc. */
	pinteger	usr;		/* user sr */
	linteger	upc;		/* user pc */
	linteger	usp;		/* user stack pointer */
	linteger	usb;		/* user sb ptr (A6) */
	time_$clock_t	cpu_total;	/* cumulative cpu used by process */
	unsigned short	priority;	/* process priority */
} proc1_$info_t;

std_$call void proc1_$get_cput();
std_$call void proc1_$get_info();      

