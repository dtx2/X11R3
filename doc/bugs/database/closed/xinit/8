Return-Path: jim
Received: by expo.lcs.mit.edu; Mon, 11 Apr 88 09:24:34 EDT
Message-Id: <8804111324.AA06215@EXPO.LCS.MIT.EDU>
From: ulysses!hector!ekrell@ucbvax.berkeley.edu  (Eduardo Krell)
To: xbugs
Subject: Re: X11 & SHELL PROBLEM
Date: Mon, 11 Apr 88 09:24:31 EDT
Sender: jim@EXPO.LCS.MIT.EDU

### bug number:   348
### area:         xinit
### severity:     
### assigned to:  
### status:       closed
### comments:     solution to problem with xinit causes shells to log out


[see also Guy Harris's comments at the end]

------- Forwarded Message

Return-Path: xpert-request@athena.mit.edu
Received: from ATHENA (ATHENA.MIT.EDU) by expo.lcs.mit.edu; Sat, 9 Apr 88 12:21:35 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA28216; Sat, 9 Apr 88 11:10:42 EST
Received: by ucbvax.Berkeley.EDU (5.59/1.28)
	id AA16141; Sat, 9 Apr 88 07:19:38 PDT
Received: from USENET by ucbvax.Berkeley.EDU with netnews
	for xpert@athena.mit.edu (xpert@athena.mit.edu)
	(contact usenet@ucbvax.Berkeley.EDU if you have questions)
Date: 8 Apr 88 18:00:57 GMT
From: ulysses!hector!ekrell@ucbvax.berkeley.edu  (Eduardo Krell)
Organization: AT&T Bell Labs, Murray Hill
Subject: Re: X11 & SHELL PROBLEM
Message-Id: <10216@ulysses.homer.nj.att.com>
References: <8804051303.AA03580@ATHENA.MIT.EDU>
Sender: xpert-request@athena.mit.edu
To: xpert@athena.mit.edu

In article <8804051303.AA03580@ATHENA.MIT.EDU> obrooks@NSWC-WO.ARPA.UUCP writes:
>
>	Upon termination of the server we return to the shell prompt
>if we use the C shell. But if we use the Bourne or Korn shell we get
>blown off the system and have to login again. I suspect that the 
>Korn or Bourne shells are not catching a signal;

No, the real problem is a bug in X Windows. xinit will put its stdout
and stderr in non-blocking mode (so that error messages from the X
server don't block). That's fine, but when you exit, it doesn't return
them to normal mode. When ksh or the Bourne Shell try to read from
their stdin, the read returns right away with an error status. Since
the shell can't read any more commands from its stdin, it dies.

The C shell was apparently fixed to handle this but the real fix doesn't
belong in the shell; it should be in X.

In the meantime, Dave Korn has fixed ksh and it now works fine.
If you don't have source for ksh, try running csh from ksh before
you run xinit. I remember that worked for me.
    
    Eduardo Krell                   AT&T Bell Laboratories, Murray Hill, NJ

    UUCP: {ihnp4,ucbvax}!ulysses!ekrell		ARPA: ekrell@ulysses.att.com

------- End of Forwarded Message

Return-Path: xpert-request@athena.mit.edu
Received: from ATHENA (ATHENA.MIT.EDU) by expo.lcs.mit.edu; Sun, 10 Apr 88 20:39:13 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA02542; Sun, 10 Apr 88 19:26:35 EST
Received: by ucbvax.Berkeley.EDU (5.59/1.28)
	id AA15315; Sun, 10 Apr 88 16:03:08 PDT
Received: from USENET by ucbvax.Berkeley.EDU with netnews
	for xpert@athena.mit.edu (xpert@athena.mit.edu)
	(contact usenet@ucbvax.Berkeley.EDU if you have questions)
Date: 10 Apr 88 20:31:24 GMT
From: gorodish!guy@sun.com  (Guy Harris)
Subject: Re: X11 & SHELL PROBLEM
Message-Id: <48982@sun.uucp>
References: <8804051303.AA03580@ATHENA.MIT.EDU>, <1025@daisy.UUCP>
Sender: xpert-request@athena.mit.edu
To: xpert@athena.mit.edu

> We have the exact same problem on our sun 386's (RoadRunners). In our case
> its caused by the server closing stdin (or so we suspect) on exit, causing
> the shell to get ^D's (EOF) and forcing the logout. Try set'ing ignoreeof
> to see if that is the case with your users.

Nope.

	1) If the server closes its standard input on exit, it has no effect
	   whatsoever on the server's parent, i.e. the shell.

	2) Even if the C shell's standard input *were* closed by this, this
	   would cause it to get an infinite sequence of EOFs and would
	   (obviously) completely prevent it from reading its standard input.
	   Setting "ignoreeof" wouldn't help.

	3) The scenario described by Eduardo Krell is correct (I know, because
	   I'm the one who discovered it).  The Xsun server puts its standard
	   output into no-delay mode, so that it won't hang trying to print a
	   message on the console (especially nasty if the console is an
	   "xterm" console window, where in order to display the message Xsun
	   has to paint some bits on the screen...).  This also affects the
	   standard input (no matter what version of UNIX you're using;
	   4BSD-style no-delay mode affects every descriptor that refers to
	   "/dev/console", but even S5-style no-delay mode affects all
	   descriptors "dup"ed from the one changed or from which that one was
	   "dup"ed, so it hits the standard input and error as well).

	   Unfortunately, it doesn't take it *out of* no-delay mode when it
	   exits.  The shell then tries to read from the no-delay descriptor
	   and gets an error (or EOF indication, with S5-style no-delay mode).
	   The C shell silently corrects for the former.  The Bourne and Korn
	   shells just give up and exit.

The C shell's silence is unfortunate; it means that the fact that Xsun was
broken wasn't discovered until people not using the C shell tried to run X11.

I fixed this on my machine by putting a call to "on_exit" in
"server/ddx/sun/sunInit.c" that tells it to call a routine just before exiting;
that routine will put the file descriptor back into normal mode.

------- sunInit.c -------
*** /tmp/da9065	Sun Apr 10 13:26:16 1988
--- sunInit.c	Mon Mar  7 22:37:31 1988
***************
*** 70,75 ****
--- 70,77 ----
  int sunSigIO = 0;	 /* For use with SetInputCheck */
  static int autoRepeatHandlersInstalled;	/* FALSE each time InitOutput called */
  
+ static int NonBlockConsoleOff();
+ 
  	/* What should this *really* be? */
  #define MOTION_BUFFER_SIZE 0
  
***************
*** 165,170 ****
--- 167,173 ----
       *	excess of error messages to hang the server in
       *	deadlock.  So.......
       */
+     on_exit(NonBlockConsoleOff, (char *)0);
      if (nonBlockConsole && (fcntl(2, F_SETFL, O_NDELAY) < 0)) {
  	perror("fcntl");
  	ErrorF("InitOutput: can't put stderr in non-block mode\n");
***************
*** 198,203 ****
--- 201,232 ----
  
      sunInitCursor();
      signal(SIGWINCH, SIG_IGN);
+ }
+ 
+ /*-
+  *-----------------------------------------------------------------------
+  * NonBlockConsoleOff --
+  *	Turn non-blocking mode on the console off, so you don't get logged
+  *	out when Xsun exits.
+  *
+  * Results:
+  *	None.
+  *
+  * Side Effects:
+  *	None.
+  *
+  *-----------------------------------------------------------------------
+  */
+ /*ARGSUSED*/
+ static
+ NonBlockConsoleOff(arg)
+     char	*arg;
+ {
+     register int i;
+ 
+     i = fcntl(2, F_SETFL, O_NDELAY);
+     if (i >= 0)
+ 	(void) fcntl(2, F_SETFL, i & O_NDELAY);
  }
  
  /*-

(Message inbox:15)
::::::::  Message:  inbox/15  ::::::::

Return-Path: xpert-request@athena.mit.edu
Received: from ATHENA (ATHENA.MIT.EDU) by expo.lcs.mit.edu; Mon, 11 Apr 88 14:23:14 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA18572; Mon, 11 Apr 88 13:04:11 EST
Received: by ucbvax.Berkeley.EDU (5.59/1.28)
	id AA28309; Mon, 11 Apr 88 09:43:58 PDT
Received: from USENET by ucbvax.Berkeley.EDU with netnews
	for xpert@athena.mit.edu (xpert@athena.mit.edu)
	(contact usenet@ucbvax.Berkeley.EDU if you have questions)
Date: 11 Apr 88 16:41:08 GMT
From: nutmeg.Berkeley.EDU!deboor@ucbvax.berkeley.edu  (Adam R de Boor)
Organization: University of California, Berkeley
Subject: Re: X11 & SHELL PROBLEM
Message-Id: <23577@ucbvax.BERKELEY.EDU>
References: <8804051303.AA03580@ATHENA.MIT.EDU>, <1025@daisy.UUCP>, <48982@sun.uucp>
Sender: xpert-request@athena.mit.edu
To: xpert@athena.mit.edu

Shouldn't the function be:

static
NonBlockConsoleOff(arg)
    char      *arg;
{
    register int i;

    i = fcntl(2, F_SETFL, O_NDELAY);
    if (i >= 0)
      (void) fcntl(2, F_SETFL, i & ~O_NDELAY);
}

to turn the non-blocking mode on? The way you've written it, it turns off
everything but non-blocking...

a

Return-Path: xpert-request@athena.mit.edu
Received: from ATHENA (ATHENA.MIT.EDU) by expo.lcs.mit.edu; Tue, 12 Apr 88 04:31:11 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA03134; Tue, 12 Apr 88 03:17:27 EST
Received: by ucbvax.Berkeley.EDU (5.59/1.28)
	id AA12264; Mon, 11 Apr 88 22:01:56 PDT
Received: from USENET by ucbvax.Berkeley.EDU with netnews
	for xpert@athena.mit.edu (xpert@athena.mit.edu)
	(contact usenet@ucbvax.Berkeley.EDU if you have questions)
Date: 11 Apr 88 20:35:12 GMT
From: gorodish!guy@sun.com  (Guy Harris)
Subject: Re: X11 & SHELL PROBLEM
Message-Id: <49098@sun.uucp>
References: <1025@daisy.UUCP>, <48982@sun.uucp>, <23577@ucbvax.BERKELEY.EDU>
Sender: xpert-request@athena.mit.edu
To: xpert@athena.mit.edu

> Shouldn't the function be:
> 
> static
> NonBlockConsoleOff(arg)
>     char      *arg;
> {
>     register int i;
> 
>     i = fcntl(2, F_SETFL, O_NDELAY);
>     if (i >= 0)
>       (void) fcntl(2, F_SETFL, i & ~O_NDELAY);
> }

Oops.  No, it should really be

	i = fcntl(2, F_GETFL, 0);
	if (i >= 0)
	    (void) fcntl(2, F_SETFL, i & ~O_NDELAY);

because the first call should *fetch* the flags, not *set* them.  (The reason
it worked here is that the first "fcntl" returned a value of 0, because it
succeeded; thus, the second "fcntl" passed a value of 0, turning off all the
changeable flags and leaving the rest (O_RDONLY/O_WRONLY|O_RDWR, etc.) alone.
This turned off non-blocking mode.
