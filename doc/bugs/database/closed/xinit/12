Return-Path: lori%hpcvxlc@hplabs.hp.com
Received: by expo.lcs.mit.edu; Thu, 9 Jun 88 12:29:31 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA29143; Thu, 9 Jun 88 12:27:42 EDT
Received: from hp-pcd.HP.COM (hp-pcd) by hplabs.HP.COM with SMTP ; Thu, 9 Jun 88 08:27:30 PST
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA07456; Thu, 9 Jun 88 09:26:43 PDT
Received: from hpcvxlc by hpcvxlc.HP.COM; Thu, 9 Jun 88 09:28:46 pdt
Message-Id: <8806091628.AA07417@hpcvxlc.HP.COM>
To: xbugs@athena.mit.edu
Subject: xinit unix domain
X-Mailer: mh6.5
Date: Thu, 09 Jun 88 09:28:41 PDT
From: Lori Cook <lori%hpcvxlc@hplabs.hp.com>

### bug number:   580
### area:         xinit
### severity:     low
### comments:     

VERSION:
	X11 release 2
SYNOPSIS:
	hpux has difficulty with unix domain sockets.
	xinit does not look for the user's DISPLAY variable.
DESCRIPTION:
	This is to fix a bug related only to unix domain sockets
	on HP machines. The code is ifdef with 'UNIXCONN' and 
	'hpux'. The problem arises when /tmp is mounted NFS.
	The plan of attack is to determine if unix domain sockets
	can be used. If they can, use it, otherwise use the
	hostname.

	The second problem is generic. If the user has supplied
	a DISPLAY environment variable before executing 'xinit',
	'xinit' ignores it. Also if a display was provided for the
	server (i.e. '-- :1'), 'xinit' still used :0 for the
	default xterm client.
REPEAT-BY:
	<What you did to get the error>
FIX:
	<Preferred, but not necessary>
*** clients/xinit/xinit.c.old	Mon Jun  6 15:32:09 1988
--- clients/xinit/xinit.c	Tue Jun  7 08:47:39 1988
***************
*** 25,30
  #endif /* hpux */
  #endif /* SYSV */
  
  #define	TRUE		1
  #define	FALSE		0
  #define	OK_EXIT		0

--- 25,41 -----
  #endif /* hpux */
  #endif /* SYSV */
  
+ #ifdef UNIXCONN
+ #ifdef hpux
+ #include <sys/types.h>
+ #include <sys/socket.h>
+ #include <sys/un.h>
+ 
+ #define SOCKET_DIR "/tmp/.X"
+ 
+ #endif
+ #endif
+ 
  #define	TRUE		1
  #define	FALSE		0
  #define	OK_EXIT		0
***************
*** 30,36
  #define	OK_EXIT		0
  #define	ERR_EXIT	1
  #define DEFAULT_SERVER "X"
! #define DEFAULT_DISPLAY ":0"
  char hostname[100] = "unix";
  char client_display[100];
  char *default_client[] = {"xterm", "=+1+1", "-n", "login", "-display", NULL};

--- 41,47 -----
  #define	OK_EXIT		0
  #define	ERR_EXIT	1
  #define DEFAULT_SERVER "X"
! 
  char hostname[100] = "unix";
  char client_display[100];
  char default_dpy[25] = ":0";
***************
*** 33,39
  #define DEFAULT_DISPLAY ":0"
  char hostname[100] = "unix";
  char client_display[100];
! char *default_client[] = {"xterm", "=+1+1", "-n", "login", "-display", NULL};
  char *server[100];
  char *client[100];
  char *displayNum;

--- 44,51 -----
  
  char hostname[100] = "unix";
  char client_display[100];
! char default_dpy[25] = ":0";
! char *default_client[] = {"xterm", "=+1+1", "-n", "login", NULL};
  char *server[100];
  char *client[100];
  char *displayNum = default_dpy;
***************
*** 36,42
  char *default_client[] = {"xterm", "=+1+1", "-n", "login", "-display", NULL};
  char *server[100];
  char *client[100];
! char *displayNum;
  char *program;
  Display *xd;			/* server connection */
  #ifndef SYSV

--- 48,55 -----
  char *default_client[] = {"xterm", "=+1+1", "-n", "login", NULL};
  char *server[100];
  char *client[100];
! char *displayNum = default_dpy;
! char *disp_env;
  char *program;
  Display *xd;			/* server connection */
  #ifndef SYSV
***************
*** 45,50
  int serverpid = -1;
  int clientpid = -1;
  extern int	errno;
  
  sigCatch(sig)
  	int	sig;

--- 58,65 -----
  int serverpid = -1;
  int clientpid = -1;
  extern int	errno;
+ extern char	*getenv();
+ extern char	*strchr();
  
  sigCatch(sig)
  	int	sig;
***************
*** 71,76
  	register char **sptr = server;
  	register char **cptr = client;
  	register char **ptr;
  	int pid, i;
  
  	program = *argv++;

--- 86,92 -----
  	register char **sptr = server;
  	register char **cptr = client;
  	register char **ptr;
+ 	char *tmp;
  	int pid, i;
  
  	program = *argv++;
***************
*** 76,81
  	program = *argv++;
  	argc--;
  
  #ifndef UNIXCONN
  #ifdef hpux
  	/* Why not use gethostname()?  Well, at least on my system, I've had to

--- 92,123 -----
  	program = *argv++;
  	argc--;
  
+ 	disp_env = getenv("DISPLAY");
+ 	if (disp_env) {
+ 	   strcpy(hostname, disp_env);
+ 	   tmp = strchr(hostname, ':');
+ 	   if (tmp) {
+ 		strcpy(default_dpy, tmp);
+ 		*tmp = '\0';
+ 		if (tmp = (strchr(default_dpy, '.')))
+ 			*tmp = '\0';
+ 	   }
+ 	}
+ #ifdef UNIXCONN
+ #ifdef hpux
+ 	/* Why not use gethostname()?  Well, at least on my system, I've had to
+ 	 * make an ugly kernel patch to get a name longer than 8 characters, and
+ 	 * uname() lets me access to the whole string (it smashes release, you
+ 	 * see), whereas gethostname() kindly truncates it for me.
+ 	 */
+ 	if (!disp_env && CheckForDomainSockets() == -1) {
+ 	   struct utsname name;
+ 
+ 	   uname(&name);
+ 	   strcpy(hostname, name.nodename);
+ 	}
+ #endif
+ #endif
  #ifndef UNIXCONN
  #ifdef hpux
  	/* Why not use gethostname()?  Well, at least on my system, I've had to
***************
*** 83,90
  	 * uname() lets me access to the whole string (it smashes release, you
  	 * see), whereas gethostname() kindly truncates it for me.
  	 */
! 	{
! 	struct utsname name;
  
  	uname(&name);
  	strcpy(hostname, name.nodename);

--- 125,132 -----
  	 * uname() lets me access to the whole string (it smashes release, you
  	 * see), whereas gethostname() kindly truncates it for me.
  	 */
! 	if (!disp_env) {
! 	   struct utsname name;
  
  	   uname(&name);
  	   strcpy(hostname, name.nodename);
***************
*** 86,93
  	{
  	struct utsname name;
  
! 	uname(&name);
! 	strcpy(hostname, name.nodename);
  	}
  #else
  	gethostname(hostname, sizeof(hostname));

--- 128,135 -----
  	if (!disp_env) {
  	   struct utsname name;
  
! 	   uname(&name);
! 	   strcpy(hostname, name.nodename);
  	}
  #else
  	if (!disp_env)
***************
*** 90,96
  	strcpy(hostname, name.nodename);
  	}
  #else
! 	gethostname(hostname, sizeof(hostname));
  #endif
  #endif /* UNIXCONN */
  	/*

--- 132,139 -----
  	   strcpy(hostname, name.nodename);
  	}
  #else
! 	if (!disp_env)
! 	   gethostname(hostname, sizeof(hostname));
  #endif
  #endif
  	/*
***************
*** 92,98
  #else
  	gethostname(hostname, sizeof(hostname));
  #endif
! #endif /* UNIXCONN */
  	/*
  	 * copy the client args.
  	 */

--- 135,141 -----
  	if (!disp_env)
  	   gethostname(hostname, sizeof(hostname));
  #endif
! #endif
  	/*
  	 * copy the client args.
  	 */
***************
*** 99,107
  	if (argc == 0 || (**argv != '/' && **argv != '.' && !isalpha(**argv))) {
  		for (ptr = default_client; *ptr; )
  			*cptr++ = *ptr++;
! 		strcpy(client_display, hostname);
! 		strcat(client_display, DEFAULT_DISPLAY);
! 		*cptr++ = client_display;
  #ifdef sun
  		/* 
  		 * If running on a sun, and if WINDOW_PARENT isn't defined, 

--- 142,148 -----
  	if (argc == 0 || (**argv != '/' && **argv != '.' && !isalpha(**argv))) {
  		for (ptr = default_client; *ptr; )
  			*cptr++ = *ptr++;
! 
  #ifdef sun
  		/* 
  		 * If running on a sun, and if WINDOW_PARENT isn't defined, 
***************
*** 134,140
  	if (argc > 0 && (argv[0][0] == ':' && isdigit(argv[0][1])))
  		displayNum = *argv;
  	else
! 		displayNum = *sptr++ = DEFAULT_DISPLAY;
  	while (--argc >= 0)
  		*sptr++ = *argv++;
  	*sptr = NULL;

--- 175,181 -----
  	if (argc > 0 && (argv[0][0] == ':' && isdigit(argv[0][1])))
  		displayNum = *argv;
  	else
! 		*sptr++ = default_dpy;
  	while (--argc >= 0)
  		*sptr++ = *argv++;
  	*sptr = NULL;
***************
*** 139,144
  		*sptr++ = *argv++;
  	*sptr = NULL;
  
  	/*
  	 * Start the server and client.
  	 */

--- 180,199 -----
  		*sptr++ = *argv++;
  	*sptr = NULL;
  
+ 	if (!disp_env) {
+ 	   char display[100];
+ 
+ 	   strcpy(display, "DISPLAY=");
+ 	   strcat(display, hostname);
+ 	   strcat(display, displayNum);
+ 	   strcat(display, ".0");
+ 	   if (putenv(display)) {
+ 		fprintf(stderr, "unable to set DISPLAY variable to %s\n",
+ 				display);
+ 		exit(1);
+ 	   }
+ 	}
+ 
  	/*
  	 * Start the server and client.
  	 */
***************
*** 365,367
  	if (processTimeout(serverpid, 3, "server to die"))
  		Fatal("Can't kill server\n");
  }

--- 420,474 -----
  	if (processTimeout(serverpid, 3, "server to die"))
  		Fatal("Can't kill server\n");
  }
+ 
+ #ifdef UNIXCONN
+ #ifdef hpux
+ /************************************************************
+  *
+  * CheckForDomainSockets
+  *
+  *   This routine checks to see if unix domain sockets are 
+  * implemented on this system.  If so, the default DISPLAY 
+  * environment variable should be set to unix:0.0
+  *
+  * RETURNED VALUE:    0 if the routine verified that domain sockets 
+  *                      are supported.
+  *                   -1 if the attempt to create a domain socket failed.
+  ************************************************************/
+ 
+ int
+ CheckForDomainSockets()
+ {
+ 	int	sock;
+ 	struct	sockaddr_un server;
+ 	int     status;
+ 	char    hostname[256];
+ 
+ 	sock = socket( AF_UNIX, SOCK_STREAM, 0);
+ 	if ( sock < 0) {
+ 	    return( -1 );
+ 	}
+ 	/*
+ 	 * set up the structure for specifying a domain
+ 	 * socket.  The path is based upon the SOCKET_DIR
+ 	 * plus the hostname.
+ 	 */
+ 	bzero( &server, sizeof(server));
+ 	server.sun_family = AF_UNIX;
+ 	strcpy( server.sun_path, SOCKET_DIR);
+ 	gethostname( hostname, 256 );
+ 	strncat( server.sun_path, hostname, sizeof( server.sun_path) );
+ 	unlink( server.sun_path );
+ 
+ 	/*
+ 	 * attempt to create the domain socket.  This will
+ 	 * fail, most likely with an EINVAL error, if
+ 	 * domain sockets are not supported on this system.
+ 	 */
+ 	status = bind( sock, &server, sizeof( server ));
+ 	close( sock );
+ 	unlink( server.sun_path);
+ 	return( status );
+ }
+ #endif
+ #endif

