Return-Path: capmkt!sybase!webster!jef@cogsci.berkeley.edu 
Received: from cogsci.berkeley.edu by EXPO.LCS.MIT.EDU; Fri, 4 Mar 88 22:56:18 EST
Received: by cogsci.berkeley.edu (5.58/1.26)
	id AA26739; Fri, 4 Mar 88 19:56:48 PST
Received: by koala (3.2/SMI-3.2/CMT-1.2main)
	id AA12317; Fri, 4 Mar 88 19:41:35 PST
Received: from webster.sybase.uucp by sybase.uucp (3.2/SMI-2.0)
	id AA28260; Fri, 4 Mar 88 19:39:05 PST
Received: by webster.sybase.uucp (3.2/SMI-3.2)
	id AA00479; Fri, 4 Mar 88 19:40:37 PST
Date: Fri, 4 Mar 88 19:40:37 PST
From: capmkt!sybase!webster!jef@cogsci.berkeley.edu (Jef Poskanzer)
Message-Id: <8803050340.AA00479@webster.sybase.uucp>
To: capmkt!cogsci!expo.lcs.mit.edu!xbugs
Subject: X.V11R2 bug report
Cc: webster!barry, webster!carl

### bug number:   33
### area:         
### severity:     
### assigned to:  
### status:       closed

VERSION:
	X11 release 2

CLIENT MACHINE:
	Sun 3/180

CLIENT OPERATING SYSTEM:
	compiled under SunOS 3.2, running under SunOS 3.4

DISPLAY:
	CG2

SYNOPSIS:
	xinit's old security hole has re-appeared due to Mystery Code.

DESCRIPTION:

	xinit has to be installed setuid to root so that it can send
	signals to the server (which is running setuid to root because
	it has to open up the frame buffer).  In early versions of xinit,
	the user's initialization script was also getting run as root,
	which was Not Good.  So someone added a setuid(getuid()) to the
	user fork, and things were secure again.

	But in this release, we have the following code:

#ifdef SYSV
		setuid(getuid());
#else
		setreuid(-1, -1);
#endif /* SYSV */

	The SYSV part looks right, but the else?!?  Quoting from the
	manual entry for setreuid:

     setreuid is used to set the real and effective user  IDs  of
     the calling process.  If ruid is -1, the real user ID is not
     changed; if euid  is  -1,  the  effective  user  ID  is  not
     changed.

	According to that, a setreuid(-1, -1) does no thing, and so the
	user's initialization script gets run as root again!  I tried
	it out (see below), and this is indeed the case.  Not Good.

REPEAT-BY:
	Assuming you have your system set up with xinit setuid to root,
	make a file 'foo' containing
	    #!/bin/sh
	    echo bar > bar
	Make foo executable.  Then do 'xinit foo --'.  Check the owner
	of bar, it will be root.

FIX:
	Get rid of the #ifdef and setreuid stuff, and just leave the
	setuid(getuid()).  It works fine under BSD.  And while you're
	at it, add another setuid(getuid()) to the server, someplace
	following all initialization.  That way xinit does not have to
	be setuid to root in the first place.  In my server I added
	the setuid(getuid()) to dix/main.c, right before the call to
	Dispatch(), but perhaps you can think of a more appropriate place.

	And send out an announcement about this to xpert, soon!
