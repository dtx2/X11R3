Return-Path: jim
Received: by expo.lcs.mit.edu; Fri, 29 Apr 88 14:20:41 EDT
From: jim@expo.lcs.mit.edu (Jim Fulton)
Message-Id: <8804291820.AA03355@EXPO.LCS.MIT.EDU>
To: xbugs
Subject: lib/oldX/XDraw.c byte-order bug
Date: Fri, 29 Apr 88 14:20:37 EDT

### bug number:   440
### area:         oldX
### severity:     low
### comments:     


VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	Sun 3/280 running SunOS 3.4 (any big-endian machine)

DISPLAY:
	hp topcat running on hp 9000/350 running HP-UX 6.01 (doesn't matter)

AREA:
	oldX

SYNOPSIS:
	The XDraw emulation routine has byte-order dependancies.

DESCRIPTION:
	The routine in lib/oldX that emulates the X10 XDraw routine has
	byte-order dependancies in the calculation of splines for edges that
	have the VertexCurved flag set.

REPEAT-BY:
	Run x10tox11 on a big-endian machine;
	run xdemo draw and use the left button to draw a curved shape;
	watch your server draw very strange lines

FILES:
	lib/oldX/XDraw.c

FIX:
*** /fs/X.V11R2/lib/oldX/XDraw.c	Thu Feb 25 23:24:34 1988
--- ./lib/oldX/XDraw.c	Fri Apr 29 14:12:18 1988
***************
*** 1,4 ****
! /* $Header: XDraw.c,v 1.3 87/12/09 19:08:55 rws Exp $ */
  #include "copyright.h"
  
  /* Copyright    Massachusetts Institute of Technology    1987	*/
--- 1,4 ----
! /* $Header: XDraw.c,v 1.5 88/04/29 14:12:12 jim Exp $ */
  #include "copyright.h"
  
  /* Copyright    Massachusetts Institute of Technology    1987	*/
***************
*** 182,187 ****
--- 182,188 ----
    int	flag;	    	    /* flag word of current end-point in p.list  */
    int successor_x = 0;	    /* X coordinate of curve's successor point   */
    int successor_y = 0;	    /* Y coordinate of curve's successor point   */
+   int little_endian;	    /* stupid bntable is little-endian */
    WORD increment;	    /* bntable-ptr-increment value       */
    WORD diffx, diffy;	    /* absolute values of x, y end-point diffs   */
    WORD lmajoraxis;	    /* "length" of seg projected onto major axis */
***************
*** 202,207 ****
--- 203,218 ----
    int       count;
    int	    curve_flag;	    /* 0 = no curves in path; 1 = curves in path */
    
+   /*
+    * The following is necessary because of the pseudo-floating point
+    * calculations done down below.
+    */
+   i = 1;
+   if (*(char *) &i)
+     little_endian = 1;
+   else
+     little_endian = 0;
+ 
    {
      register Vertex *poldpath;/* pointer for traversing original path list */
      register Vertex *p_coord_path; /* ptr to path list with coordinates    */
***************
*** 457,464 ****
  		    yye.lword = yye.lword << 1;	/* ...bn accts for it*/
  		    xxe.lword += 0x8000; /* round off the accum value */
  		    yye.lword += 0x8000;
! 		    pnewpath->x = xxe.sword.high;/* the X coordinate  */
! 		    pnewpath->y = yye.sword.high;/* the Y coordinate  */
  		    (pnewpath++)->flags = 0;	/* the flag word     */
      	    	    newpathcount++;/* increment segment end-point countr*/
  		  }	    	   /* end sub-segment end-point compute loop*/
--- 468,480 ----
  		    yye.lword = yye.lword << 1;	/* ...bn accts for it*/
  		    xxe.lword += 0x8000; /* round off the accum value */
  		    yye.lword += 0x8000;
! 		    if (little_endian) {
! 			pnewpath->x = xxe.sword.high;/* the X coordinate  */
! 			pnewpath->y = yye.sword.high;/* the Y coordinate  */
! 		    } else {
! 			pnewpath->x = xxe.sword.low;/* the X coordinate  */
! 			pnewpath->y = yye.sword.low;/* the Y coordinate  */
! 		    }
  		    (pnewpath++)->flags = 0;	/* the flag word     */
      	    	    newpathcount++;/* increment segment end-point countr*/
  		  }	    	   /* end sub-segment end-point compute loop*/


