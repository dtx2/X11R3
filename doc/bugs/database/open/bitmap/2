Return-Path: lori%hpcvxlc@sde.hp.com
Received: by expo.lcs.mit.edu; Thu, 20 Oct 88 19:10:14 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA09948; Thu, 20 Oct 88 19:10:21 EDT
Received: from hp-pcd.HP.COM by hp-sde ; Thu, 20 Oct 88 16:11:54 pdt
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA10318; Thu, 20 Oct 88 16:10:45 PDT
Received: from hpcvxlc by hpcvxlc.HP.COM; Thu, 20 Oct 88 16:12:10 pdt
Message-Id: <8810202312.AA17895@hpcvxlc.HP.COM>
To: xbugs@athena.mit.edu
Subject: bitmap grid bug
X-Mailer: mh6.5
Date: Thu, 20 Oct 88 16:12:00 PDT
From: Lori Cook <lori%hpcvxlc@sde.hp.com>

### bug number:   1094
### area:         bitmap
### severity:     low
### comments:     

VERSION:
	X11 release 3
SYNOPSIS:
	When a window is popped up over the grid where it has been
     set, when the window goes away the grid lines may be broken
DESCRIPTION:
	The routine RepaintGridLinesPartially is passed two x,y pairs
	which represent the beginning and ending boxes. When a window
	is popped up over the grid, not all of a beginning and/or ending
	box will be obscured. Only some of the line may need to be
	redrawn. RepaintGridLinesPartially will redraw all of the line.
	If the box is in background color, the part of the line that
	doen't need to be redrawn is overwritten and blanked out. Hence
	the broken lines.
REPEAT-BY:
	bring up bitmap, and do a 'Set All'.
	pop a uwm menu up over the grid. Make sure the top/bottom or side
	of the menu will show up in the middle of a grid box.
SUGGESTED FIX:
	The fix below changes RepaintGridLinesPartially to work on a pixel
	begin and end value rather than a box number. It still is occas-
	sionally off by one pixel so that the redrawn lines appears to have
	a small	break or blob at its end(s).
*** bitmap.c.sav	Sat Oct 15 01:05:45 1988
--- bitmap.c	Thu Oct 20 14:57:25 1988
***************
*** 787,794
  #define this_event ((XExposeEvent *)event)
        int x1 = this_event->x;
        int y1 = this_event->y;
!       int x2 = x1 + this_event->width;
!       int y2 = y1 + this_event->height;
  #undef this_event
        x1 /= square_size;
        x2 /= square_size;
--- 784,791 -----
  #define this_event ((XExposeEvent *)event)
        int x1 = this_event->x;
        int y1 = this_event->y;
!       int x2 = x1 + this_event->width - 1;
!       int y2 = y1 + this_event->height - 1;
  #undef this_event
        if ((x2 / square_size) >= image.width)
          x2 = image.width * square_size;  /* sanity check */
***************
*** 790,795
        int x2 = x1 + this_event->width;
        int y2 = y1 + this_event->height;
  #undef this_event
        x1 /= square_size;
        x2 /= square_size;
        y1 /= square_size;

--- 787,797 -----
        int x2 = x1 + this_event->width - 1;
        int y2 = y1 + this_event->height - 1;
  #undef this_event
+       if ((x2 / square_size) >= image.width)
+         x2 = image.width * square_size;  /* sanity check */
+       if ((y2 / square_size) >= image.height)
+         y2 = image.width * square_size;  /* sanity check */
+       RepaintGridLinesPartially(x1,y1,x2,y2,e_AgainstBackground,TRUE);
        x1 /= square_size;
        x2 /= square_size;
        y1 /= square_size;
***************
*** 798,804
          x2 = image.width - 1;  /* sanity check */
        if (y2 >= image.height)
          y2 = image.height - 1;  /* sanity check */
-       RepaintGridLinesPartially(x1,y1,x2+1,y2+1,e_AgainstBackground,TRUE);
        RefillGridPartially (x1,y1,x2,y2,FALSE);
        if (x1_square_exed_through != OUT_OF_RANGE)
          ExThroughRectangle (

--- 800,805 -----
          x2 = image.width - 1;  /* sanity check */
        if (y2 >= image.height)
          y2 = image.height - 1;  /* sanity check */
        RefillGridPartially (x1,y1,x2,y2,FALSE);
        if (x1_square_exed_through != OUT_OF_RANGE)
          ExThroughRectangle (
***************
*** 997,1003
  RepaintGridLines(how)
    enum RepaintGridType how;
    {
!   RepaintGridLinesPartially (0, 0, image.width, image.height, how, TRUE);
    }
  
  RepaintGridLinesPartially (x1, y1, x2, y2, how, include_boundaries)

--- 998,1005 -----
  RepaintGridLines(how)
    enum RepaintGridType how;
    {
!   RepaintGridLinesPartially (0, 0, image.width * square_size,
! 		image.height * square_size, how, TRUE);
    }
  
  RepaintGridLinesPartially (x1, y1, x2, y2, how, include_boundaries)
***************
*** 1039,1045
      }
      
    /* draw vertical grid lines */
!   py1 = y1*square_size;
    py1 += (py1 & 1);  /* make sure pattern is aligned on even bit boundary */
    py2 = y2*square_size;
    if (!include_boundaries) {x1++;x2--;}

--- 1041,1047 -----
      }
      
    /* draw vertical grid lines */
!   py1 = y1;
    py1 += (py1 & 1);  /* make sure pattern is aligned on even bit boundary */
    py2 = y2;
    if (!include_boundaries) {x1 += square_size; x2 -= square_size;}
***************
*** 1041,1050
    /* draw vertical grid lines */
    py1 = y1*square_size;
    py1 += (py1 & 1);  /* make sure pattern is aligned on even bit boundary */
!   py2 = y2*square_size;
!   if (!include_boundaries) {x1++;x2--;}
!   px1 = x1*square_size;
!   for (i=x1;i<=x2; i++) {
       XDrawLine (d, grid_window, gc, px1, py1, px1, py2);
       px1 += square_size;
       }

--- 1043,1052 -----
    /* draw vertical grid lines */
    py1 = y1;
    py1 += (py1 & 1);  /* make sure pattern is aligned on even bit boundary */
!   py2 = y2;
!   if (!include_boundaries) {x1 += square_size; x2 -= square_size;}
!   for(px1 = (x1 / square_size + (x1 % square_size ? 1 : 0)) * square_size;
! 	px1 <= x2; px1 = px1 + square_size) {
       XDrawLine (d, grid_window, gc, px1, py1, px1, py2);
       }
    if (!include_boundaries) {x1 -= square_size; x2 += square_size;}
***************
*** 1046,1052
    px1 = x1*square_size;
    for (i=x1;i<=x2; i++) {
       XDrawLine (d, grid_window, gc, px1, py1, px1, py2);
-      px1 += square_size;
       }
    if (!include_boundaries) {x1--;x2++;}
  

--- 1048,1053 -----
    for(px1 = (x1 / square_size + (x1 % square_size ? 1 : 0)) * square_size;
  	px1 <= x2; px1 = px1 + square_size) {
       XDrawLine (d, grid_window, gc, px1, py1, px1, py2);
       }
    if (!include_boundaries) {x1 -= square_size; x2 += square_size;}
  
***************
*** 1048,1054
       XDrawLine (d, grid_window, gc, px1, py1, px1, py2);
       px1 += square_size;
       }
!   if (!include_boundaries) {x1--;x2++;}
  
    /* draw horizontal grid lines */
    px1 = x1*square_size;

--- 1049,1055 -----
  	px1 <= x2; px1 = px1 + square_size) {
       XDrawLine (d, grid_window, gc, px1, py1, px1, py2);
       }
!   if (!include_boundaries) {x1 -= square_size; x2 += square_size;}
  
    /* draw horizontal grid lines */
    px1 = x1;
***************
*** 1051,1057
    if (!include_boundaries) {x1--;x2++;}
  
    /* draw horizontal grid lines */
!   px1 = x1*square_size;
    px1 += (px1 & 1);  /* make sure pattern is aligned on even bit boundary */
    px2 = x2*square_size;
    if (!include_boundaries) {y1++;y2--;}

--- 1052,1058 -----
    if (!include_boundaries) {x1 -= square_size; x2 += square_size;}
  
    /* draw horizontal grid lines */
!   px1 = x1;
    px1 += (px1 & 1);  /* make sure pattern is aligned on even bit boundary */
    px2 = x2;
    if (!include_boundaries) {y1 += square_size; y2 -= square_size;}
***************
*** 1053,1062
    /* draw horizontal grid lines */
    px1 = x1*square_size;
    px1 += (px1 & 1);  /* make sure pattern is aligned on even bit boundary */
!   px2 = x2*square_size;
!   if (!include_boundaries) {y1++;y2--;}
!   py1 = y1*square_size;
!   for (i=y1;i<=y2;i++) {
       XDrawLine (d, grid_window, gc, px1, py1, px2, py1);
       py1 += square_size;
       }

--- 1054,1063 -----
    /* draw horizontal grid lines */
    px1 = x1;
    px1 += (px1 & 1);  /* make sure pattern is aligned on even bit boundary */
!   px2 = x2;
!   if (!include_boundaries) {y1 += square_size; y2 -= square_size;}
!   for(py1 = (y1 / square_size + (y1 % square_size ? 1 : 0)) * square_size;
! 	py1 <= y2; py1 = py1 + square_size) {
       XDrawLine (d, grid_window, gc, px1, py1, px2, py1);
       }
    }
***************
*** 1058,1064
    py1 = y1*square_size;
    for (i=y1;i<=y2;i++) {
       XDrawLine (d, grid_window, gc, px1, py1, px2, py1);
-      py1 += square_size;
       }
    }
  

--- 1059,1064 -----
    for(py1 = (y1 / square_size + (y1 % square_size ? 1 : 0)) * square_size;
  	py1 <= y2; py1 = py1 + square_size) {
       XDrawLine (d, grid_window, gc, px1, py1, px2, py1);
       }
    }
  
***************
*** 1400,1406
      GXcopy, AllPlanes);
    XFillRectangle (d, grid_window, gc, x1*square_size+1, y1*square_size+1, 
      (x2-x1+1)*square_size-1, (y2-y1+1)*square_size-1);
!   RepaintGridLinesPartially (x1, y1, x2+1, y2+1,
       b ? e_AgainstForeground : e_AgainstBackground, FALSE);
    if (x_hot_spot >= x1 && x_hot_spot <= x2
      && y_hot_spot >= y1 && y_hot_spot <= y2)

--- 1400,1407 -----
      GXcopy, AllPlanes);
    XFillRectangle (d, grid_window, gc, x1*square_size+1, y1*square_size+1, 
      (x2-x1+1)*square_size-1, (y2-y1+1)*square_size-1);
!   RepaintGridLinesPartially (x1 * square_size, y1 * square_size,
!      (x2+1) * square_size, (y2+1) * square_size,
       b ? e_AgainstForeground : e_AgainstBackground, FALSE);
    if (x_hot_spot >= x1 && x_hot_spot <= x2
      && y_hot_spot >= y1 && y_hot_spot <= y2)
***************
*** 1439,1445
    XSetState (d, gc, 1L, 0L, GXinvert, invertplane);
    XFillRectangle (d, grid_window, gc, x1*square_size+1,  y1*square_size+1,
      (x2-x1+1)*square_size-1,  (y2-y1+1)*square_size-1);
!   RepaintGridLinesPartially (x1, y1, x2+1, y2+1, e_Invert, FALSE);
    changed = TRUE;
    RepaintRaster();
    RepaintRasterInverted();

--- 1440,1447 -----
    XSetState (d, gc, 1L, 0L, GXinvert, invertplane);
    XFillRectangle (d, grid_window, gc, x1*square_size+1,  y1*square_size+1,
      (x2-x1+1)*square_size-1,  (y2-y1+1)*square_size-1);
!   RepaintGridLinesPartially (x1 * square_size, y1 * square_size,
! 	(x2+1) * square_size, (y2+1) * square_size, e_Invert, FALSE);
    changed = TRUE;
    RepaintRaster();
    RepaintRasterInverted();


