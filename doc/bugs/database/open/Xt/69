Return-Path: wtg@uc.msc.umn.edu
Received: by expo.lcs.mit.edu; Wed, 29 Jun 88 16:29:29 EDT
Received: by uc.msc.umn.edu (5.54/1.14)
	id AA03591; Wed, 29 Jun 88 15:27:29 CDT
Date: Wed, 29 Jun 88 15:27:29 CDT
From: wtg@uc.msc.umn.edu
Message-Id: <8806292027.AA03591@uc.msc.umn.edu>
Subject: Adding offsets to character pointers on Cray
To: xbugs@expo.lcs.mit.edu

### bug number:   661
### area:         Xaw
### severity:     low
### comments:     

VERSION:
	X11 release 2  Xt

CLIENT MACHINE:
	Cray-XMP and Cray2

CLIENT OPERATING SYSTEM:
	UNICOS 5.0

DISPLAY:
	sun3/50

SYNOPSIS:
	 Adding offsets to character  pointers

DESCRIPTION:
	 In a byte addressable machine, addresses can be added
or subtracted as integers.  This is not true of the Cray, which
is word addressable.  A character pointer is really the address
of the word, with the uppermost 3 bits indicating the byte within
the word.  When pointers are cast correctly, the Cray C compiler
will generate code to do the appropriate arithmetic.  Specifically,
a pointer or address must be cast to a character pointer, then
an integer value may be added or subtracted.

REPEAT-BY:
	run standard widget test program

FIX:

**************** Convert.c, Create.c, Resources.c ************************

diff -c5 Xt/Convert.c sunXt/Convert.c
*** Xt/Convert.c	Thu May 12 09:29:10 1988
--- sunXt/Convert.c	Fri May  6 10:42:34 1988
***************
*** 216,230 ****
  	    args[i].addr = convert_args[i].address_id;
  	    break;
  
  	case XtBaseOffset:
  	    args[i].addr =
- #ifdef CRAY
- 		(caddr_t) ((char *) widget + (int)convert_args[i].address_id);
- #else
  		(caddr_t) ((int) widget + (int) convert_args[i].address_id);
- #endif
  	    break;
  
  	case XtImmediate:
  	    args[i].addr = (caddr_t) &(convert_args[i].address_id);
  	    break;
--- 216,226 ----
***************
*** 243,257 ****
  		    "Cannot find resource name %s as argument to conversion",
  		    XrmQuarkToString((XrmQuark) convert_args[i].address_id));
  		XtWarning(message);
  		offset = 0;
  	    }
- #ifdef CRAY
- 	    args[i].addr = (caddr_t) ((char *) widget + offset);
- #else
  	    args[i].addr = (caddr_t) ((int) widget + offset);
- #endif
  	    break;
  	} /* switch */
      } /* for */
  } /* ComputeArgs */
  
--- 239,249 ----
diff -c5 Xt/Create.c sunXt/Create.c
*** Xt/Create.c	Fri May  6 14:38:36 1988
--- sunXt/Create.c	Fri May  6 10:42:35 1988
***************
*** 149,163 ****
  
      /* Compile any callback lists into internal form */
      for (offsetList = widget->core.widget_class->core_class.callback_private;
  	 offsetList != NULL;
  	 offsetList = offsetList->next) {
- #ifdef CRAY
-       pCallbacks = (XtCallbackList *) ((char *)widget - offsetList->offset - 1);
- #else
  	 pCallbacks = (XtCallbackList *) ((int)widget - offsetList->offset - 1);
- #endif
  	if (*pCallbacks != NULL) {
  #ifdef lint
  	/* ||| GROSS!!! do the right thing after .h split!!! */
  	extern CallbackList _CompileCallbackList();
  #endif
--- 149,159 ----
***************
diff -c5 Xt/Resources.c sunXt/Resources.c
*** Xt/Resources.c	Thu Jun  2 13:09:39 1988
--- sunXt/Resources.c	Fri May  6 10:42:36 1988
*** 253,267 ****
  #endif
  		for (j = 0, res = xrmres; j < num_resources; j++, res++) {
  		    if (argName == res->xrm_name) {
  			CopyFromArg(
  			    arg->value,
- #ifdef CRAY
			    /* base is already a (char *) */
- 			    base - res->xrm_offset - 1,
- #else
  			    (XtArgVal) base - res->xrm_offset - 1,
- #endif
  			    res->xrm_size);
  			found[j] = TRUE;
  			break;
  		    }
  		}
--- 215,225 ----
***************
*** 557,571 ****
  	for (xrmres = (XrmResourceList) resources, i = 0;
  	     i < num_resources;
  	     i++, xrmres++) {
  	    if (argName == xrmres->xrm_name) {
  		CopyToArg(
- #ifdef CRAY
		    /* base is already a (char *) */
- 		    base - xrmres->xrm_offset - 1,
- #else
  		    (XtArgVal) base - xrmres->xrm_offset - 1,
- #endif
  		    &arg->value,
  		    xrmres->xrm_size);
  		break;
  	    }
  	}
--- 515,525 ----
***************
*** 668,682 ****
  	for (xrmres = (XrmResourceList) resources, i = 0;
  	     i < num_resources;
  	     i++, xrmres++) {
  	    if (argName == xrmres->xrm_name) {
  		CopyFromArg(arg->value,
- #ifdef CRAY
			    /* base is already a (char *) */
- 			    base - xrmres->xrm_offset - 1,
- #else
  			    (XtArgVal) base - xrmres->xrm_offset - 1,
- #endif
  			    xrmres->xrm_size);
  		break;
  	    }
  	}
      }
--- 622,632 ----

Received: by E40-PO.MIT.EDU (5.45/4.7) id AA15828; Wed, 13 Jul 88 13:53:49 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA26607; Wed, 13 Jul 88 13:34:53 EDT
Received: by uc.msc.umn.edu (5.54/1.14)
	id AA05390; Wed, 13 Jul 88 11:08:56 CDT
Received: from jlf.cray.com by hall.cray.com
	id AA02466; 3.2/CRI-2.9; Wed, 13 Jul 88 11:13:27 CDT
Received: by jlf.cray.com
	id AA06768; 3.2/CRI-2.9; Wed, 13 Jul 88 11:14:16 CDT
Date: Wed, 13 Jul 88 11:14:16 CDT
From: jlf%jlf.CRAY.COM@uc.msc.umn.edu (John Freeman)
Message-Id: <8807131614.AA06768@jlf.cray.com>
To: swick@ATHENA.MIT.EDU

>From swick@athena.mit.edu Tue Jul 12 12:37:50 1988
To: wtg@uc.msc.umn.edu
Subject: re: Adding offsets to character pointers on Cray (XBUG 661)
In-Reply-To: Your message to xbugs of Wed, 29 Jun 88 15:27:29 CDT
		8806292027.AA03591@uc.msc.umn.edu
Date: Tue, 12 Jul 88 13:37:03 EDT
From: Ralph R. Swick <swick@athena.mit.edu>
Status: RO

> > [On UNICOS 5.0] A character pointer is really the address
> > of the word, with the uppermost 3 bits indicating the byte within
> > the word.

> Is the generic pointer, caddr_t, defined appropriately so that
> casting pointers to it generates the same arithmetic as casting
> to char*?  This seems like a more reasonable alternative to me.

Yes, <sys/types.h> defines caddr_t as a char *:
typedef char *          caddr_t;
 
> In any case, all your diffs imply that (only) widget structures
> are being allocated on non-aligned boundaries.  Why doesn't
> malloc return word-aligned widgets?

Malloc does return wordaligned memory.  It is the way the compiler
does arithmetic that causes my problem.  The code in question adds
a byte offset to a widget pointer to get to the address of a resource.
If the widget pointer is cast to an int and the offset is cast to an
int, the result is adding so many words, not bytes.  If the
widget pointer is cast to a caddr_t and the offset is an int, then
the result is adding the correct number of bytes.  Here is an example
from Convert.c:
#ifdef CRAY
            args[i].addr = (caddr_t) ((char *) widget + offset);
#else
            args[i].addr = (caddr_t) ((int) widget + offset);
#endif



I am using direct mail from CRI for the first time, could you let
me know if you have received this?  You should be able to mail to
me directly using jlf%hall.cray.com@uc.msc.umn.edu.  Thanks.
