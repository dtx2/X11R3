Return-Path: swick@athena.mit.edu
Received: from ATHENA (ATHENA.MIT.EDU) by EXPO.LCS.MIT.EDU; Mon, 28 Mar 88 10:55:13 EST
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA02028; Mon, 28 Mar 88 10:54:22 EST
Received: by LYRE.MIT.EDU (5.45/4.7) id AA16436; Mon, 28 Mar 88 10:54:19 EST
Message-Id: <8803281554.AA16436@LYRE.MIT.EDU>
To: xbugs@athena.mit.edu
Subject: XMenu; fix for un-selectable entries on multiple panes
Date: Mon, 28 Mar 88 10:54:15 EST
From: Ralph R. Swick <swick@athena.mit.edu>

### bug number:   233
### area:         contrib
### severity:     
### assigned to:  
### status:       open
### comments:     XMenu


------- Forwarded Message

From: <wdc@ATHENA.MIT.EDU>
Date: Mon, 28 Mar 88 00:37:09 EST
Message-Id: <8803280537.AA21217@LAKOTA.MIT.EDU>
To: x-conversion@ATHENA.MIT.EDU
Cc: treese@ATHENA.MIT.EDU, swick@ATHENA.MIT.EDU
Subject: A clearer fix for XMenu11 including diffs. (Long Message)

I now understand much more clearly what was going wrong with XMenu11.
It was not a race condition.

The problem was:  I create 3 menus.  These three menus enqueue all
their work onto the XMWinQue.

With XMWinQueFlush in XMenuActivate, the window creation for all three
menus is postponed until I activate one of them.  Since the XMWinQue
has no menu handle component, and since the panes and selections don't
either, all the selections and panes are XAssoc'ed to the first menu I
activated.

I guess users of XMenu in the past were supposed to know that you work
on one menu at a time, and XMenuRecompute in between.  Otherwise,
there'd be inactive selections, and un-findable panes.

- ----

The simplest fix is to add the XMWinQueFlush in XMenuRecompute.

This will make XMenu11 work consistently with the X10 behavior in this
area, if not necessarily what we would call correctly.

- ----

There are a whole bunch of nits that should be picked out of the code,
however:

1. The test for the recompute flag being zero (and returning
immediately if so) was deleted from the begining of XMenuRecompute.

2. The mapping of the selection sub-windows can be in either
XMenuRecompute, or in XMenuActivate, but need not be in both.  I
prefer to have it moved back to XMenuRecompute from XMenuActivate.

3. In XMWinQueFlush, the window attributes struct is malloc'ed and never
freed.  It should be on the stack.

- ----

There are some serious inconsistencies that might want to be worked
through:

1. At activate, recompute, and perhaps other times, the windows are
re-stacked, in case they were created in the wrong order.  In AddPane,
and XMWinQueFlush, considerable effort goes to make sure that windows
are created in exactly the right order.  This could be thought through
and done right once.

2. The XMWinQue SHOULD go away.  X11 is asynchronous enough, and the
queue can cause users problems if they create a couple menus at a time
and THEN call XMenuRecompute.  The problem is that doing this may well
interact with all the code that goes out of its way to do things in
the proper order.

- ----

I have made, and lightly tested, a version which puts a test of the
recompute flag back into XMenuRecompute, puts the attributes struct on
the stack, and moves the sub-window mapping and the XMWinQueFlush to
XMenuRecompute.  I discovered that the clever porting of XMenuActivate
requires a forced call to recompute if the menu gets moved into place.
I have made the section a little longer, but now checks to see if a
recompute is strictly necessary, and if so forces it by setting the
bit, and doing the call.

I may do more work on XMenu.  I've not had much chance to assure
myself that it is doing everything ELSE right.  At this point I am not
sure if it is worth all the un-crocking required to deal with the
redundant restacking code and the elimination of the XMWinQue.

If there is anyone else working on XMenu, I would like to talk to
them.

Diffs follow:  These are differences between what I have and the X11R2
XMenu.

- ----

diff ./Activate.c Activate.c~
163a164,169
>     menu->x_pos = orig_x;	/* Store X and Y coords of menu. */
>     menu->y_pos = orig_y;
>     
>     if (XMenuRecompute(display, menu) == XM_FAILURE) {
> 	return(XM_FAILURE);
>     }
165,175c171,179
<     if ((orig_x != menu->x_pos) && (orig_x != menu->x_pos))
<       {
< 	menu->x_pos = orig_x;	/* Store X and Y coords of menu. */
< 	menu->y_pos = orig_y;
< 	menu->recompute = 1;
< 	
< 	/* Move menu into place */
< 	if (XMenuRecompute(display, menu) == XM_FAILURE) {
< 	  return(XM_FAILURE);
< 	}
<       }
- ---
>     /*
>      * Flush the window creation queue.
>      * This batches all window creates since lazy evaluation
>      * is more efficient than individual evaluation.
>      * This routine also does an XFlush().
>      */
>     if (_XMWinQueFlush(display, menu, cur_p, cur_s) == _FAILURE) {
> 	return(XM_FAILURE);
>     }
184a189,199
> 
>     /*
>      * Make sure all selection windows are mapped.
>      */
>     for (
> 	p_ptr = menu->p_list->next;
> 	p_ptr != menu->p_list;
> 	p_ptr = p_ptr->next
>     ){
> 	XMapSubwindows(display, p_ptr->window);
>     }
diff ./Internal.c Internal.c~
191c191
<     XSetWindowAttributes attributes; 	/* Attributes to be set. */
- ---
>     XSetWindowAttributes *attributes; 	/* Attributes to be set. */
202,204c202,205
< 	attributes.border_pixel = menu->p_bdr_color;
< 	attributes.background_pixmap = menu->inact_pixmap;
< 	attributes.override_redirect = True;
- ---
> 	attributes = (XSetWindowAttributes *)malloc(sizeof(XSetWindowAttributes));
> 	attributes->border_pixel = menu->p_bdr_color;
> 	attributes->background_pixmap = menu->inact_pixmap;
> 	attributes->override_redirect = True;
228c229
< 					    &attributes);
- ---
> 					    attributes);
248c249
< 					    &attributes);
- ---
> 					    attributes);
283c284
< 				   &attributes);
- ---
> 				   attributes);
diff ./Recomp.c Recomp.c~
39,46d38
<      * If no recompute is necessary, return.
<      */
<     if (!menu->recompute) {
<         _XMErrorCode = XME_NO_ERROR;
<         return(XM_SUCCESS);
<     }
< 
<     /*
87,105d78
<     }
< 
<     /*
<      * Flush the window creation queue.
<      * This batches all window creates since lazy evaluation
<      * is more efficient than individual evaluation.
<      * This routine also does an XFlush().
<      */
<     if (_XMWinQueFlush(display, menu, 0, 0) == _FAILURE) return(XM_FAILURE);
< 
<     /*
<      * Make sure all selection windows are mapped.
<      */
<     for (
<         p_ptr = menu->p_list->next;
<         p_ptr != menu->p_list;
<         p_ptr = p_ptr->next
<     ){
<         XMapSubwindows(display, p_ptr->window);

Enjoy
  From the 'desk' of     _   /|
  Bill (the) CATTey...   \'o.O'
                         ~(___)~       THSHVPPPOOO!
                            U  	   	   ACH!

------- End of Forwarded Message


