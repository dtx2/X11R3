Return-Path: jensen@granite.dec.com
Received: by expo.lcs.mit.edu; Thu, 28 Apr 88 13:33:31 EDT
Received: from basalt.dec.com by granite.DEC.COM (5.54.3/4.7.34)
	id AA14196; Thu, 28 Apr 88 10:31:27 PDT
Received: by basalt.DEC.COM (5.54.3/4.7.34)
	id AA22332; Thu, 28 Apr 88 10:32:18 PDT
Date: Thu, 28 Apr 88 10:32:18 PDT
From: jensen@granite.dec.com
Message-Id: <8804281732.AA22332@basalt.DEC.COM>
To: xbugs@expo.lcs.mit.edu
Subject: stipples don't work with wide lines
Cc: jensen@granite.dec.com

### bug number:   463
### area:         server
### severity:     low
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	MicroVAX-II / 6Mb

CLIENT OPERATING SYSTEM:
	Ultrix 2.2 / diskless NFS client with local swapping (RD53)

DISPLAY:
	QDSS(8-plane)

SYNOPSIS:
	setting a stipple in the GC does not work with wide lines

DESCRIPTION:
	I have a program which creates a window, a GC, and then
	draws a line into the window.  In the GC I specify a
	tile and a wide line.  The problem is that the stipple
	appears to be applied inconsistently, and often incorrectly.
	Some stipple patterns *never* seem to work; others will
	change their visual appearance with successive expose/redraws.
	In yet other cases, the same stipple pattern will appear despite
	successive invocations of the program with radically different
	stipples.  The stipples were created using the bitmap
	editor.

REPEAT-BY:
	Following is a simple program, followed by 16x16 bitmaps
	to be used as stipples.  To run the program, type
	'draw5 <bitmap_file>'.  I am including 5 bitmap files, named
	s0-s4. 's3' seems particularly prone to not working.
	Often it is necessary to run draw5 multiple times simultaneously
	(with different bitmaps) for the problem to manifest itself:
	other times it will show up immediately.

--------------------------------- draw5.c ---------------------------------
#ifndef lint
static char rcsid[] = "$Header: draw5.c,v 1.2 88/04/28 10:13:01 jensen Exp $";
#endif

/******************************
 * Paul Jensen / Workstation Systems Engineering
 * Digital Equipment Corporation, M/S UCO-2 (Palo Alto, CA)
 *
 * draw5.c: test program for stipple bug
 * RCS:
 * $Log:	draw5.c,v $
 * Revision 1.2  88/04/28  10:13:01  jensen
 * use XReadBitmapFile() for bitmaps
 * 
 * 
 ******************************/


#include <stdio.h>
#include <errno.h>
#include <X11/Xlib.h>
#include <sys/types.h>
#include "b0.bitmap"
 
#define FALSE	0
#define TRUE	1
#define MAX_COLOR 4
 
char *color[MAX_COLOR] = {
    "green", "red", "yellow", "blue"
};

main (argc, argv)
int argc;
char **argv;
{
    int height, width;
    int i, index;
    Display * dpy;
    Window win;
    GC gc;
    XGCValues gcvalues;
    int gcmask;
    XEvent event;
    XConfigureEvent *pCnf;
    XExposeEvent *pExp;
    int     status;
    XSetWindowAttributes Attributes;
    Colormap cmap;
    XColor vdf[MAX_COLOR], edf[MAX_COLOR];
    Pixmap bkg, stip;
    unsigned long ValMask;
    int defdepth;
    char *StipFile;
    int stip_width, stip_height, stip_hot_x, stip_hot_y;

    dpy = XOpenDisplay ("");

    height = 100;
    width = 100;


/******************************
 * Colormap stuff
 ******************************/
    cmap = XDefaultColormap(dpy, DefaultScreen(dpy));
    for (i=0; i<MAX_COLOR; i++)
	status = XAllocNamedColor(dpy, cmap, color[i], &vdf[i], &edf[i]);

/******************************
 * Pixmap stuff
 ******************************/

    defdepth = DefaultDepth(dpy, DefaultScreen(dpy));
    bkg = XCreatePixmapFromBitmapData(dpy, DefaultRootWindow(dpy),
	b0_bits, b0_width, b0_height,
	vdf[1].pixel, vdf[3].pixel, defdepth);

    StipFile = (argc > 1) ? argv[1] : "s0";
    printf("StipFile=%s\n", StipFile);
    status = XReadBitmapFile(dpy, DefaultRootWindow(dpy), StipFile,
		&stip_width, &stip_height, &stip,
		&stip_hot_x, &stip_hot_y);
    printf("XReadBitmapFile status=%d\n", status);

    XWriteBitmapFile(dpy, "mongo", stip, 16, 16, 0, 0);
/*
 * Set Attributes
 */
    Attributes.background_pixmap = bkg;
    Attributes.border_pixel = BlackPixel (dpy, DefaultScreen (dpy));
    ValMask = CWBackPixmap | CWBorderPixel;

/*
 * Create the Window
 *
 * By default the foreground for a window is White so we set the background
 * to Black here.
 */
    win = XCreateWindow (dpy, DefaultRootWindow (dpy), 0, 0, width, height,
	    1,			/* Border Width */
	    0,			/* Depth */
	    InputOutput,	/* Class */
	    CopyFromParent,	/* Visual */
	    ValMask,		/* Value Mask */
	    &Attributes);	/* Attributes */

/* Create the GC */
    gcvalues.foreground = vdf[0].pixel;
    gcvalues.stipple = stip;
    gcvalues.fill_style = FillStippled;
    gcmask = GCForeground | GCStipple | GCFillStyle;
    gc = XCreateGC (dpy, win, gcmask, &gcvalues);

/* Make sure we catch our own expose event */
    XSelectInput (dpy, win, ExposureMask | StructureNotifyMask);

/* Map the window */
    XMapWindow (dpy, win);

/* Standard event processing */
    while (TRUE) {
	int x1, y1, x2, y2;

	status = XNextEvent (dpy, &event);
	if (event.type == Expose) {
	    printf("expose event\n");
	    pExp = (XExposeEvent *) &event;
	    if (pExp->count) continue;
	    XClearWindow (dpy, win);
	    XDrawLine(dpy, win, gc, x1, y1, x2, y2);
	    XFlush (dpy);
	} else if (event.type == ConfigureNotify) {
	    printf("configure notify event\n");
	    pCnf = (XConfigureEvent *) &event;
	    x1 = pCnf->width * 0.2 + 0.5;
	    y1 = pCnf->height * 0.2 + 0.5;
	    x2 = pCnf->width * 0.8 + 0.5;
	    y2 = pCnf->height * 0.8 + 0.5;
	    gcvalues.line_width = 0.05 * (pCnf->width + pCnf->height) + 0.5;
	    gcmask = GCLineWidth;
	    status = XChangeGC(dpy, gc, gcmask, &gcvalues);
	} else {
	    printf("unknown event number %d\n", event.type);
	} /* end if */
    } /* end while() */

} /* end main() */
---------------------------------   s0    ---------------------------------
#define s0_width 16
#define s0_height 16
static char s0_bits[] = {
   0x55, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa,
   0x55, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa,
   0x55, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa};
---------------------------------   s1    ---------------------------------
#define s1_width 16
#define s1_height 16
static char s1_bits[] = {
   0x33, 0x33, 0x33, 0x33, 0xcc, 0xcc, 0xcc, 0xcc, 0x33, 0x33, 0x33, 0x33,
   0xcc, 0xcc, 0xcc, 0xcc, 0x33, 0x33, 0x33, 0x33, 0xcc, 0xcc, 0xcc, 0xcc,
   0x33, 0x33, 0x33, 0x33, 0xcc, 0xcc, 0xcc, 0xcc};
---------------------------------   s2    ---------------------------------
#define s2_width 16
#define s2_height 16
static char s2_bits[] = {
   0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0,
   0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f,
   0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0};
---------------------------------   s3    ---------------------------------
#define s3_width 16
#define s3_height 16
static char s3_bits[] = {
   0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00,
   0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff,
   0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff};
---------------------------------   s4    ---------------------------------
#define s4_width 16
#define s4_height 16
static char s4_bits[] = {
   0x00, 0x00, 0x00, 0x02, 0x18, 0xc0, 0x0a, 0x04, 0x40, 0x10, 0x00, 0x40,
   0xa8, 0x05, 0x00, 0x08, 0x00, 0x00, 0x44, 0x24, 0xc0, 0x61, 0x22, 0x01,
   0x31, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00};
--------------------------------- Makefile ---------------------------------
ROOT = /gh10/X.V11R2
DEPEND=/usr/src/x11/makedepend/makedepend
INCLUDES = -I$(ROOT)

CC = cc
CFLAGS = -g $(INCLUDES)
XLIB = $(ROOT)/lib/X/libX.a
LIBS = $(XLIB)
SRCS = draw5.c
OBJS = draw5.o
PROGRAM = draw5

draw5: $(OBJS)
	$(CC) $(CFLAGS) -o $(PROGRAM) $(SRCS) $(LIBS)

clean: 
	rm -f *.bak *.o *~ *.BAK
lint:
	lint -baz $(INCLUDES) ${SRCS}

depend:
	${DEPEND} -v -I. ${CFLAGS} -s'# DO NOT DELETE' *.c

# DO NOT DELETE THIS LINE -- make depend depends on it.
--------------------------------- **END** ---------------------------------

FIX:
	None found.


