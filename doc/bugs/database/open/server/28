Return-Path: jim@EXPO.LCS.MIT.EDU 
Received: by EXPO.LCS.MIT.EDU; Thu, 10 Mar 88 10:09:19 EST
Date: Thu, 10 Mar 88 10:09:19 EST
From: jim@expo.lcs.mit.edu (Jim Fulton)
Message-Id: <8803101509.AA00527@EXPO.LCS.MIT.EDU>
To: bugs
Subject: A couple of Sun X11 fixes

### bug number:   77
### area:         server
### severity:     
### assigned to:  
### status:       also has change to xinit

(Message inbox:51)
Return-Path: @KILLINGTON.LCS.MIT.EDU:RWS@zermatt.lcs.mit.edu
Received: from KILLINGTON.LCS.MIT.EDU by EXPO.LCS.MIT.EDU; Thu, 10 Mar 88 08:46:48 EST
Return-Path: <@RELAY.CS.NET,@RELAY.CS.NET,@ai.toronto.edu:moraes@csri.toronto.edu>
Received: from RELAY.CS.NET (RELAY.CS.NET) by ZERMATT.LCS.MIT.EDU via INTERNET with SMTP id 125288; 23 Feb 88 21:12:00 EST
Received: from ai.toronto.edu by RELAY.CS.NET id aa18556; 23 Feb 88 18:46 EST
Received: from yonge.csri.toronto.edu by ai.toronto.edu via ETHER with SMTP id AA10331; Tue, 23 Feb 88 18:40:38 EST
Received: from moraes by yonge.csri.toronto.edu via UNIX id AA24721; Tue, 23 Feb 88 18:40:30 EST
Date: Tue, 23 Feb 88 18:40:30 EST
From: Mark Moraes <moraes%csri.toronto.edu@relay.cs.net>
Message-Id: <8802232340.AA24721@yonge.csri.toronto.edu>
To: RWS@zermatt.lcs.mit.edu
Subject: A couple of Sun X11 fixes
Resent-To: xbugs@expo.lcs.mit.edu
Resent-From: Robert Scheifler <RWS@zermatt.lcs.mit.edu>
Resent-Date: Thu, 10 Mar 88 08:46 EST
Resent-Message-Id: <880310084647.9.RWS@KILLINGTON.LCS.MIT.EDU>



Hi.

A couple of Sun bugs which have given us a few headaches in starting
up X11 and their fixes - 

The fix to the server simply gets it to send a SIGUSR1 to its parent
when its set up the connection block. This makes sure that xinit
doesn't start the first xterm until the server is good and ready. The
sleep(5) that tried to kludge around this needed to be increased on
some of our machines! The signal works more reliably.

The patch to xinit gets it to wait till the server sends the SIGUSR1.
This means that the wait. It also means that the waitforserver() stuff
is not really needed - I just left it there out of sheer laziness (It
ain't broke...)  The patch also disables setpgrp on suns, where it
isn't needed (don't run xterm -L) and more importantly, where it seems
to hang sometimes. The patch to xinit also includes the resetting
F_SETFL to stop getty going crazy after exiting X.

Mark.

*** /tmp/,RCSt1a18655	Tue Feb 23 13:38:10 1988
--- server/dix/main.c	Tue Feb 23 13:38:10 1988
***************
*** 21,27
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: main.c,v 1.3 87/12/12 00:11:15 drb Exp $ */
  
  #include "X.h"
  #include "Xproto.h"

--- 21,27 -----
  SOFTWARE.
  
  ******************************************************************/
! /* $Header: main.c,v 1.4 88/02/10 20:02:15 moraes Exp $ */
  
  #include <signal.h>
  #include "X.h"
***************
*** 23,28
  ******************************************************************/
  /* $Header: main.c,v 1.3 87/12/12 00:11:15 drb Exp $ */
  
  #include "X.h"
  #include "Xproto.h"
  #include "input.h"

--- 23,29 -----
  ******************************************************************/
  /* $Header: main.c,v 1.4 88/02/10 20:02:15 moraes Exp $ */
  
+ #include <signal.h>
  #include "X.h"
  #include "Xproto.h"
  #include "input.h"
***************
*** 213,218
  	if(!looping)
  	{
  	    CreateConnectionBlock();
  	}
  
  	Dispatch();

--- 214,220 -----
  	if(!looping)
  	{
  	    CreateConnectionBlock();
+ 	    kill(getppid(), SIGUSR1);
  	}
  
  	Dispatch();



*** /tmp/,RCSt1a20281	Tue Feb 23 18:26:02 1988
--- clients/xinit/xinit.c	Tue Feb 23 18:04:29 1988
***************
*** 1,5
  #ifndef lint
! static char *rcsid_xinit_c = "$Header: xinit.c,v 1.2 87/12/12 00:01:17 drb Exp $";
  #endif	lint
  #include <X11/copyright.h>
  

--- 1,5 -----
  #ifndef lint
! static char *rcsid_xinit_c = "$Header: xinit.c,v 1.4 88/02/10 20:00:02 moraes Exp $";
  #endif	lint
  #include <X11/copyright.h>
  
***************
*** 13,18
  #include <sys/resource.h>
  #include <sys/wait.h>
  #include <errno.h>
  
  #define	TRUE		1
  #define	FALSE		0

--- 13,19 -----
  #include <sys/resource.h>
  #include <sys/wait.h>
  #include <errno.h>
+ #include <fcntl.h>
  
  #define	TRUE		1
  #define	FALSE		0
***************
*** 29,34
  union wait	status;
  int serverpid = -1;
  int clientpid = -1;
  extern int	errno;
  
  sigCatch(sig)

--- 30,36 -----
  union wait	status;
  int serverpid = -1;
  int clientpid = -1;
+ static int serverReady = FALSE;
  extern int	errno;
  int flag;	/*save fcntl flag */
  
***************
*** 30,35
  int serverpid = -1;
  int clientpid = -1;
  extern int	errno;
  
  sigCatch(sig)
  	int	sig;

--- 32,38 -----
  int clientpid = -1;
  static int serverReady = FALSE;
  extern int	errno;
+ int flag;	/*save fcntl flag */
  
  sigCatch(sig)
  	int	sig;
***************
*** 38,44
  	signal(SIGINT, SIG_IGN);
  	Error("signal %d\n", sig);
  	shutdown(serverpid, clientpid);
! 	exit(1);
  }
  
  main(argc, argv)

--- 41,47 -----
  	signal(SIGINT, SIG_IGN);
  	Error("signal %d\n", sig);
  	shutdown(serverpid, clientpid);
! 	resetAndQuit(1);
  }
  
  messageCatch(sig)
***************
*** 41,46
  	exit(1);
  }
  
  main(argc, argv)
  int argc;
  register char **argv;

--- 44,55 -----
  	resetAndQuit(1);
  }
  
+ messageCatch(sig)
+ int sig;
+ {
+ 	serverReady = TRUE;
+ }
+ 
  main(argc, argv)
  int argc;
  register char **argv;
***************
*** 96,101
  		*sptr++ = *argv++;
  	*sptr = NULL;
  
  	/*
  	 * Start the server and client.
  	 */

--- 105,112 -----
  		*sptr++ = *argv++;
  	*sptr = NULL;
  
+ 	fcntl(2,F_GETFL,&flag);
+ 
  	/*
  	 * Start the server and client.
  	 */
***************
*** 101,106
  	 */
  	signal(SIGQUIT, sigCatch);
  	signal(SIGINT, sigCatch);
  	if ((serverpid = startServer(server)) > 0
  	 && (clientpid = startClient(client)) > 0) {
  		pid = -1;

--- 112,118 -----
  	 */
  	signal(SIGQUIT, sigCatch);
  	signal(SIGINT, sigCatch);
+ 	signal(SIGUSR1, messageCatch);
  	if ((serverpid = startServer(server)) > 0
  	 && (clientpid = startClient(client)) > 0) {
  		pid = -1;
***************
*** 113,120
  	shutdown(serverpid, clientpid);
  
  	if (serverpid < 0 || clientpid < 0)
! 		exit(ERR_EXIT);
! 	exit(OK_EXIT);
  }
  
  

--- 125,132 -----
  	shutdown(serverpid, clientpid);
  
  	if (serverpid < 0 || clientpid < 0)
! 		resetAndQuit(ERR_EXIT);
! 	resetAndQuit(OK_EXIT);
  }
  
  
***************
*** 188,194
  	char	*fmt;
  {
  	Error(fmt, x0,x1,x2,x3,x4,x5,x6,x7,x8,x9);
! 	exit(ERR_EXIT);
  }
  
  startServer(server)

--- 200,206 -----
  	char	*fmt;
  {
  	Error(fmt, x0,x1,x2,x3,x4,x5,x6,x7,x8,x9);
! 	resetAndQuit(ERR_EXIT);
  }
  
  startServer(server)
***************
*** 196,201
  {
  	int	serverpid;
  
  	serverpid = vfork();
  	switch(serverpid) {
  	case 0:

--- 208,214 -----
  {
  	int	serverpid;
  
+ 	serverReady = FALSE;
  	serverpid = vfork();
  	switch(serverpid) {
  	case 0:
***************
*** 206,211
  		 * prevent server from getting sighup from vhangup()
  		 * if client is xterm -L
  		 */
  		setpgrp(0,0);
  
  		execvp(server[0], server);

--- 219,225 -----
  		 * prevent server from getting sighup from vhangup()
  		 * if client is xterm -L
  		 */
+ #ifndef sun
  		setpgrp(0,0);
  #endif
  
***************
*** 207,212
  		 * if client is xterm -L
  		 */
  		setpgrp(0,0);
  
  		execvp(server[0], server);
  		Fatal("Server \"%s\" died on startup\n", server[0]);

--- 221,227 -----
  		 */
  #ifndef sun
  		setpgrp(0,0);
+ #endif
  
  		execvp(server[0], server);
  		Fatal("Server \"%s\" died on startup\n", server[0]);
***************
*** 224,229
  			serverpid = -1;
  			break;
  		}
  		/*
  		 * kludge to avoid race with TCP, giving server time to
  		 * set his socket options before we try to open it

--- 239,245 -----
  			serverpid = -1;
  			break;
  		}
+ 
  		/*
  		 *  Wait for SIGUSR1 which server will send when ready -
  		 *  i.e. when it has initialized all its connections
***************
*** 225,232
  			break;
  		}
  		/*
! 		 * kludge to avoid race with TCP, giving server time to
! 		 * set his socket options before we try to open it
  		 */
  		sleep(5);
  

--- 241,250 -----
  		}
  
  		/*
! 		 *  Wait for SIGUSR1 which server will send when ready -
! 		 *  i.e. when it has initialized all its connections
! 		 *  etc. Otherwise, trying to open a connection appears
! 		 *  to cause bad races
  		 */
  		pause();
  
***************
*** 228,234
  		 * kludge to avoid race with TCP, giving server time to
  		 * set his socket options before we try to open it
  		 */
! 		sleep(5);
  
  		if (waitforserver(serverpid) == 0) {
  			Error("Can't connect to server\n");

--- 246,252 -----
  		 *  etc. Otherwise, trying to open a connection appears
  		 *  to cause bad races
  		 */
! 		pause();
  
  		if (waitforserver(serverpid) == 0) {
  			Error("Can't connect to server\n");
***************
*** 291,293
  	if (processTimeout(serverpid, 3, "server to die"))
  		Fatal("Can't kill server\n");
  }

--- 309,320 -----
  	if (processTimeout(serverpid, 3, "server to die"))
  		Fatal("Can't kill server\n");
  }
+ 
+ resetAndQuit(i) 
+ 	int i;
+ 	
+ {
+ 	fcntl(2, F_SETFL,flag);
+ 	exit(i);
+ }
+ 


