Return-Path: ellis@athena.mit.edu
Received: by expo.lcs.mit.edu; Wed, 27 Apr 88 11:45:54 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA26363; Wed, 27 Apr 88 10:44:45 EST
Received: by E40-369-2.MIT.EDU (5.45/4.7) id AA26736; Wed, 27 Apr 88 11:44:08 EDT
Message-Id: <8804271544.AA26736@E40-369-2.MIT.EDU>
To: xbugs@athena.mit.edu
Cc: ellis@athena.mit.edu
Subject: Xqdss GC clipmask bug
Date: Wed, 27 Apr 88 11:44:05 EDT
From: Steve Ellis <ellis@athena.mit.edu>

### bug number:   425
### area:         server
### severity:     medium high
### comments:     

VERSION:
	X11 release 2
SYNOPSIS:
         Setting then unsetting a clipmask causes output lossage
         using Xqdss

DESCRIPTION:
         A small clipmask is used with XFillRectangle to create a graphic
         symbol. After the clipmask for the GC is reset to "None", output
         from some primitives, e.g. XDrawString and XDrawLine does not 
         appear in the window. Output from XFill* primitives appears
         correctly.
         
         
         
REPEAT-BY:
	Compile and run following code on Xqdss. The resulting output
        should have the letters "A" "B" and "C" in upper Right Diagonal.
        
Example Code:

  /* System include files */
  
#include <stdio.h>
#include <ctype.h>
#include <math.h>
#include <strings.h>
  
  /* X11 include files */
  
#include <X11/Xlib.h>

static Pixmap mark_map;
static int mark_xoffset,mark_yoffset;
static unsigned int mark_width,mark_height;

#define mark21_width 9
#define mark21_height 9
static char mark21_bits[] = {
   0xff, 0xff, 0xef, 0xff, 0xef, 0xff, 0xef, 0xff, 0x01, 0xff, 0xef, 0xff,
   0xef, 0xff, 0xef, 0xff, 0xff, 0xff};

static Display *dpyp;
static int bloxscreen;
static int bloxdepth;
static Window window;
static XSetWindowAttributes bloxwindow;
static unsigned int bloxwmask;


/* Default values for screen layout */

#define DEFAULT_X_OFFSET 0
#define DEFAULT_Y_OFFSET 0
#define DEFAULT_X_SIZE 200
#define DEFAULT_Y_SIZE 200
#define DEFAULT_BORDER_WIDTH 2

/* these variable control where the window appears on the screen */

static int x_offset     = DEFAULT_X_OFFSET;
static int y_offset     = DEFAULT_Y_OFFSET;
static int x_size       = DEFAULT_X_SIZE;
static int y_size       = DEFAULT_Y_SIZE;
static int border_width = DEFAULT_BORDER_WIDTH;

#define CFP CopyFromParent

  /* Graphics context related declarations */
  GC *cur_gc, *uncur_gc, draw_gc, erase_gc, fill_gc;


static int foreground, background;	/* pixel values for drawing colors */

/*
 *	VAXstation initialization routine.
 */

main(argc,argv)
  int argc;
  char *argv;
{

  char *cp;
  char *getenv();
  XGCValues gcv;
  unsigned long gcvmask;
   char *display = NULL;
   XEvent event;
  
  if( !(dpyp = XOpenDisplay(display)) ){
    fprintf (stderr,
	     "%s in %s:  Unable to open display.\n"
	    );
    
  } 
  bloxscreen = DefaultScreen(dpyp);
  bloxdepth  = DefaultDepth(dpyp,bloxscreen);

  
  if (dpyp == (Display *) NULL) {
    fprintf (stderr,
	     "%s in %s:  Unable to open display.\n"
	     );
  }
  
#ifdef XDEBUG
  XSynchronize(dpyp,YES);	
#endif XDEBUG
  
  /* Set up master window for blox. */

  foreground = BlackPixel(dpyp,bloxscreen);
  background = WhitePixel(dpyp,bloxscreen);

  /* The drawing masks as set result in black graphics on a white */
  /* background.  See if the environment variable BGB_BACKGROUND */
  /* is set to "BLACK", if so twiddle the background and the */
  /* forground. */
  
  cp = getenv("BGB_BACKGROUND");
  if ((strncmp(cp, "BLACK", 5) == 0) || (strncmp(cp, "black", 5) == 0)) {
    foreground = WhitePixel(dpyp,bloxscreen);
    background = BlackPixel(dpyp,bloxscreen);
  }
  
  bloxwindow.background_pixel = background ;
  bloxwindow.border_pixel     = foreground ;
/*  bloxwindow.backing_store    = WhenMapped ; */
  bloxwindow.backing_store    = NotUseful ;
  bloxwindow.override_redirect         = True ;
  bloxwmask = 
    CWBackPixel | CWBorderPixel | CWBackingStore | CWOverrideRedirect ;
  
  
  window = XCreateWindow(dpyp, RootWindow(dpyp,bloxscreen), 
			 x_offset, y_offset, x_size, y_size,
			 border_width,CFP,CFP,CFP,
			 bloxwmask, &bloxwindow);
  
  
  if (!window) {
    fprintf (stderr, 
	     "%s in %s:  Error opening main window.\n"
	     );
    XCloseDisplay (dpyp);
  }
  

  /* Make the window visible on the screen. */
  XSelectInput(dpyp,window,ExposureMask);
  XMapWindow (dpyp, window);

  XMaskEvent(dpyp,ExposureMask,&event);
  /* set default graphics_context*/	

  gcv.foreground = foreground;
  gcv.background = background;
  gcv.fill_style = FillSolid;
  gcv.line_style = LineSolid;
  gcv.graphics_exposures = False;
  
  gcvmask = GCForeground | GCBackground | GCFillStyle | 
    GCLineStyle | GCGraphicsExposures ;
  
  draw_gc = XCreateGC(dpyp,window,gcvmask,&gcv);
  fill_gc = XCreateGC(dpyp,window,gcvmask,&gcv);
  
  gcv.background = foreground;
  gcv.foreground = background;
  
  erase_gc = XCreateGC(dpyp,window,gcvmask,&gcv);
  
  cur_gc = &draw_gc;
  uncur_gc = &erase_gc;

  mark_map = XCreateBitmapFromData(dpyp,window,
            mark21_bits,mark21_width, mark21_height);

  mark_width   = mark21_width;
  mark_height  = mark21_height;
  mark_xoffset = 4;
  mark_yoffset = 4;

  vsmra2 (25,25);
  XDrawString(dpyp,window, *cur_gc,175,25,"A",1);
	
  vsmra2 (50,50);
  XDrawString(dpyp,window, *cur_gc,150,50,"B",1);

  vsmra2 (75,75);
  XDrawString(dpyp,window, *cur_gc,125,75,"C",1);

  vsmra2 (100,100);

  vsmra2 (125,125);
  vsfcir (75,125,10);

  vsmra2 (150,150);
  vsfcir (50,150,10);

  vsmra2 (175,175);
  vsfcir (25,175,10);

  XFlush(dpyp);
  
  sleep (10);
  

}
  
  vsmra2(x,y)
    
    register int x, y;
  {

      XSetClipOrigin(dpyp,*cur_gc,x-mark_xoffset,y-mark_yoffset); 
      XSetClipMask(dpyp,*cur_gc,mark_map); 
  
      XFillRectangle(dpyp,window,*cur_gc,x-mark_xoffset,y-mark_yoffset,
		     mark_width,mark_height);
      XSetClipMask(dpyp,*cur_gc,None);  
      XSetClipOrigin(dpyp,*cur_gc,0,0);

      
    
  }


  vsfcir(xcen,ycen,rad)
    register int xcen, ycen, rad;
  
  {
    int zero = 0;
    int zero1 = 23040;
    int xcorner,ycorner,diameter;

    
    xcorner = xcen - rad;
    ycorner = ycen - rad;
    diameter= 2 * rad; 

    XFillArc(dpyp,window,fill_gc,
             xcorner,ycorner,diameter,diameter,zero,zero1);
    
    
    return;
  }


