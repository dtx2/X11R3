Return-Path: Richard.Draves@m.gp.cs.cmu.edu
Received: by expo.lcs.mit.edu; Tue, 23 Aug 88 02:15:26 EDT
Received: from M.GP.CS.CMU.EDU by M.GP.CS.CMU.EDU; 23 Aug 88 02:14:49 EDT
To: xbugs@expo.lcs.mit.edu
Cc: zs01+@andrew.cmu.edu
Subject: multi-screen cursor bug on RTs
Date: Tue, 23 Aug 88 02:14:15 EDT
Message-Id: <15730.588320055@M.GP.CS.CMU.EDU>
From: Richard.Draves@m.gp.cs.cmu.edu

### bug number:   899
### area:         server
### severity:     low
### comments:     

VERSION:
	X11 release 2

CLIENT MACHINE:
	IBM PC/RT

CLIENT OPERATING SYSTEM:
	Mach

DISPLAY:
	All

SYNOPSIS:
	Cursor from one screen shows up on another screen

DESCRIPTION:
	When the mouse moves between screens, after ProcessInputEvents
	calls NewCurrentScreen, it takes the cursor on the old screen
	and realizes it & displays it on the new screen, if it isn't
	already there.  This is obviously bogus.  Furthermore, calling
	aedRealizeCursor multiple times on the same cursor is a big
	memory leak.

REPEAT-BY:
	start X with AED and APA-16 screens (-all -wrapx).  run
		xterm -bd 0 -sb -d unix:0.0
	move cursor from xterm window (upper-left APA-16 screen) directly
	into the AED screen.  note cursor is xterm cursor, not root
	window cursor.

FIX:
These diffs are on top of my previous RT fixes,
so your line numbers may vary.

When any of the DisplayCursor functions are called, they set rtCurrentCursor
in their screen.  Hence we can tell if NewCurrentScreen displayed a cursor
by setting this to NULL before and checking afterwards.  If it didn't
display a cursor, it likes the old cursor, so display the old cursor.
It must already be realized.

*** server/ddx/ibm/rt/rtio.c.~2~	Sat Aug 13 00:21:29 1988
--- server/ddx/ibm/rt/rtio.c	Mon Aug 22 22:44:37 1988
***************
*** 198,212 ****
  
  		if ( oldScr != rtCurrentScreen ) {
  		    (*rtHideCursor( oldScr ) )( oldScr ) ;
  		    NewCurrentScreen( screenInfo->rt_Screen, x, y ) ;
! 		    if ( screenInfo->rt_CurrentCursor != rtCurrentCursor( oldScr ) ) {
! 			(* screenInfo->rt_Screen->RealizeCursor )(
! 				screenInfo->rt_Screen,
! 				rtCurrentCursor( oldScr ) ) ;
! 		    }
! 		    (* screenInfo->rt_Screen->DisplayCursor )(
! 				screenInfo->rt_Screen,
! 				rtCurrentCursor( oldScr ) ) ;
  		}
  
  		if (screenInfo->rt_SoftCursor&&pE->xe_device==XE_MOUSE) {
--- 198,209 ----
  
  		if ( oldScr != rtCurrentScreen ) {
  		    (*rtHideCursor( oldScr ) )( oldScr ) ;
+ 		    screenInfo->rt_CurrentCursor = NULL ;
  		    NewCurrentScreen( screenInfo->rt_Screen, x, y ) ;
! 		    if ( screenInfo->rt_CurrentCursor == NULL )
! 			(* screenInfo->rt_Screen->DisplayCursor )(
! 				    screenInfo->rt_Screen,
! 				    rtCurrentCursor( oldScr ) ) ;
  		}
  
  		if (screenInfo->rt_SoftCursor&&pE->xe_device==XE_MOUSE) {
*** server/ddx/ibm/aed/aedcursor.c.~1~	Mon Aug 22 22:39:06 1988
--- server/ddx/ibm/aed/aedcursor.c.~2~	Mon Aug 22 22:44:35 1988
***************
*** 183,191 ****
  	psrcImage = psrcImage + srcRealWidth;
  	psrcMask = psrcMask + srcRealWidth;
      }
-     if (!rtCurrentCursor(pScr->myNum)) {
- 	rtCurrentCursor(pScr->myNum)= pCurs;
-     }
      TRACE(("exiting aedRealizeCursor\n"));
  }
  
--- 183,188 ----
*** server/ddx/ibm/apa16/apa16curs.c.~1~	Mon Aug 22 22:39:09 1988
--- server/ddx/ibm/apa16/apa16curs.c	Mon Aug 22 22:44:32 1988
***************
*** 428,436 ****
      TRACE(("apa16RealizeCursor( pScr= 0x%x, pCurs= 0x%x )\n",pScr,pCurs));
  
      pCurs->devPriv[ pScr->myNum ]= (pointer)NULL;
-     if (!rtCurrentCursor(pScr->myNum)) {
- 	rtCurrentCursor(pScr->myNum)= pCurs;
-     }
      return TRUE;
  }
  
--- 428,433 ----

