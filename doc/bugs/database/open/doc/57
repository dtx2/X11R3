Return-Path: @MCC.COM:peterson%sw.MCC.COM@mcc.com
Received: by expo.lcs.mit.edu; Mon, 26 Sep 88 10:21:17 EDT
Received: from milano.sw.mcc.com by MCC.COM with TCP/SMTP; Mon 26 Sep 88 09:20:59-CDT
Received: from cleo.sw.mcc.com by milano.sw.mcc.com (5.51/STP1.56) 
	id AA09302; Mon, 26 Sep 88 09:20:48 CDT
Date: Mon, 26 Sep 88 09:20:45 CDT
From: James Peterson <peterson%sw.MCC.COM@mcc.com>
Message-Id: <8809261420.AA23925@cleo.sw.mcc.com>
Received: by cleo.sw.mcc.com (3.2/STP1.14) 
	id AA23925; Mon, 26 Sep 88 09:20:45 CDT
To: xbugs@expo.lcs.mit.edu
Subject: Protocol and Protocol document problems
Cc: RWS@zermatt.lcs.mit.edu, peterson%sw.MCC.COM@mcc.com

### bug number:   1005
### area:         doc
### severity:     low
### comments:     look down a ways for the real bugs

Comments on the "X Window System Protocol" Document

files doc/Protocol/X11.protocol and doc/Protocol/X11.encoding from X11R2

>>> Suggested changes to the Protocol:

(1) Specify the length of each request, reply, error, and event in the
    first 4 bytes.  This allows a server to read the first 4 bytes, determine
    the amount of space needed for the upcoming object and malloc space for
    it.

(2) Add a field to each reply to identify the opcode of the request which
    generated it.  This allows the format of the reply to be determined from
    the reply.

(3) To each error, add a minor error number field that uniquely identifies
    the source of the error.  These minor error numbers may need to be server
    specific.  Current problem: the "type" of error covers too many different
    errors and so makes it difficult to determine the actual problem.  Case
    in point: a MatchError for a PutImage request.  According to the Protocol
    description, a MatchError can be caused by (i) Bitmap format, but depth
    not one, (ii) XYPixmap or ZPixmap, but depth not depth of drawable,
    (iii) left-pad not zero for ZPixmap, (iv) left-pad not less than
    bitmap-scanline-pad for server.  We had a PutImage that generated a
    MatchError, but it was a Bitmap with depth of one, and left-pad of zero.
    We had to follow the server source to determine that it was caused by
    the depth of the GC not matching the depth of the drawable (mentioned
    under the CreateGC request).

(4) Any request or reply with a list of n items should have some field with
    an explicit value of n.  At the moment some request require that the number
    of items in them be deduced from the request or reply length (for example,
    SetClipRectangles, PolyPoint, PolyLine, PolySegment, PutImage, ...)


>>> Meaning of the Protocol Definition problems

page 101, BYTE, INT8 and CARD8 are all 8-bit integers.  INT8 is signed and
CARD8 is unsigned.  What is BYTE?  How does it differ from INT8 or CARD8?

page 126, for PolyText8 and PolyText16, the pad can be 0 or 1 only because
dummy empty strings (of length zero) may be inserted.  This should be mentioned
as required by the protocol.

page 143, no type is given for the "data" field of ClientMessage


>>> field entry problems

page 130, the opcode is normally labelled as "opcode", but see 
CreateGlyphCursor, whose opcode is labelled "CreateGlyphCursor".

page 133, the opcode is normally labelled as "opcode", but see 
GetPointerControl, whose opcode is labelled "GetPointerControl".

page 135, the opcode is normally labelled as "opcode", but see 
ForceScreenSaver, whose opcode is labelled "ForceScreenSaver".


When a field entry is used later to identify the length of a variable
length section of a request or reply, it is normally given a name:

"In various cases the number of bytes occupied by a component will be specified
by a lowercase single-letter variable name instead of a specific numeric
value, and often some other component will have its value specified as a
simple numeric expression involving these variables."

The following protocol entries use variables but do not define them:


page 107, the CARD8 below should be m

        1       CARD8           number of SCREENs in roots

page 107, the CARD8 below should be n

        1       CARD8           number of DEPTHs in allowed-depths

page 120, (ListFonts) the CARD16 below should be n

        2       CARD16          number of STRs in names

page 131, (ListExtensions) the CARD8 below should be n

        1       CARD8           number of STRs in names

page 132, (GetKeyboardMapping) the CARD8 below should be m

        1       CARD8           count

page 134, (ChangeHosts) the CARD16 below should be n

        n       LISTofCARD8             address

page 134, (ListHosts) the CARD16 below should be n

        2       CARD16          number of HOSTs in hosts



>>> English problems:

page 64, "into eight sets, with the sets, with each set containing"

page 100, "do no matter)"



>>> Index problems

A major problem with the protocol document is the lack of indexing for
important types and formats.

No index entry (or Protocol text) explains "sequence numbers".  What is the 
meaning of the sequence numbers in events (for example)?

No index entry for Errors.

page 12, the section just before section "5. Errors" is the definition of
CHAR2B and STRING16.  Index these terms.

page 17, under "Per server information" defines the bitmap and pixmap image
formats: XYFormat and ZFormat.  Index these terms.  Pixmap and bitmap
also used (but not indexed) under PutImage and GetImage (pages 55, 56).


Makefile cannot always "make index" since index depends upon index.raw and 
no entry specifies how to make index.raw, if it is deleted.


page 145-146, Strange or incorrect index entries (from the index.troff file):

.I> "Event"" "\s+1\fB3\fP\s-1"
.I> "Event" "3"

.I> "ListFonts," "45"
.I> "ListFonts" "\s+1\fB44\fP\s-1, 119"

.I> "NAnd" "46"
.I> "Nand" "46"

.I> "Passive grab" "\s+1\fB5\fP\s-1"
.Ib "Passive"
.I< "Passive" "grab" "5"

.I> "PointerRoot," "78"
.I> "PointerRoot" "14, 39, 40, 73, 77, 78"

.I> "Request    " "14, 103"
.I> "Request" "\s+1\fB6\fP\s-1, \s+1\fB14\fP\s-1"

.I> "SyncKeyboard," "37"
.I> "SyncKeyboard" "36, 37, 38"




