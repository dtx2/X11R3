Return-Path: jim
Received: by expo.lcs.mit.edu; Tue, 5 Apr 88 09:07:33 EDT
Date: Tue, 5 Apr 88 09:07:33 EDT
From: jim@expo.lcs.mit.edu (Jim Fulton)
Message-Id: <8804051307.AA17684@EXPO.LCS.MIT.EDU>
To: xbugs
Subject: xterm man page and -S
Cc: ksr!benson@harvard.harvard.edu

### bug number:   265
### area:         doc
### severity:     
### assigned to:  
### status:       open
### comments:     see response at end

VERSION:
	X Window System, Version 11, Release 2

CLIENT MACHINE and OPERATING SYSTEM:
	all

DISPLAY:
	all

AREA:
	doc

SYNOPSIS:
	The description of -S in the xterm manual page leave something to be
	desired.

DESCRIPTION:
	The man page for xterm lists -Scon, but doesn't explain what the "con"
	is supposed to be (you have to look in the code to find that it is
	parsed with %c%c%d is supposed to be the last two letters of the pty
	name, and a positive number which is assumed to be Unix file descriptor
	associated with this pty.  This is a potentially useful feature for
	some people and should be made clearer.

REPEAT-BY:
	man xterm

FILES:
	clients/xterm/xterm.man

FIX:
	Replace the description of -S in the man page.

[here is some additional text that I sent to the user who asked how to 
use -S.  -Jim]

To: ksr!benson@harvard.harvard.edu
Subject: Re: using xterm inside something else 
In-reply-to: Your message of Tue, 05 Apr 88 09:28:07 EDT.
             <8804051328.AA22757@jeeves.ksr.com> 
Date: Tue, 05 Apr 88 11:18:56 EDT
From: jim


> Presumably, I want to hand one end of a pty side to 
> xterm and keep the other end in my application.

Yes.  Your application would drive one side of the pty, using xterm for
input and output.  This is useful in large programs that decide part way
through that they want to do terminal i/o with the user, but not as part
of a separate program.  Using -S, the application can start up xterm and
talk to it directly.  We used this at Cognition whenever the application 
wanted to bring up the debugger (it was a dynamically linked language, so
you could just invoke the debugger, and it would get loaded in).

Here's my best recollection.  You'll probably have to play with it.  This
definitely should get added into the man page.  The arguments in -S%c%c%d are
as follows:

	%c%c	appended to /dev/pty to form name of pty to use
	%d	number of OPEN file descriptor for /dev/pty%c%c above

So, if your program wanted to do terminal i/o, it would go through the 
following steps:

	o  allocate a pseudoterminal
	o  open the tty side for itself to use
	o  open the pty side for xterm to use
	o  build an xterm command to execute (e.g. "xterm -S%c%c%d ...")
		using the last two characters of the pseudoterminal's
		name and the file descriptor number of the pty.
	o  fork
	o  in the child, you can close everything BUT the pty side.
	o  in the child, exec the xterm -S%c%c%d command
	o  in the parent, close the pty side
	o  in the parent, read the sizeof(Window) bytes from xterm.  Throw it
		away if it isn't needed.
	o  can now do normal (read/write) i/o to the user.

Hmm, I think that is it....

Let me know what else you end up having to do so that I can make the man page
more explicit.

Jim
