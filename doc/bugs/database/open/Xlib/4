Return-Path: andreas%hpcvxja@sde.hp.com
Received: by expo.lcs.mit.edu; Mon, 17 Oct 88 18:38:36 EDT
Received: by ATHENA.MIT.EDU (5.45/4.7) id AA09491; Mon, 17 Oct 88 18:39:03 EDT
Received: from hp-pcd.HP.COM by hp-sde ; Mon, 17 Oct 88 14:56:40 pdt
Received: by hp-pcd.HP.COM (5.51/4.7)
	id AA09249; Mon, 17 Oct 88 14:55:35 PDT
Received: by hpcvxja.HP.COM; Mon, 17 Oct 88 14:55:03 pdt
Date: Mon, 17 Oct 88 14:55:03 pdt
From: Jim Andreas <andreas%hpcvxja@sde.hp.com>
Message-Id: <8810172155.AA03829@hpcvxja.HP.COM>
To: xbugs%hpcvxja@sde.hp.com
Subject: XAddPixel broken on 68000 machines ***********************************
Cc: andreas%hpcvxja@sde.hp.com

### bug number:   1080
### area:         Xlib
### severity:     low
### comments:     The optimization that causes this bug was ifdef'ed out in R3;
###               however, it might be nice to fix the problem and restore the
###               optimization.

VERSION:
	X11 release 3

SYNOPSIS:

	XAddPixel does not work when the following are true:
	   Zpixmap 8 bits_per_pixel 
	   68000 (Big-endian) machine with MSBfirst pixmap   
	xlib module XImUtil.c

DESCRIPTION:

	BACKGROUND:

	The implementation of XAddPixel on Zpixmaps operates by
	accumulating a pixel value into an unsigned long.
	The accumulation is done by casting an unsigned character
	pointer to point to the unsigned long and then writing to
	the character pointer, vis:

	    pixel = 0;
	    tmp = (unsigned char *)&pixel;
	    for (i = 0; i < nbytes; i++) *tmp++ = *src++;
	    ZNORMALIZE(&pixel, nbytes, ximage);
	
	The ZNORMALIZE routine, near as I can figure out,
	is responsible for reordering bytes within a pixel 
	value appropriately.  The ZNORMALIZE routine does 
	not change a pixmap with 8 bits_per_pixel.

	Then a value is added to the pixel value and the pixel is 
	written back:

	    pixel = pixel + value;
	    ZNORMALIZE(&pixel, nbytes, ximage);
	    tmp = (unsigned char *)&pixel;
	    for (i = 0; i < nbytes; i++) *dst++ = *tmp++;

	PROBLEM STATEMENT:

	This approach works ok on a machine with LSB first byte
	ordering.  However when run on a machine with MSB first
	byte ordering (any 68000 workstations) it fails.
	
	nbytes is 1 (8 bits_per_pixel) so 

	for (i = 0; i < nbytes; i++) *tmp++ = *src++

	always writes the pixel value into the MSB of the 
	unsigned long.

	then

	pixel = pixel + value;

	adds the passed in value to the LSB of the unsigned long, and

	for (i = 0; i < nbytes; i++) *dst++ = *tmp++;

	writes the MSB back into position.  The result is that
	nothing happens (the pixel value is unchanged).

REPEAT-BY:
	Run the tsubimage DEC xlib test "tsubimage" directed at a
	68000 based server (Rel 5).

SUGGESTED FIX:
	UNKNOWN HOW TO HANDLE:  I fixed this by reversing the order of
	the bytes in the unsigned long before and after the
	addition of the passed in value.  HOWEVER this should only be
	done on Big-Endian machines (I am not sure how to put in 
	an ifdef for this).

	My hacked in fix is as shown below.  The diffc output was
	actually confusing, so I show the more concise diff output:

XImUtil.c
640,641c640,642
< 	    pixel = 0;
< 	    tmp = (unsigned char *)&pixel;
---
> 	    unsigned long px;
> 	    px = 0;
> 	    tmp = (unsigned char *)&px;
643c644,646
< 	    ZNORMALIZE(&pixel, nbytes, ximage);
---
> 	    ZNORMALIZE(&px, nbytes, ximage);
> 	    for (i=sizeof(unsigned long); --i >= 0; )
> 		pixel = (pixel << 8) | ((unsigned char *)&px)[i];
645,646c648,652
< 	    ZNORMALIZE(&pixel, nbytes, ximage);
< 	    tmp = (unsigned char *)&pixel;
---
> 	    px = 0;
> 	    for (i=sizeof(unsigned long); --i >= 0; )
> 		px = (px << 8) | ((unsigned char *)&pixel)[i];
> 	    ZNORMALIZE(&px, nbytes, ximage);
> 	    tmp = (unsigned char *)&px;


Jim Andreas
Corvallis Workstation Operation
Hewlett-Packard 
1000 NE Circle Blvd.
Corvallis OR
(503) 750-2860
andreas%hpcvxja@hplabs.hp.com

