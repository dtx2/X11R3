# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.37 88/10/08 20:08:30 jim Exp $
#
# The cpp used on this machine replaces all newlines and multiple tabs and
# spaces in a macro expansion with a single space.  Imake tries to compensate
# for this, but is not always successful.
#

###########################################################################
# X Window System Makefile generated from template file Imake.tmpl
# $XConsortium: Imake.tmpl,v 1.91 88/10/23 22:37:10 jim Exp $
#
# Do not change the body of the imake template file.  Server-specific
# parameters may be set in the appropriate .macros file; site-specific
# parameters (but shared by all servers) may be set in site.def.  If you
# make any changes, you'll need to rebuild the makefiles using
# "make World" (at best) or "make Makefile; make Makefiles" (at least) in
# the top level directory.
#
# If your C preprocessor doesn't define any unique symbols, you'll need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make Makefile", "make Makefiles", or "make World").
#
# If you absolutely can't get imake to work, you'll need to set the
# variables at the top of each Makefile as well as the dependencies at the
# bottom (makedepend will do this automatically).
#

###########################################################################
# platform-specific configuration parameters - edit Sun.macros to change

# platform:  $XConsortium: Sun.macros,v 1.52 88/10/23 11:00:55 jim Exp $
# operating system:   SunOS 3.4

BOOTSTRAPCFLAGS =
             AS = as
             CC = cc
            CPP = /lib/cpp
             LD = ld
           LINT = lint
        INSTALL = install
           TAGS = ctags
             RM = rm -f
             MV = mv
             LN = ln -s
         RANLIB = ranlib
RANLIBINSTFLAGS = -t
             AR = ar clq
             LS = ls
       LINTOPTS = -axz
    LINTLIBFLAG = -C
           MAKE = make
STD_CPP_DEFINES =
    STD_DEFINES =

###########################################################################
# site-specific configuration parameters - edit site.def to change

# site:  $XConsortium: site.def,v 1.16 88/10/12 10:30:24 jim Exp $

###########################################################################
# definitions common to all Makefiles - do not edit

          SHELL =  /bin/sh

        DESTDIR =
      USRLIBDIR = $(DESTDIR)/usr/lib
         BINDIR = $(DESTDIR)/usr/bin/X11
         INCDIR = $(DESTDIR)/usr/include/X11
         ADMDIR = $(DESTDIR)/usr/adm
         LIBDIR = $(USRLIBDIR)/X11
     LINTLIBDIR = $(USRLIBDIR)/lint
        FONTDIR = $(LIBDIR)/fonts
       XINITDIR = $(LIBDIR)/xinit
         XDMDIR = $(LIBDIR)/xdm
         UWMDIR = $(LIBDIR)/uwm
         AWMDIR = $(LIBDIR)/awm
         TWMDIR = $(LIBDIR)/twm
        MANPATH = $(DESTDIR)/usr/man
  MANSOURCEPATH = $(MANPATH)/man
         MANDIR = $(MANSOURCEPATH)n
      LIBMANDIR = $(MANSOURCEPATH)3
    XAPPLOADDIR = $(LIBDIR)/app-defaults

   INSTBINFLAGS = -m 0755
   INSTUIDFLAGS = -m 4755
   INSTLIBFLAGS = -m 0664
   INSTINCFLAGS = -m 0444
   INSTMANFLAGS = -m 0444
   INSTAPPFLAGS = -m 0444
  INSTKMEMFLAGS = -m 4755
        FCFLAGS = -t
    CDEBUGFLAGS = -O

        PATHSEP = /
         DEPEND = $(DEPENDSRC)/makedepend
          IMAKE = $(IMAKESRC)/imake
            RGB = $(RGBSRC)/rgb
             FC = $(BDFTOSNFSRC)/bdftosnf
      MKFONTDIR = $(MKFONTDIRSRC)/mkfontdir
      MKDIRHIER = $(SCRIPTSSRC)/mkdirhier.sh

         CFLAGS = $(CDEBUGFLAGS) $(INCLUDES) $(STD_DEFINES) $(DEFINES)
      LINTFLAGS = $(LINTOPTS) $(INCLUDES) $(STD_DEFINES) $(DEFINES) -DLINT
        LDFLAGS = $(CDEBUGFLAGS) $(SYS_LIBRARIES) $(SYSAUX_LIBRARIES)
            TOP = ../.
      CLIENTSRC = $(TOP)/clients
        DEMOSRC = $(TOP)/demos
         LIBSRC = $(TOP)/lib
        FONTSRC = $(TOP)/fonts
     INCLUDESRC = $(TOP)/X11
      SERVERSRC = $(TOP)/server
        UTILSRC = $(TOP)/util
     SCRIPTSSRC = $(UTILSRC)/scripts
     EXAMPLESRC = $(TOP)/examples
     CONTRIBSRC = $(TOP)/contrib
         DOCSRC = $(TOP)/doc
         RGBSRC = $(TOP)/rgb
      DEPENDSRC = $(UTILSRC)/makedepend
       IMAKESRC = $(UTILSRC)/imake
       IRULESRC = $(UTILSRC)/imake.includes
        XLIBSRC = $(LIBSRC)/X
         XMUSRC = $(LIBSRC)/Xmu
     TOOLKITSRC = $(LIBSRC)/Xt
     AWIDGETSRC = $(LIBSRC)/Xaw
     OLDXLIBSRC = $(LIBSRC)/oldX
    BDFTOSNFSRC = $(FONTSRC)/bdftosnf
   MKFONTDIRSRC = $(FONTSRC)/mkfontdir
   EXTENSIONSRC = $(TOP)/extensions
   EXTENSIONLIB = $(EXTENSIONSRC)/lib/libXext.a
           XLIB = $(XLIBSRC)/libX11.a
         XMULIB = $(XMUSRC)/libXmu.a
        OLDXLIB = $(OLDXLIBSRC)/liboldX.a
       XTOOLLIB = $(TOOLKITSRC)/libXt.a
         XAWLIB = $(AWIDGETSRC)/libXaw.a
       LINTXLIB = $(XLIBSRC)/llib-lX11.ln
        LINTXMU = $(XMUSRC)/llib-lXmu.ln
      LINTXTOOL = $(TOOLKITSRC)/llib-lXt.ln
        LINTXAW = $(AWIDGETSRC)/llib-lXaw.ln
       INCLUDES = -I$(TOP)
      MACROFILE = Sun.macros
   ICONFIGFILES = $(IRULESRC)/Imake.tmpl \
			$(IRULESRC)/$(MACROFILE) $(IRULESRC)/site.def
  IMAKE_DEFINES =
      IMAKE_CMD = $(NEWTOP)$(IMAKE) -TImake.tmpl -I$(NEWTOP)$(IRULESRC) \
			-s Makefile $(IMAKE_DEFINES)
         RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a \
			.emacs_* tags TAGS make.log MakeOut

###########################################################################
# rules:  $XConsortium: Imake.rules,v 1.71 88/10/23 22:46:34 jim Exp $

###########################################################################
# start of Imakefile

        SUBDIRS = dix $(ALLDDXDIRS) $(ALLOSDIRS)
    STD_DEFINES =
    CDEBUGFLAGS = -O
     EXTENSIONS = $(EXTENSIONSRC)/server/libext.a
         EXTDIR = $(EXTENSIONSRC)/server
    FONTUTILDIR = $(FONTSRC)/mkfontdir
       FONTUTIL = $(FONTUTILDIR)/fontdir.o
     ALLDDXDIRS = ddx/snf ddx/mi ddx/cfb ddx/mfb \
                  ddx/dec/lk201 ddx/dec/qvss ddx/dec/qdss ddx/dec/qdss/libtl \
                  ddx/sun \
                  ddx/apollo \
                  ddx/ibm \
                  ddx/hp/hp ddx/hp/cfb ddx/hp/mfb ddx/hp/topcat \
                  ddx/ndx ddx/tek \
                  ddx/macII ddx/plx
      ALLOSDIRS = os/4.2bsd os/bsdemul
        SUBDIRS = dix $(ALLDDXDIRS) $(ALLOSDIRS)
           BSD = os/4.2bsd/libos.a
        BSDEMUL = os/bsdemul/libbsdemul.a
           SYSV = os/sysV/libos.a
            MFB = ddx/mfb/libmfb.a
            CFB = ddx/cfb/libcfb.a
             MI = ddx/mi/libmi.a
            DIX = dix/libdix.a
            SNF = ddx/snf/libsnf.a
         APOLLO = ddx/apollo/libapollo.a
            APC = ddx/apollo/apc/libapc.a
            SUN = ddx/sun/libsun.a
             HP = ddx/hp/hp/libhp.a
          MACII = ddx/macII/libmacII.a
            PLX = ddx/plx/libplx.a
        SYSLIBS = -lm -ldbm
    ALLPOSSIBLE = Xqvss Xqdss Xsun Xibm Xapollo Xhp Xpeg XmacII Xplx

# don't split this across lines, because imake will keep a trailing slash
ALL =   Xsun

#
# This turns off the default rule for compiling .c files because
# this makefile does not really know how to build it.  This is really
# just a hack because of sun's version of make and nfs.
#
.c.o:

all: $(ALL)

#
# qvss server
#
QVSSDIRS = dix ddx/snf ddx/mi ddx/mfb ddx/dec/lk201 ddx/dec/qvss os/4.2bsd
QVSSOBJS = ddx/dec/qvss/init.o ddx/dec/qvss/qvss_io.o ddx/dec/lk201/lk201.o\
	$(FONTUTIL)
QVSSLIBS = $(DIX) $(BSD) $(SNF) $(MFB) $(MI) $(EXTENSIONS)
XqvssDIRS = $(QVSSDIRS)

Xqvss: $(EXTDIR) $(FONTUTILDIR) $(QVSSDIRS) $(QVSSOBJS) $(QVSSLIBS)
	-@if [ -f Xqvss ]; then echo "$(MV) Xqvss Xqvss.bak"; \
	$(MV) Xqvss Xqvss.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xqvss $(QVSSOBJS) $(QVSSLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

loadXqvss:
	-@if [ -f Xqvss ]; then echo "$(MV) Xqvss Xqvss.bak"; \
	$(MV) Xqvss Xqvss.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xqvss $(QVSSOBJS) $(QVSSLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

#
# qdss server
#
QDSSDIRS = dix ddx/snf ddx/mi ddx/mfb ddx/dec/lk201 ddx/dec/qdss \
           ddx/dec/qdss/libtl os/4.2bsd
QDSSOBJS = ddx/dec/qdss/init.o ddx/dec/qdss/qdss_io.o ddx/dec/lk201/lk201.o\
	$(FONTUTIL)
QDSSLIBS = ddx/dec/qdss/libqdss.a ddx/dec/qdss/libtl/libtl.a \
           ddx/dec/qdss/libqdss.a \
           $(DIX) $(BSD) $(SNF) $(MFB) $(MI) $(EXTENSIONS)
XqdssDIRS = $(QDSSDIRS)

Xqdss: $(EXTDIR) $(FONTUTILDIR) $(QDSSDIRS) $(QDSSOBJS) $(QDSSLIBS)
	-@if [ -f Xqdss ]; then echo "$(MV) Xqdss Xqdss.bak"; \
	$(MV) Xqdss Xqdss.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xqdss $(QDSSOBJS) $(QDSSLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

loadXqdss:
	-@if [ -f Xqdss ]; then echo "$(MV) Xqdss Xqdss.bak"; \
	$(MV) Xqdss Xqdss.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xqdss $(QDSSOBJS) $(QDSSLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

#
# sun server
#

SUNDIRS = dix ddx/snf ddx/mi ddx/mfb ddx/cfb ddx/sun os/4.2bsd
SUNOBJS = ddx/sun/sunInit.o $(FONTUTIL)
SUNLIBS = $(SUN) $(CFB) $(DIX) $(BSD) $(SNF) $(MFB) $(MI) $(EXTENSIONS)
SUNSYSLIBS = $(SYSLIBS) $(SUNWINDOWSLIBS)
XsunDIRS = $(SUNDIRS)

Xsun: $(EXTDIR) $(FONTUTILDIR) $(SUNDIRS) $(SUNOBJS) $(SUNLIBS)
	-@if [ -f Xsun ]; then echo "$(MV) Xsun Xsun.bak"; \
	$(MV) Xsun Xsun.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xsun $(SUNOBJS) $(SUNLIBS) $(SYSAUX_LIBRARIES) $(SUNSYSLIBS) $(SYSLAST_LIBRARIES)

loadXsun:
	-@if [ -f Xsun ]; then echo "$(MV) Xsun Xsun.bak"; \
	$(MV) Xsun Xsun.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xsun $(SUNOBJS) $(SUNLIBS) $(SYSAUX_LIBRARIES) $(SUNSYSLIBS) $(SYSLAST_LIBRARIES)

#
# plx server
#
PLXDIRS = dix ddx/snf ddx/mi ddx/mfb ddx/plx ddx/dec/lk201 os/4.2bsd
PLXOBJS = ddx/plx/plxInit.o ddx/plx/plxEvents.o $(FONTUTIL)
PLXLIBS = $(PLX) ddx/dec/lk201/lk201.o $(DIX) $(BSD) $(SNF) $(MFB) $(MI) $(EXTENSIONS)
PLXSYSLIBS = $(SYSLIBS) -lplx
XplxDIRS = $(PLXDIRS)

Xplx: $(EXTDIR) $(FONTUTILDIR) $(PLXDIRS) $(PLXOBJS) $(PLXLIBS)
	-@if [ -f Xplx ]; then echo "$(MV) Xplx Xplx.bak"; \
	$(MV) Xplx Xplx.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xplx $(PLXOBJS) $(PLXLIBS) $(SYSAUX_LIBRARIES) $(PLXSYSLIBS) $(SYSLAST_LIBRARIES)

loadXplx:
	-@if [ -f Xplx ]; then echo "$(MV) Xplx Xplx.bak"; \
	$(MV) Xplx Xplx.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xplx $(PLXOBJS) $(PLXLIBS) $(SYSAUX_LIBRARIES) $(PLXSYSLIBS) $(SYSLAST_LIBRARIES)

#
# HP server
#
HPDIRS = dix ddx/snf ddx/mi ddx/hp/hp ddx/hp/cfb ddx/hp/mfb \
         ddx/hp/topcat os/4.2bsd os/bsdemul
HPOBJS = ddx/hp/hp/init.o $(FONTUTIL)
HPLIBS = $(DIX) $(EXTENSIONS) $(HP) \
          ddx/hp/topcat/libtopcat.a \
          ddx/hp/hp/libcrtstub.a \
	  $(HP) \
          ddx/hp/cfb/libcfb.a \
          ddx/hp/mfb/libmfb.a \
          $(BSD) $(SNF) $(MI) $(BSDEMUL)

HPSYSLIBS = $(SYSLIBS) $(HPMALLOCLIB)
XhpDIRS = $(HPDIRS)

Xhp: $(EXTDIR) $(FONTUTILDIR) $(HPDIRS) $(HPOBJS) $(HPLIBS)
	-@if [ -f Xhp ]; then echo "$(MV) Xhp Xhp.bak"; \
	$(MV) Xhp Xhp.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xhp $(HPOBJS) $(HPLIBS) $(SYSAUX_LIBRARIES) $(HPSYSLIBS) $(SYSLAST_LIBRARIES)

loadXhp:
	-@if [ -f Xhp ]; then echo "$(MV) Xhp Xhp.bak"; \
	$(MV) Xhp Xhp.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xhp $(HPOBJS) $(HPLIBS) $(SYSAUX_LIBRARIES) $(HPSYSLIBS) $(SYSLAST_LIBRARIES)

#
# ibm server
#

IBMALLOCLIB =

ddx/ibm/common/ibmDate.o: AlwaysForce
	(cd ddx/ibm/common; $(MAKE) ibmDate.o)

AlwaysForce:

loadXibm: ddx/ibm/common/ibmDate.o

IBMDIRS = dix ddx/snf ddx/mi ddx/mfb ddx/ibm os/4.2bsd
IBMOBJS = ddx/ibm/common/ibmcomm.o ddx/ibm/common/ibmDate.o $(FONTUTIL)
IBMLIBS = ddx/ibm/libibm.a $(IBMALLOCLIB) \
		$(DIX)  $(BSD) $(SNF) $(MFB) $(MI) $(EXTENSIONS)
IBMSYSLIBS = $(SYSLIBS)
XibmDIRS = $(IBMDIRS)

Xibm: $(EXTDIR) $(FONTUTILDIR) $(IBMDIRS) $(IBMOBJS) $(IBMLIBS)
	-@if [ -f Xibm ]; then echo "$(MV) Xibm Xibm.bak"; \
	$(MV) Xibm Xibm.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xibm $(IBMOBJS) $(IBMLIBS) $(SYSAUX_LIBRARIES) $(IBMSYSLIBS) $(SYSLAST_LIBRARIES)

loadXibm:
	-@if [ -f Xibm ]; then echo "$(MV) Xibm Xibm.bak"; \
	$(MV) Xibm Xibm.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xibm $(IBMOBJS) $(IBMLIBS) $(SYSAUX_LIBRARIES) $(IBMSYSLIBS) $(SYSLAST_LIBRARIES)

#
# apollo server
#
APOLLODIRS = dix ddx/snf ddx/mi ddx/mfb ddx/apollo os/4.2bsd
APOLLOOBJS = ddx/apollo/ap_init.o /sys/traits/io_traits $(FONTUTIL)
APOLLOLIBS = $(APOLLO) $(APC) $(DIX) $(BSD) $(SNF) $(MFB) $(MI) $(EXTENSIONS)
XapolloDIRS = $(APOLLODIRS)

Xapollo: $(EXTDIR) $(FONTUTILDIR) $(APOLLODIRS) $(APOLLOOBJS) $(APOLLOLIBS)
	-@if [ -f Xapollo ]; then echo "$(MV) Xapollo Xapollo.bak"; \
	$(MV) Xapollo Xapollo.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xapollo $(APOLLOOBJS) $(APOLLOLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

loadXapollo:
	-@if [ -f Xapollo ]; then echo "$(MV) Xapollo Xapollo.bak"; \
	$(MV) Xapollo Xapollo.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xapollo $(APOLLOOBJS) $(APOLLOLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

#
# ndx server
#
NDXDIRS = dix ddx/snf ddx/mi ddx/mfb ddx/cfb ddx/ndx os/4.2bsd
NDXOBJS = ddx/ndx/init.o ddx/ndx/ndx_io.o $(FONTUTIL)
NDXLIBS = $(DIX) $(BSD) $(SNF) $(MFB) $(CFB) $(MI) $(EXTENSIONS)
XndxDIRS = $(NDXDIRS)

Xndx: $(EXTDIR) $(FONTUTILDIR) $(NDXDIRS) $(NDXOBJS) $(NDXLIBS)
	-@if [ -f Xndx ]; then echo "$(MV) Xndx Xndx.bak"; \
	$(MV) Xndx Xndx.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xndx $(NDXOBJS) $(NDXLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

loadXndx:
	-@if [ -f Xndx ]; then echo "$(MV) Xndx Xndx.bak"; \
	$(MV) Xndx Xndx.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xndx $(NDXOBJS) $(NDXLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

#
# pegasus server
#
PEGASUSDIRS = dix ddx/snf ddx/mi ddx/mfb ddx/tek os/4.2bsd
PEGASUSOBJS = ddx/tek/tek4310.obj ddx/tek/tekextra.o $(FONTUTIL)
PEGASUSLIBS = $(DIX) $(BSD) $(SNF) $(MFB) $(MI) $(EXTENSIONS)
XpegDIRS = $(PEGASUSDIRS)

Xpeg: $(EXTDIR) $(FONTUTILDIR) $(PEGASUSDIRS) $(PEGASUSOBJS) $(PEGASUSLIBS)
	-@if [ -f Xpeg ]; then echo "$(MV) Xpeg Xpeg.bak"; \
	$(MV) Xpeg Xpeg.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xpeg $(PEGASUSOBJS) $(PEGASUSLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

loadXpeg:
	-@if [ -f Xpeg ]; then echo "$(MV) Xpeg Xpeg.bak"; \
	$(MV) Xpeg Xpeg.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o Xpeg $(PEGASUSOBJS) $(PEGASUSLIBS) $(SYSAUX_LIBRARIES) $(SYSLIBS) $(SYSLAST_LIBRARIES)

#
# macII server
#
MACIIDIRS = dix ddx/snf ddx/mi ddx/mfb ddx/cfb ddx/macII os/4.2bsd os/bsdemul
MACIIOBJS = ddx/macII/macIIInit.o $(FONTUTIL)
MACIILIBS = $(MACII) $(CFB) $(DIX) $(BSD) $(SNF) $(BSDEMUL) $(MFB) $(MI) $(EXTENSIONS)
MACIISYSLIBS = $(SYSLIBS)
XmacIIDIRS = $(MACIIDIRS)

XmacII: $(EXTDIR) $(FONTUTILDIR) $(MACIIDIRS) $(MACIIOBJS) $(MACIILIBS)
	-@if [ -f XmacII ]; then echo "$(MV) XmacII XmacII.bak"; \
	$(MV) XmacII XmacII.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o XmacII $(MACIIOBJS) $(MACIILIBS) $(SYSAUX_LIBRARIES) $(MACIISYSLIBS) $(SYSLAST_LIBRARIES)

loadXmacII:
	-@if [ -f XmacII ]; then echo "$(MV) XmacII XmacII.bak"; \
	$(MV) XmacII XmacII.bak; else exit 0; fi
	$(CC) $(CDEBUGFLAGS) -o XmacII $(MACIIOBJS) $(MACIILIBS) $(SYSAUX_LIBRARIES) $(MACIISYSLIBS) $(SYSLAST_LIBRARIES)

#
# other, necessary targets
#

RealMakefiles:: $(IMAKE)

RealMakefiles::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SERVERSUBDIRS) ;\
	do \
	echo "Making Makefiles in $$i..."; \
	case "$$i" in \
	./?*/?*/?*/?*) newtop=../../../../ sub=subsubsubsub;; \
	./?*/?*/?*) newtop=../../../ sub=subsubsub;; \
	./?*/?*) newtop=../../ sub=subsub;; \
	./?*) newtop=../ sub=sub;; \
	*/?*/?*/?*) newtop=../../../../ sub=subsubsubsub;; \
	*/?*/?*) newtop=../../../ sub=subsubsub;; \
	*/?*) newtop=../../ sub=subsub;; \
	*) newtop=../ sub=sub;; \
	esac; \
	$(MAKE) $${sub}dirMakefiles NEWTOP=$$newtop \
	MAKEFILE_SUBDIR=$$i;\
	done

subdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then \
	echo "$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak"; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=../$(TOP); \
	$(MAKE) $(MFLAGS) Makefiles

subsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then \
	echo "$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak"; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=../../$(TOP); \
	$(MAKE) $(MFLAGS) Makefiles

subsubsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then \
	echo "$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak"; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=../../../$(TOP); \
	$(MAKE) $(MFLAGS) Makefiles

subsubsubsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then \
	echo "$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak"; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=../../../../$(TOP); \
	$(MAKE) $(MFLAGS) Makefiles

install:: $(ALL)
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(ALL); do \
	(set -x; $(INSTALL) -c $(INSTALLFLAGS) $$i $(BINDIR)); \
	done

#
# Gad, but I wish this wasn't so complicated.  All this because
# If we are making two servers, then there may be two lists of
# directories to depend or whatever, most of which are duplicates
#

Makefiles::
	@for i in $(ALL); do \
		dirs="$$dirs \$$($${i}DIRS)"; \
	done; \
	$(MAKE) $(MFLAGS) RealMakefiles "SERVERSUBDIRS=$$dirs"

AllMakefiles::
	@$(MAKE) $(MFLAGS) RealMakefiles "SERVERSUBDIRS=$(SUBDIRS)"

AllClean::
	@$(MAKE) $(MFLAGS) Realclean "SERVERSUBDIRS=$(SUBDIRS)"

AllTags::
	@$(MAKE) $(MFLAGS) Realtags "SERVERSUBDIRS=$(SUBDIRS)"

clean::
	@for i in $(ALL); do \
	dirs="$$dirs \$$($${i}DIRS)"; \
	done; \
	$(MAKE) $(MFLAGS) Realclean \
	"SERVERSUBDIRS=$$dirs" \
	LINT=$(LINT) DESTDIR=$(DESTDIR)

Realclean:
	@subdirs=`ls -d $(SERVERSUBDIRS) | sort -u`; \
	for i in $$subdirs; do \
	echo "clean""ing $$i"; \
	(cd $$i ; $(MAKE) $(MFLAGS) clean \
	LINT=$(LINT) DESTDIR=$(DESTDIR) ); \
	done

tags::
	@for i in $(ALL); do \
	dirs="$$dirs \$$($${i}DIRS)"; \
	done; \
	$(MAKE) $(MFLAGS) Realtags \
	"SERVERSUBDIRS=$$dirs" \
	LINT=$(LINT) DESTDIR=$(DESTDIR)

Realtags:
	@subdirs=`ls -d $(SERVERSUBDIRS) | sort -u`; \
	for i in $$subdirs; do \
	echo "tags""ing $$i"; \
	(cd $$i ; $(MAKE) $(MFLAGS) tags \
	LINT=$(LINT) DESTDIR=$(DESTDIR) ); \
	done

depend::
	@for i in $(ALL); do \
	dirs="$$dirs \$$($${i}DIRS)"; \
	done; \
	$(MAKE) $(MFLAGS) Realdepend \
	"SERVERSUBDIRS=$$dirs" \
	LINT=$(LINT) DESTDIR=$(DESTDIR)

Realdepend:
	@subdirs=`ls -d $(SERVERSUBDIRS) | sort -u`; \
	for i in $$subdirs; do \
	echo "depend""ing $$i"; \
	(cd $$i ; $(MAKE) $(MFLAGS) depend \
	LINT=$(LINT) DESTDIR=$(DESTDIR) ); \
	done

install::
	@for i in $(ALL); do \
	dirs="$$dirs \$$($${i}DIRS)"; \
	done; \
	$(MAKE) $(MFLAGS) Realinstall \
	"SERVERSUBDIRS=$$dirs" \
	LINT=$(LINT) DESTDIR=$(DESTDIR)

Realinstall:
	@subdirs=`ls -d $(SERVERSUBDIRS) | sort -u`; \
	for i in $$subdirs; do \
	echo "install""ing $$i"; \
	(cd $$i ; $(MAKE) $(MFLAGS) install \
	LINT=$(LINT) DESTDIR=$(DESTDIR) ); \
	done

lintlib::
	@for i in $(ALL); do \
	dirs="$$dirs \$$($${i}DIRS)"; \
	done; \
	$(MAKE) $(MFLAGS) Reallintlib \
	"SERVERSUBDIRS=$$dirs" \
	LINT=$(LINT) DESTDIR=$(DESTDIR)

Reallintlib:
	@subdirs=`ls -d $(SERVERSUBDIRS) | sort -u`; \
	for i in $$subdirs; do \
	echo "lintlib""ing $$i"; \
	(cd $$i ; $(MAKE) $(MFLAGS) lintlib \
	LINT=$(LINT) DESTDIR=$(DESTDIR) ); \
	done

lint::
	@for i in $(ALL); do \
	dirs="$$dirs \$$($${i}DIRS)"; \
	done; \
	$(MAKE) $(MFLAGS) Reallint \
	"SERVERSUBDIRS=$$dirs" \
	LINT=$(LINT) DESTDIR=$(DESTDIR)

Reallint:
	@subdirs=`ls -d $(SERVERSUBDIRS) | sort -u`; \
	for i in $$subdirs; do \
	echo "lint""ing $$i"; \
	(cd $$i ; $(MAKE) $(MFLAGS) lint \
	LINT=$(LINT) DESTDIR=$(DESTDIR) ); \
	done

$(EXTDIR) $(FONTUTILDIR) $(SUBDIRS): FRC
	@cd $@ ; echo "making $@"; \
	$(MAKE) $(MFLAGS) 'CDEBUGFLAGS=$(CDEBUGFLAGS)' 'CC=$(CC)' all

clean::
	$(RM) $(ALLPOSSIBLE)

install.man:: Xserver.man
	$(INSTALL) -c $(INSTMANFLAGS) Xserver.man $(MANDIR)/Xserver.n

install::
	@echo "************************************************************"
	@echo "* "
	@echo "*     Don't forget to create a link called $(BINDIR)/X"
	@echo "*     pointing to the default server, if there is one."
	@echo "* "
	@echo "************************************************************"

FRC:

###########################################################################
# Imake.tmpl common rules for all Makefiles - do not edit

emptyrule::

clean::
	$(RM_CMD) \#*

Makefile:: $(IMAKE)

Makefile:: Imakefile \
	$(IRULESRC)/Imake.tmpl \
	$(IRULESRC)/Imake.rules \
	$(IRULESRC)/site.def \
	$(IRULESRC)/$(MACROFILE)
	-@if [ -f Makefile ]; then \
	echo "$(RM) Makefile.bak; $(MV) Makefile Makefile.bak"; \
	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	else exit 0; fi
	$(IMAKE_CMD) -DTOPDIR=$(TOP)

$(IMAKE):
	@echo "making $@"; \
	cd $(IMAKESRC); $(MAKE) BOOTSTRAPCFLAGS=$(BOOTSTRAPCFLAGS)

tags::
	$(TAGS) -w *.[ch]
	$(TAGS) -xw *.[ch] > TAGS

###########################################################################
# empty rules for directories that do not have SUBDIRS - do not edit

install::
	@echo "install done"

install.man::
	@echo "install.man done"

Makefiles::

###########################################################################
# dependencies generated by makedepend

