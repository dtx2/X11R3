The following changes have been made to this directory since R2:

     o	the Intrinsics have been adopted by the Consortium as part
	of the X Standard.
     o	many bugs fixed, including the ability to create more than
	896 widgets, to destroy the last widget in an application,
	to call XtDestroyWidget from within a destroy_callback, to
	call XtNextEvent recursively from input or timer callbacks, and
	to call XtOverrideTranslations or XtAugmentTranslations after
	the target widget has been realized.
     o	A new build-time option for machine architectures that support
	non-aligned references to ints and longs has been added and the
	default changed to avoid problems on architectures that don't.
     o	the build-time option to allow '=' as an abbreviation for
	'-geometry' is no longer supported.
     o	An additional source for application resource specifications
	has been added; see XAPPLRESDIR under XtDisplayInitialize.
     o	XtGetValues now works correctly on most machine architectures.
	Applications that relied on the broken behaviour will have to
	be fixed.  In particular, only the number of bytes specified
	by the resource size will be copied; not an entire (long) word.
     o	the definitions of the types Dimension and Position have
	changed.  Correct code will not be affected by this, but code
	that assumed that Dimensions and Positions were ints may
	break.  In particular, all cases where pointers to such fields
	are used will need to be checked.  In the standard interfaces,
	the only such places are calls to XtMakeResizeRequest and
	XtGetValues.  Widgets that pass pointers in callbacks or other
	public interfaces will also need to be checked.  This change
	plus the preceeding bugfix require all application calls to
	XtGetValues to be checked for correctness, especially those
	that refer to XtNx, XtNy, XtNwidth, XtNheight and
	XtNborderWidth.
     o	XtGetValues and XtSetValues on callback lists now work consistently
	with the public callback list structures.
     o	XtSetKeyboardFocus should work correctly.
     o	the link Atoms.h has been removed; use StringDefs.h.
     o	support for Selections has been added.  See section 11.5 of
	the Intrinsics documentation.
     o	new syntax in translation tables allows resource
	specifications to provide translations that are merged with
	the default widget translations, rather than completely
	replacing them.
     o	the translation table syntax has been extended to completely
	support keysym names as modifier and detail fields.  Better
	support for indicating upper/lower case sensitivity in
	translations has been added, plus hooks for providing
	non-standard case converters and non-standard keycode to
	keysym converters.
     o	Application Contexts have been added to several interfaces
	to allow for re-entrant libraries.  The old interfaces remain
	supported for compatibility (see Appendix C of the Intrinsics
	documentation) and will use a global default context.
     o	multiple Display connections are now supported.  Displays
	opened with XOpenDisplay can also be registered with the
	toolkit.
     o	a new routine, XtReleaseGC, must be used in place of
	XtDestroyGC if the application is using XtGetGC on multiple
	displays.
     o	XtInitialize has been split up into four separate routines;
	XtToolkitInitialize, XtCreateApplicationContext, XtOpenDisplay
	and XtAppCreateShell.  XtInitialize remains supported as a
	convenience routine for simple applications.
     o	additional standard command line options have been defined;
	'-selectionTimeout' and '+synchronous'.
     o	the resource database created by the Intrinsics can now be
	accessed directly, using Xrm routines, if desired.
     o	a per-user application class defaults file has been added,
	which will be loaded into the resource database immediately
	after the system-wide application class defaults and before
	the user preference resources.
     o	widget sub-classes can now provide default values for
	superclass resources that override the superclass's default
	before the superclass initialize procedure is called.
     o	resource lists can now specify as default values the Black and
	White pixels and the default font assigned by the server.
	ReverseVideo is implemented only for these two pixels.  See
	XtDefaultForeground, XtDefaultBackground and XtDefaultFont.
     o	support for computing default values for resources at run-time
	has been added.  See XtRCallProc.
     o	additional error and warning message interfaces have been
	defined that allow customization of error messages and provide
	for textual substitution in the message.  All internal error
	messages generated by the Intrinsics use these new interfaces.
     o	a routine to determine if X input, alternate input, or timer
	input is available without actually processing any has been
	added.  See XtAppPending.
     o	XtDispatchEvent now returns a Boolean indicating whether or
	not a widget was found to which to dispatch the event.
     o	a function to return the full event mask for a widget has been
	added.  See XtBuildEventMask.
     o	limited support for background processing has been added.
	See XtAddWorkProc.
     o	support for accelerators has been added to the translation
	manager.  Accelerators are event bindings that trigger actions
	in a widget other than the one in which the event(s) occurred.
     o	resource hierarchies are no longer qualified by an additional
	name and class to the left of the ApplicationShellWidget name
	and class.  See the documentation for suggestions on ways
	to build common or independent resource hierarchies within
	a single application.  This may have compatibility implications
	for existing resource files that contain full resource names,
	and for applications that used XtCreateApplicationShell.
     o	colormap and depth fields have been added to Core so that
	widgets can specify values different from their parent's.
     o	CoreClass has two new fields; a display_accelerator method
	for the new accelerators capability and a field to allow
	future additions to CoreClass without requiring a re-compile
	of all widgets.  Widget class initializers should be
	updated to initialize these to XtInheritDisplayAccelerator
	and NULL, respectively.  Old widgets will continue to work 
	without updating.
     o	the interface to the accept_focus procedure now has a time
	parameter and a new interface to it, XtCallAcceptFocus, has
	been added.  The accept_focus procedure must now return a
	Boolean to indicate whether or not the widget actually wanted
	the focus.  Widgets implementing an accept_focus procedure
	will have to be updated.
     o	CompositeClass dropped the move_focus_to_next and
	move_focus_to_prev fields.  CompositeClass also added the
	field to allow for future expansion.  Widget class
	initializers for all composite widgets must be modified to
	remove the initializers for the first two and initialize the
	last to NULL.
     o	the num_mapped_children field has been dropped from
	CompositePart.  Most widgets that used this field were
	probably buggy.
     o	a new flag, CWQueryOnly, has been added to geometry requests.
	A geometry manager is expected to return the same information
	whether or not this flag is set, but to not actually make any
	geometry changes if CWQueryOnly is set.  Geometry managers
	will have to be updated.
     o	Any widget may be specified as the parent in XtCreateWidget.
	Children of non-composite widgets may not be managed (via
	XtManageChild), nor may they make geometry requests.
     o	the inquiry function XtIsManaged has been added.
     o	a new routine, XtGetResourceList has been added to return
	the complete resource list for a widget class.
     o	the builtin MenuPopdown action procedure now accepts
	an optional (shell) widget name.
     o	XtRealizeWidget now respects the map_when_managed attribute
	for all widgets, including Shells.
     o	XtCreateWindow and ShellRealize will now report more helpful
	error messages when a widget is to be realized with a width
	or height of 0.
     o	Shell will now allow geometry changes via XtSetValues when
	the XtNallowShellResize resource is False.
     o	the "new" argument to set_values routines now contains the
	real widget (was formerly the "current" argument).  This will
	affect widgets that make explicit geometry requests within
	their set_values routine.  Widgets should never assume the
	geometry in "new" is what they will actually get; instead,
	they should rely on a call to their Resize procedure to inform
	them of changes.
     o	XtDestroyWidget will now automatically call XtRemoveAllCallbacks
	on every callback list for each destroyed widget; widget
	destroy procedures are no longer required to do so.
